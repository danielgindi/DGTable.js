{"version":3,"file":"index.js","sources":["src/util.js","src/row_collection.js","src/column_collection.js","src/css_util.js","src/selection_helper.js","src/by_column_filter.js","src/index.js"],"sourcesContent":["'use strict';\r\n\r\nconst indexOf = Array.prototype.indexOf;\r\n\r\nexport const includes = function includes (array, item) {\r\n    return indexOf.call(array, item) >= 0;\r\n};\r\n\r\nexport const find = function find (array, predicate) {\r\n    for (let i = 0, len = array.length; i >= 0 && i < len; i += 1) {\r\n        if (predicate(array[i], i, array))\r\n            return array[i];\r\n    }\r\n};\r\n\r\nexport const htmlEncode = function htmlEncode (text) {\r\n    return text.replace(/&/g, \"&amp;\")\r\n        .replace(/</g, \"&lt;\")\r\n        .replace(/>/g, \"&gt;\")\r\n        .replace(/'/g, \"&#39;\")\r\n        .replace(/\"/g, \"&quot;\")\r\n        .replace(/\\n/g, '<br />');\r\n};\r\n","'use strict';\r\n\r\n// Define class RowCollection\r\nfunction RowCollection () {\r\n\r\n    // Instantiate an Array. Seems like the `.length = ` of an inherited Array does not work well.\r\n    // I will not use the IFRAME solution either in fear of memory leaks, and we're supporting large datasets...\r\n    let collection = [];\r\n\r\n    // Synthetically set the 'prototype'\r\n    Object.assign(collection, RowCollection.prototype);\r\n\r\n    // Call initializer\r\n    collection.initialize.apply(collection, arguments);\r\n\r\n    return collection;\r\n}\r\n\r\n// Inherit Array\r\nRowCollection.prototype = [];\r\n\r\nRowCollection.prototype.initialize = function (options) {\r\n\r\n    options = options || {};\r\n\r\n    /** @field {string} sortColumn */\r\n    this.sortColumn = options.sortColumn == null ? [] : options.sortColumn;\r\n};\r\n\r\n/**\r\n * @param {Object|Object[]} rows - row or array of rows to add to this collection\r\n * @param {number?} at - position to insert rows at\r\n */\r\nRowCollection.prototype.add = function (rows, at) {\r\n    let isArray = ('splice' in rows && 'length' in rows), i, len;\r\n    if (isArray) {\r\n        if (at) {\r\n            for (i = 0, len = rows.length; i < len; i++) {\r\n                this.splice(at++, 0, rows[i]);\r\n            }\r\n        } else {\r\n            for (i = 0, len = rows.length; i < len; i++) {\r\n                this.push(rows[i]);\r\n            }\r\n        }\r\n    } else {\r\n        if (at) {\r\n            this.splice(at, 0, rows);\r\n        } else {\r\n            this.push(rows);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * @param {Object|Object[]=} rows Row or array of rows to add to this collection\r\n */\r\nRowCollection.prototype.reset = function (rows) {\r\n    this.length = 0;\r\n    if (rows) {\r\n        this.add(rows);\r\n    }\r\n};\r\n\r\n/**\r\n * @param {Function} filterFunc - Filtering function\r\n * @param {Object|null} args? - Options to pass to the function\r\n * @returns {RowCollection} success result\r\n */\r\nRowCollection.prototype.filteredCollection = function (filterFunc, args) {\r\n    if (filterFunc && args) {\r\n        let rows = new RowCollection({ sortColumn: this.sortColumn });\r\n        \r\n        for (let i = 0, len = this.length, row; i < len; i++) {\r\n            row = this[i];\r\n            if (filterFunc(row, args)) {\r\n                row['__i'] = i;\r\n                rows.push(row);\r\n            }\r\n        }\r\n        return rows;\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\n/**\r\n * @type {Function|null|undefined}\r\n */\r\nRowCollection.prototype.onComparatorRequired = null;\r\n\r\n/**\r\n * @type {Function|null|undefined}\r\n */\r\nRowCollection.prototype.onSort = null;\r\n\r\nlet nativeSort = RowCollection.prototype.sort;\r\n\r\nfunction getDefaultComparator(column, descending) {\r\n    let columnName = column.column;\r\n    let comparePath = column.comparePath || columnName;\r\n    if (typeof comparePath === 'string') {\r\n        comparePath = comparePath.split('.');\r\n    }\r\n    let pathLength = comparePath.length,\r\n        hasPath = pathLength > 1,\r\n        i;\r\n\r\n    let lessVal = descending ? 1 : -1, moreVal = descending ? -1 : 1;\r\n    return function(leftRow, rightRow) {\r\n        let leftVal = leftRow[comparePath[0]],\r\n            rightVal = rightRow[comparePath[0]];\r\n        if (hasPath) {\r\n            for (i = 1; i < pathLength; i++) {\r\n                leftVal = leftVal && leftVal[comparePath[i]];\r\n                rightVal = rightVal && rightVal[comparePath[i]];\r\n            }\r\n        }\r\n        if (leftVal === rightVal) return 0;\r\n        if (leftVal == null) return lessVal;\r\n        if (leftVal < rightVal) return lessVal;\r\n        return moreVal;\r\n    };\r\n}\r\n\r\n/**\r\n * @param {Boolean=false} silent\r\n * @returns {RowCollection} self\r\n */\r\nRowCollection.prototype.sort = function (silent) {\r\n    if (this.sortColumn.length) {\r\n        let comparators = [], i, comparator;\r\n\r\n        for (i = 0; i < this.sortColumn.length; i++) {\r\n            comparator = null;\r\n            if (this.onComparatorRequired) {\r\n                comparator = this.onComparatorRequired(this.sortColumn[i].column, this.sortColumn[i].descending);\r\n            }\r\n            if (!comparator) {\r\n                comparator = getDefaultComparator(this.sortColumn[i], this.sortColumn[i].descending);\r\n            }\r\n            comparators.push(comparator.bind(this));\r\n        }\r\n\r\n        if (comparators.length === 1) {\r\n            nativeSort.call(this, comparators[0]);\r\n        } else {\r\n            let len = comparators.length,\r\n                value;\r\n\r\n            comparator = function(leftRow, rightRow) {\r\n                for (i = 0; i < len; i++) {\r\n                    value = comparators[i](leftRow, rightRow);\r\n                    if (value !== 0) {\r\n                        return value;\r\n                    }\r\n                }\r\n                return value;\r\n            };\r\n\r\n            nativeSort.call(this, comparator);\r\n        }\r\n\r\n        if (!silent) {\r\n            if (this.onSort) {\r\n                this.onSort();\r\n            }\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\nexport default RowCollection;","'use strict';\r\n\r\n// Define class RowCollection\r\nfunction ColumnCollection () {\r\n\r\n    // Instantiate an Array. Seems like the `.length = ` of an inherited Array does not work well.\r\n    // I will not use the IFRAME solution either in fear of memory leaks, and we're supporting large datasets...\r\n    let collection = [];\r\n\r\n    // Synthetically set the 'prototype'\r\n    Object.assign(collection, ColumnCollection.prototype);\r\n\r\n    // Call initializer\r\n    collection.initialize.apply(collection, arguments);\r\n\r\n    return collection;\r\n}\r\n\r\n// Inherit Array\r\nColumnCollection.prototype = [];\r\n\r\nColumnCollection.prototype.initialize = function () {\r\n\r\n};\r\n\r\n/**\r\n * Get the column by this name\r\n * @param {String} column column name\r\n * @returns {Object} the column object\r\n */\r\nColumnCollection.prototype.get = function (column) {\r\n    for (let i = 0, len = this.length; i < len; i++) {\r\n        if (this[i].name == column) {\r\n            return this[i];\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Get the index of the column by this name\r\n * @param {String} column column name\r\n * @returns {int} the index of this column\r\n */\r\nColumnCollection.prototype.indexOf = function (column) {\r\n    for (let i = 0, len = this.length; i < len; i++) {\r\n        if (this[i].name == column) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n};\r\n\r\n/**\r\n * Get the column by the specified order\r\n * @param {Number} order the column's order\r\n * @returns {Object} the column object\r\n */\r\nColumnCollection.prototype.getByOrder = function (order) {\r\n    for (let i = 0, len = this.length; i < len; i++) {\r\n        if (this[i].order == order) {\r\n            return this[i];\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Normalize order\r\n * @returns {ColumnCollection} self\r\n */\r\nColumnCollection.prototype.normalizeOrder = function () {\r\n    let ordered = [], i;\r\n    for (i = 0; i < this.length; i++) {\r\n        ordered.push(this[i]);\r\n    }\r\n    ordered.sort(function(col1, col2){ return col1.order < col2.order ? -1 : (col1.order > col2.order ? 1 : 0); });\r\n    for (i = 0; i < ordered.length; i++) {\r\n        ordered[i].order = i;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Get the array of visible columns, order by the order property\r\n * @returns {Array<Object>} ordered array of visible columns\r\n */\r\nColumnCollection.prototype.getVisibleColumns = function () {\r\n    let visible = [];\r\n    for (let i = 0, column; i < this.length; i++) {\r\n        column = this[i];\r\n        if (column.visible) {\r\n            visible.push(column);\r\n        }\r\n    }\r\n    visible.sort((col1, col2) => col1.order < col2.order ? -1 : (col1.order > col2.order ? 1 : 0));\r\n    return visible;\r\n};\r\n\r\n/**\r\n * @returns {int} maximum order currently in the array\r\n */\r\nColumnCollection.prototype.getMaxOrder = function () {\r\n    let order = 0;\r\n    for (let i = 0, column; i < this.length; i++) {\r\n        column = this[i];\r\n        if (column.order > order) {\r\n            order = column.order;\r\n        }\r\n    }\r\n    return order;\r\n};\r\n\r\n/**\r\n * Move a column to a new spot in the collection\r\n * @param {Object} src the column to move\r\n * @param {Object} dest the destination column\r\n * @returns {ColumnCollection} self\r\n */\r\nColumnCollection.prototype.moveColumn = function (src, dest) {\r\n    if (src && dest) {\r\n        let srcOrder = src.order, destOrder = dest.order, i, col;\r\n        if (srcOrder < destOrder) {\r\n            for (i = srcOrder + 1; i <= destOrder; i++) {\r\n                col = this.getByOrder(i);\r\n                col.order--;\r\n            }\r\n        } else {\r\n            for (i = srcOrder - 1; i >= destOrder; i--) {\r\n                col = this.getByOrder(i);\r\n                col.order++;\r\n            }\r\n        }\r\n        src.order = destOrder;\r\n    }\r\n    return this;\r\n};\r\n\r\nexport default ColumnCollection;","/* eslint-env browser */\r\n\r\n'use strict';\r\n\r\nimport jQuery from 'jquery';\r\n\r\nconst $ = jQuery;\r\n\r\nconst hasComputedStyle = document.defaultView && document.defaultView.getComputedStyle;\r\n\r\nconst jQuerySupportsFractions = $ && $.fn.jquery >= '3';\r\n\r\nconst cssExpands = {\r\n    'width': [\r\n        'Left',\r\n        'Right',\r\n        'Width',\r\n    ],\r\n    'height': [\r\n        'Top',\r\n        'Bottom',\r\n        'Height',\r\n    ],\r\n};\r\n\r\nconst sizeKeys = ['width', 'height'];\r\n\r\nconst CssUtil = {};\r\n\r\nlet generateSizeFunction = function (key, cssExpand, inner, outer) {\r\n\r\n    return function () {\r\n        let el = arguments[0];\r\n        let value = arguments[1];\r\n\r\n        if (el && !(el instanceof Element) && 'length' in el) {\r\n            el = el[0];\r\n        }\r\n\r\n        if (!el) {\r\n            return null;\r\n        }\r\n\r\n        let style = hasComputedStyle ? document.defaultView.getComputedStyle(el) : el.currentStyle;\r\n        let isBoxing = style['boxSizing'] === 'border-box';\r\n        let size, border, padding;\r\n        let includeMargins = outer && arguments[2] === true || arguments[1] === true;\r\n\r\n        if (isBoxing || outer || inner) {\r\n            border = parseFloat(style['border' + cssExpand[0] + 'Width'] || 0)\r\n                + parseFloat(style['border' + cssExpand[1] + 'Width'] || 0);\r\n\r\n            padding = parseFloat(style['padding' + cssExpand[0]] || 0)\r\n                + parseFloat(style['padding' + cssExpand[1]] || 0);\r\n        }\r\n\r\n        let margin = includeMargins ?\r\n            (parseFloat(style['margin' + cssExpand[0]] || 0)\r\n            + parseFloat(style['margin' + cssExpand[1]] || 0)) : 0;\r\n\r\n        if (value == undefined) {\r\n            size = parseFloat(style[key]);\r\n\r\n            if (isBoxing) {\r\n\r\n                if (padding + border > size) {\r\n                    size = padding + border;\r\n                }\r\n\r\n                if (outer) {\r\n                    if (includeMargins) {\r\n                        size += margin;\r\n                    }\r\n                }\r\n                else if (inner) {\r\n                    size -= border;\r\n                }\r\n                else {\r\n                    size -= padding + border;\r\n                }\r\n\r\n            } else {\r\n\r\n                if (outer) {\r\n                    size += padding + border;\r\n\r\n                    if (includeMargins) {\r\n                        size += margin;\r\n                    }\r\n                }\r\n                else if (inner) {\r\n                    size += padding;\r\n                }\r\n\r\n            }\r\n\r\n            return size;\r\n        } else {\r\n            value = value || 0;\r\n            size = value;\r\n\r\n            if (isBoxing) {\r\n\r\n                if (outer) {\r\n                    if (includeMargins) {\r\n                        size -= margin;\r\n                    }\r\n                }\r\n                else if (inner) {\r\n                    size += border;\r\n                }\r\n                else {\r\n                    size += padding + border;\r\n                }\r\n\r\n            } else {\r\n\r\n                if (outer) {\r\n                    size -= padding + border;\r\n\r\n                    if (includeMargins) {\r\n                        size -= margin;\r\n                    }\r\n                }\r\n                else if (inner) {\r\n                    size -= padding;\r\n                }\r\n\r\n                if (size < 0) {\r\n                    size = 0;\r\n                }\r\n            }\r\n\r\n            el.style[key] = size + 'px';\r\n\r\n            return value;\r\n        }\r\n    };\r\n};\r\n\r\nlet generatejQueryFunction = function (key) {\r\n    return function () {\r\n        let collection = arguments[0];\r\n        if (!$.isArray(collection) && !(collection instanceof $)) {\r\n            collection = [collection];\r\n        }\r\n        \r\n        let ret = $.fn[key].apply(collection, Array.prototype.slice.call(arguments, 1));\r\n        \r\n        if (arguments.length > 1) {\r\n            return this;\r\n        }\r\n        \r\n        return ret;\r\n    };\r\n};\r\n\r\nfor (let i = 0; i < sizeKeys.length; i++) {\r\n    let key = sizeKeys[i];\r\n    let cssExpand = cssExpands[key];\r\n\r\n    if (jQuerySupportsFractions) {\r\n\r\n        CssUtil[key] = generatejQueryFunction(key);\r\n        CssUtil['inner' + cssExpand[2]] = generatejQueryFunction('inner' + cssExpand[2]);\r\n        CssUtil['outer' + cssExpand[2]] = generatejQueryFunction('outer' + cssExpand[2]);\r\n\r\n    } else {\r\n\r\n        CssUtil[key] = generateSizeFunction(key, cssExpand, false, false);\r\n        CssUtil['inner' + cssExpand[2]] = generateSizeFunction(key, cssExpand, true, false);\r\n        CssUtil['outer' + cssExpand[2]] = generateSizeFunction(key, cssExpand, false, true);\r\n\r\n    }\r\n}\r\n\r\n// Remove that huge function from memory\r\ngenerateSizeFunction = null;\r\n\r\nexport default CssUtil;","/* eslint-env browser */\r\n\r\n'use strict';\r\n\r\n// saveSelection/restoreSelection courtesy of Tim Down, with my improvements\r\n// https://stackoverflow.com/questions/13949059/persisting-the-changes-of-range-objects-after-selection-in-html/13950376#13950376\r\n\r\nfunction isChildOf(child, parent) {\r\n  while ((child = child.parentNode) && child !== parent); \r\n  return !!child; \r\n}\r\n\r\nclass SelectionHelper {\r\n    \r\n    static saveSelection(el) {\r\n        let range = window.getSelection().getRangeAt(0);\r\n        \r\n        if (el !== range.commonAncestorContainer && !isChildOf(range.commonAncestorContainer, el))\r\n            return null;\r\n        \r\n        let preSelectionRange = range.cloneRange();\r\n        preSelectionRange.selectNodeContents(el);\r\n        preSelectionRange.setEnd(range.startContainer, range.startOffset);\r\n        let start = preSelectionRange.toString().length;\r\n\r\n        return {\r\n            start: start,\r\n            end: start + range.toString().length,\r\n        };\r\n    }\r\n    \r\n    static restoreSelection(el, savedSel) {\r\n        let charIndex = 0;\r\n        let nodeStack = [el], node, foundStart = false, stop = false;\r\n        let range = document.createRange();\r\n        range.setStart(el, 0);\r\n        range.collapse(true);\r\n        \r\n        while (!stop && (node = nodeStack.pop())) {\r\n            if (node.nodeType == 3) {\r\n                let nextCharIndex = charIndex + node.length;\r\n                if (!foundStart && savedSel.start >= charIndex && savedSel.start <= nextCharIndex) {\r\n                    range.setStart(node, savedSel.start - charIndex);\r\n                    foundStart = true;\r\n                }\r\n                if (foundStart && savedSel.end >= charIndex && savedSel.end <= nextCharIndex) {\r\n                    range.setEnd(node, savedSel.end - charIndex);\r\n                    stop = true;\r\n                }\r\n                charIndex = nextCharIndex;\r\n            } else {\r\n                let i = node.childNodes.length;\r\n                while (i--) {\r\n                    nodeStack.push(node.childNodes[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        let sel = window.getSelection();\r\n        sel.removeAllRanges();\r\n        sel.addRange(range);\r\n    }\r\n}\r\n\r\nexport default SelectionHelper;\r\n","'use strict';\r\n\r\nfunction ByColumnFilter (row, args) {\r\n    \r\n    let column = args.column;\r\n    let keyword = args.keyword == null ? '' : args.keyword.toString();\r\n    \r\n    if (!keyword || !column) return true;\r\n\r\n    let actualVal = row[column];\r\n    if (actualVal == null) {\r\n        return false;\r\n    }\r\n    \r\n    actualVal = actualVal.toString();\r\n    \r\n    if (!args.caseSensitive) {\r\n        actualVal = actualVal.toLowerCase();\r\n        keyword = keyword.toLowerCase();\r\n    }\r\n    \r\n    return actualVal.indexOf(keyword) !== -1;\r\n}\r\n\r\nexport default ByColumnFilter;","/* eslint-env browser */\r\n\r\n'use strict';\r\n\r\nimport jQuery from 'jquery';\r\nimport { includes, find, htmlEncode } from './util';\r\nimport RowCollection from './row_collection';\r\nimport ColumnCollection from './column_collection';\r\nimport CssUtil from './css_util';\r\nimport SelectionHelper from './selection_helper';\r\nimport ByColumnFilter from './by_column_filter';\r\n\r\nconst nativeIndexOf = Array.prototype.indexOf;\r\nconst $ = jQuery;\r\n\r\nlet userAgent = navigator.userAgent;\r\nlet ieVersion = userAgent.indexOf('MSIE ') != -1 ? parseFloat(userAgent.substr(userAgent.indexOf('MSIE ') + 5)) : null;\r\nlet hasIeDragAndDropBug = ieVersion && ieVersion < 10;\r\nlet createElement = document.createElement.bind(document);\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\nfunction webkitRenderBugfix(el) {\r\n    // BUGFIX: WebKit has a bug where it does not relayout, and this affects us because scrollbars \r\n    //   are still calculated even though they are not there yet. This is the last resort.\r\n    let oldDisplay = el.style.display;\r\n    el.style.display = 'none';\r\n    //noinspection BadExpressionStatementJS\r\n    el.offsetHeight; // No need to store this anywhere, the reference is enough\r\n    el.style.display = oldDisplay;\r\n    return el;\r\n}\r\n\r\nfunction relativizeElement($el) {\r\n    if (!includes(['relative', 'absolute', 'fixed'], $el.css('position'))) {\r\n        $el.css('position', 'relative');\r\n    }\r\n}\r\n\r\n/** @class DGTable */\r\nlet DGTable = function DGTable () {\r\n    if (!(this instanceof DGTable)) {\r\n        // Allow constructing without `new`\r\n        return new (Function.prototype.bind.apply(\r\n            DGTable,\r\n            [DGTable].concat(Array.prototype.slice.call(arguments, 0))));\r\n    }\r\n\r\n    this.initialize.apply(this, arguments);\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @type {string}\r\n */\r\nDGTable.VERSION = '@@VERSION';\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @type {string}\r\n */\r\nDGTable.prototype.VERSION = DGTable.VERSION;\r\n\r\n/**\r\n * @constructs\r\n * @param {DGTable.Options?} options - initialization options\r\n * @returns {DGTable}\r\n */\r\nDGTable.prototype.initialize = function (options) {\r\n    let that = this;\r\n\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {DGTable.Options}\r\n     * */\r\n    let o = that.o = {};\r\n\r\n    /**\r\n     * @private\r\n     * This is for encapsulating private data */\r\n    let p = that.p = {};\r\n\r\n    /** This is for encapsulating event callback */\r\n    p.events = {};\r\n\r\n    /**\r\n     * @public\r\n     * @expose\r\n     * */\r\n    that.el = (options.el && options.el instanceof Element) ? options.el : document.createElement('div');\r\n\r\n    /**\r\n     * @public\r\n     * @expose\r\n     * */\r\n    let $el = that.$el = $(that.el);\r\n    \r\n    if (that.el !== options.el) {\r\n        $el.addClass(options.className || 'dgtable-wrapper');\r\n    }\r\n\r\n    // Set control data\r\n    $el\r\n        .data('control', that)\r\n        .data('dgtable', that);\r\n\r\n    // For jQuery.UI or jquery.removeevent\r\n    $el.on('remove', function () {\r\n        that.destroy();\r\n    });\r\n\r\n    p.onMouseMoveResizeAreaBound = this._onMouseMoveResizeArea.bind(this);\r\n    p.onEndDragColumnHeaderBound = this._onEndDragColumnHeader.bind(this);\r\n    p.onTableScrolledHorizontallyBound = this._onTableScrolledHorizontally.bind(this);\r\n\r\n    this.$el.on('dragend', p.onEndDragColumnHeaderBound);\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} _tableSkeletonNeedsRendering */\r\n    p.tableSkeletonNeedsRendering = true;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} virtualTable */\r\n    o.virtualTable = options.virtualTable === undefined ? true : !!options.virtualTable;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Number} rowsBufferSize */\r\n    o.rowsBufferSize = options.rowsBufferSize || 3;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Number} minColumnWidth */\r\n    o.minColumnWidth = Math.max(options.minColumnWidth || 35, 0);\r\n\r\n    /**\r\n     * @private\r\n     * @field {Number} resizeAreaWidth */\r\n    o.resizeAreaWidth = options.resizeAreaWidth || 8;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} resizableColumns */\r\n    o.resizableColumns = options.resizableColumns === undefined ? true : !!options.resizableColumns;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} movableColumns */\r\n    o.movableColumns = options.movableColumns === undefined ? true : !!options.movableColumns;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Number} sortableColumns */\r\n    o.sortableColumns = options.sortableColumns === undefined ? 1 : (parseInt(options.sortableColumns, 10) || 1);\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} adjustColumnWidthForSortArrow */\r\n    o.adjustColumnWidthForSortArrow = options.adjustColumnWidthForSortArrow === undefined ? true : !!options.adjustColumnWidthForSortArrow;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} convertColumnWidthsToRelative */\r\n    o.convertColumnWidthsToRelative = options.convertColumnWidthsToRelative === undefined ? false : !!options.convertColumnWidthsToRelative;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} autoFillTableWidth */\r\n    o.autoFillTableWidth = options.autoFillTableWidth === undefined ? false : !!options.autoFillTableWidth;\r\n\r\n    /**\r\n     * @private\r\n     * @field {String} cellClasses */\r\n    o.cellClasses = options.cellClasses === undefined ? '' : options.cellClasses;\r\n\r\n    /**\r\n     * @private\r\n     * @field {String} resizerClassName */\r\n    o.resizerClassName = options.resizerClassName === undefined ? 'dgtable-resize' : options.resizerClassName;\r\n\r\n    /**\r\n     * @private\r\n     * @field {String} tableClassName */\r\n    o.tableClassName = options.tableClassName === undefined ? 'dgtable' : options.tableClassName;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} allowCellPreview */\r\n    o.allowCellPreview = options.allowCellPreview === undefined ? true : options.allowCellPreview;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} allowHeaderCellPreview */\r\n    o.allowHeaderCellPreview = options.allowHeaderCellPreview === undefined ? true : options.allowHeaderCellPreview;\r\n\r\n    /**\r\n     * @private\r\n     * @field {String} cellPreviewClassName */\r\n    o.cellPreviewClassName = options.cellPreviewClassName === undefined ? 'dgtable-cell-preview' : options.cellPreviewClassName;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} cellPreviewAutoBackground */\r\n    o.cellPreviewAutoBackground = options.cellPreviewAutoBackground === undefined ? true : options.cellPreviewAutoBackground;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Function(String,Boolean)Function(a,b)Boolean} onComparatorRequired */\r\n    o.onComparatorRequired = options.onComparatorRequired === undefined ? null : options.onComparatorRequired;\r\n    if (!o.onComparatorRequired && typeof options['comparatorCallback'] === 'function') {\r\n        o.onComparatorRequired = options['comparatorCallback'];\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} width */\r\n    o.width = options.width === undefined ? DGTable.Width.NONE : options.width;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} relativeWidthGrowsToFillWidth */\r\n    o.relativeWidthGrowsToFillWidth = options.relativeWidthGrowsToFillWidth === undefined ? true : !!options.relativeWidthGrowsToFillWidth;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} relativeWidthShrinksToFillWidth */\r\n    o.relativeWidthShrinksToFillWidth = options.relativeWidthShrinksToFillWidth === undefined ? false : !!options.relativeWidthShrinksToFillWidth;\r\n\r\n    this.setCellFormatter(options.cellFormatter);\r\n    this.setHeaderCellFormatter(options.headerCellFormatter);\r\n    this.setFilter(options.filter);\r\n\r\n    /** @private\r\n     * @field {Number} height */\r\n    o.height = options.height;\r\n\r\n    // Prepare columns\r\n    that.setColumns(options.columns || [], false);\r\n\r\n    // Set sorting columns\r\n    let sortColumns = [];\r\n\r\n    if (options.sortColumn) {\r\n\r\n        let tmpSortColumns = options.sortColumn;\r\n\r\n        if (tmpSortColumns && typeof tmpSortColumns !== 'object') {\r\n            tmpSortColumns = [tmpSortColumns];\r\n        }\r\n\r\n        if (tmpSortColumns instanceof Array ||\r\n            typeof tmpSortColumns === 'object') {\r\n\r\n            for (let i = 0, len = tmpSortColumns.length; i < len; i++) {\r\n                let sortColumn = tmpSortColumns[i];\r\n                if (typeof sortColumn === 'string') {\r\n                    sortColumn = { column: sortColumn, descending: false };\r\n                }\r\n                let col = p.columns.get(sortColumn.column);\r\n                sortColumns.push({\r\n                    column: sortColumn.column,\r\n                    comparePath: col.comparePath || col.dataPath,\r\n                    descending: sortColumn.descending,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @field {RowCollection} _rows */\r\n    p.rows = new RowCollection({ sortColumn: sortColumns });\r\n    p.rows.onComparatorRequired = function(column, descending){\r\n        if (o.onComparatorRequired) {\r\n            return o.onComparatorRequired(column, descending);\r\n        }\r\n    };\r\n\r\n    /** @private\r\n     * @field {RowCollection} _filteredRows */\r\n    p.filteredRows = null;\r\n\r\n    /*\r\n     Setup hover mechanism.\r\n     We need this to be high performance, as there may be MANY cells to call this on, on creation and destruction.\r\n     Using native events to spare the overhead of jQuery's event binding, and even just the creation of the jQuery collection object.\r\n     */\r\n\r\n    /**\r\n     * @param {MouseEvent} evt\r\n     * @this {HTMLElement}\r\n     * */\r\n    let hoverMouseOverHandler = function (evt) {\r\n        evt = evt || event;\r\n        let relatedTarget = evt.fromElement || evt.relatedTarget;\r\n        if (relatedTarget == this || $.contains(this, relatedTarget)) return;\r\n        if (this['__previewCell'] && (relatedTarget == this['__previewCell'] || $.contains(this['__previewCell'], relatedTarget))) return;\r\n        that._cellMouseOverEvent.call(that, this);\r\n    };\r\n\r\n    /**\r\n     * @param {MouseEvent} evt\r\n     * @this {HTMLElement}\r\n     * */\r\n    let hoverMouseOutHandler = function (evt) {\r\n        evt = evt || event;\r\n        let relatedTarget = evt.toElement || evt.relatedTarget;\r\n        if (relatedTarget == this || $.contains(this, relatedTarget)) return;\r\n        if (this['__previewCell'] && (relatedTarget == this['__previewCell'] || $.contains(this['__previewCell'], relatedTarget))) return;\r\n        that._cellMouseOutEvent.call(that, this);\r\n    };\r\n\r\n    if ('addEventListener' in window) {\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * */\r\n        p._bindCellHoverIn = function (el) {\r\n            if (!el['__hoverIn']) {\r\n                el.addEventListener('mouseover', el['__hoverIn'] = hoverMouseOverHandler.bind(el));\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * */\r\n        p._unbindCellHoverIn = function (el) {\r\n            if (el['__hoverIn']) {\r\n                el.removeEventListener('mouseover', el['__hoverIn']);\r\n                el['__hoverIn'] = null;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * @returns {DGTable} self\r\n         * */\r\n        p._bindCellHoverOut = function (el) {\r\n            if (!el['__hoverOut']) {\r\n                el.addEventListener('mouseout', el['__hoverOut'] = hoverMouseOutHandler.bind(el['__cell'] || el));\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * @returns {DGTable} self\r\n         * */\r\n        p._unbindCellHoverOut = function (el) {\r\n            if (el['__hoverOut']) {\r\n                el.removeEventListener('mouseout', el['__hoverOut']);\r\n                el['__hoverOut'] = null;\r\n            }\r\n            return this;\r\n        };\r\n\r\n    } else {\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * */\r\n        p._bindCellHoverIn = function (el) {\r\n            if (!el['__hoverIn']) {\r\n                el.attachEvent('mouseover', el['__hoverIn'] = hoverMouseOverHandler.bind(el));\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * */\r\n        p._unbindCellHoverIn = function (el) {\r\n            if (el['__hoverIn']) {\r\n                el.detachEvent('mouseover', el['__hoverIn']);\r\n                el['__hoverIn'] = null;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * */\r\n        p._bindCellHoverOut = function (el) {\r\n            if (!el['__hoverOut']) {\r\n                el.attachEvent('mouseout', el['__hoverOut'] = hoverMouseOutHandler.bind(el['__cell'] || el));\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * @returns {DGTable} self\r\n         * */\r\n        p._unbindCellHoverOut = function (el) {\r\n            if (el['__hoverOut']) {\r\n                el.detachEvent('mouseout', el['__hoverOut']);\r\n                el['__hoverOut'] = null;\r\n            }\r\n            return this;\r\n        };\r\n\r\n    }\r\n};\r\n\r\n/**\r\n * Add an event listener\r\n * @public\r\n * @expose\r\n * @param {String} eventName\r\n * @param {Function} callback\r\n * @returns {DGTable}\r\n */\r\nDGTable.prototype.on = function (eventName, callback) {\r\n    let that = this, events = that.p.events;\r\n\r\n    if (typeof callback !== 'function')\r\n        return that;\r\n\r\n    if (!hasOwnProperty.call(events, eventName))\r\n        events[eventName] = [];\r\n\r\n    events[eventName].push({\r\n        cb: callback,\r\n        once: false,\r\n    });\r\n\r\n    return that;\r\n};\r\n\r\n/**\r\n * Add an event listener for a one shot\r\n * @public\r\n * @expose\r\n * @param {String} eventName\r\n * @param {Function} callback\r\n * @returns {DGTable}\r\n */\r\nDGTable.prototype.once = function (eventName, callback) {\r\n    let that = this, events = that.p.events;\r\n\r\n    if (typeof callback !== 'function')\r\n        return that;\r\n\r\n    if (!hasOwnProperty.call(events, eventName))\r\n        events[eventName] = [];\r\n\r\n    events[eventName].push({\r\n        cb: callback,\r\n        once: true,\r\n    });\r\n\r\n    return that;\r\n};\r\n\r\n/**\r\n * Remove an event listener\r\n * @public\r\n * @expose\r\n * @param {String} eventName\r\n * @param {Function} callback\r\n * @returns {DGTable}\r\n */\r\nDGTable.prototype.off = function (eventName, callback) {\r\n    let events = this.p.events;\r\n\r\n    if (!hasOwnProperty.call(events, eventName))\r\n        return this;\r\n\r\n    let callbacks = events[eventName];\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        let item = callbacks[i];\r\n        if (callback && item.cb !== callback) continue;\r\n        callbacks.splice(i--, 1);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nDGTable.prototype.trigger = function (eventName) {\r\n    let events = this.p.events;\r\n\r\n    if (hasOwnProperty.call(events, eventName)) {\r\n        let callbacks = events[eventName];\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            let item = callbacks[i];\r\n            if (item.once) {\r\n                callbacks.splice(i--, 1);\r\n            }\r\n            item.cb.apply(this, Array.prototype.slice.call(arguments, 1));\r\n        }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Detect column width mode\r\n * @private\r\n * @param {Number|String} width\r\n * @param {Number} minWidth\r\n * @returns {Object} parsed width\r\n */\r\nDGTable.prototype._parseColumnWidth = function (width, minWidth) {\r\n\r\n    let widthSize = Math.max(0, parseFloat(width)),\r\n        widthMode = ColumnWidthMode.AUTO; // Default\r\n\r\n    if (widthSize > 0) {\r\n        // Well, it's sure is not AUTO, as we have a value\r\n\r\n        if (width == widthSize + '%') {\r\n            // It's a percentage!\r\n\r\n            widthMode = ColumnWidthMode.RELATIVE;\r\n            widthSize /= 100;\r\n        } else if (widthSize > 0 && widthSize < 1) {\r\n            // It's a decimal value, as a relative value!\r\n\r\n            widthMode = ColumnWidthMode.RELATIVE;\r\n        } else {\r\n            // It's an absolute size!\r\n\r\n            if (widthSize < minWidth) {\r\n                widthSize = minWidth;\r\n            }\r\n            widthMode = ColumnWidthMode.ABSOLUTE;\r\n        }\r\n    }\r\n\r\n    return { width: widthSize, mode: widthMode };\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {COLUMN_OPTIONS} columnData\r\n */\r\nDGTable.prototype._initColumnFromData = function(columnData) {\r\n\r\n    let parsedWidth = this._parseColumnWidth(columnData.width, columnData.ignoreMin ? 0 : this.o.minColumnWidth);\r\n\r\n    let col = {\r\n        name: columnData.name,\r\n        label: columnData.label === undefined ? columnData.name : columnData.label,\r\n        width: parsedWidth.width,\r\n        widthMode: parsedWidth.mode,\r\n        resizable: columnData.resizable === undefined ? true : columnData.resizable,\r\n        sortable: columnData.sortable === undefined ? true : columnData.sortable,\r\n        movable: columnData.movable === undefined ? true : columnData.movable,\r\n        visible: columnData.visible === undefined ? true : columnData.visible,\r\n        cellClasses: columnData.cellClasses === undefined ? this.o.cellClasses : columnData.cellClasses,\r\n        ignoreMin: columnData.ignoreMin === undefined ? false : !!columnData.ignoreMin,\r\n    };\r\n\r\n    col.dataPath = columnData.dataPath === undefined ? col.name : columnData.dataPath;\r\n    col.comparePath = columnData.comparePath === undefined ? col.dataPath : columnData.comparePath;\r\n\r\n    if (typeof col.dataPath === 'string') {\r\n        col.dataPath = col.dataPath.split('.');\r\n    }\r\n    if (typeof col.comparePath === 'string') {\r\n        col.comparePath = col.comparePath.split('.');\r\n    }\r\n\r\n    return col;\r\n};\r\n\r\n/**\r\n * Destroy, releasing all memory, events and DOM elements\r\n * @public\r\n * @expose\r\n */\r\nDGTable.prototype.close = DGTable.prototype.remove = DGTable.prototype.destroy = function () {\r\n\r\n    let that = this,\r\n        p = that.p || {},\r\n        $el = that.$el;\r\n\r\n    if (that.__removed) {\r\n        return that;\r\n    }\r\n\r\n    if (p.$resizer) {\r\n        p.$resizer.remove();\r\n        p.$resizer = null;\r\n    }\r\n\r\n    if (p.$tbody) {\r\n        let trs = p.$tbody[0].childNodes;\r\n        for (let i = 0, len = trs.length; i < len; i++) {\r\n            that.trigger('rowdestroy', trs[i]);\r\n        }\r\n    }\r\n\r\n    // Using quotes for __super__ because Google Closure Compiler has a bug...\r\n\r\n    this._destroyHeaderCells()._unbindCellEventsForTable();\r\n    if (p.$table) {\r\n        p.$table.empty();\r\n    }\r\n    if (p.$tbody) {\r\n        p.$tbody.empty();\r\n    }\r\n\r\n    if (p.workerListeners) {\r\n        for (let j = 0; j < p.workerListeners.length; j++) {\r\n            let worker = p.workerListeners[j];\r\n            worker.worker.removeEventListener('message', worker.listener, false);\r\n        }\r\n        p.workerListeners.length = 0;\r\n    }\r\n\r\n    p.rows.length = p.columns.length = 0;\r\n\r\n    if (p._deferredRender) {\r\n        clearTimeout(p._deferredRender);\r\n    }\r\n\r\n    // Cleanup\r\n    for (let prop in that) {\r\n        if (hasOwnProperty.call(that, prop)) {\r\n            that[prop] = null;\r\n        }\r\n    }\r\n\r\n    that.__removed = true;\r\n\r\n    if ($el) {\r\n        $el.remove();\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._unbindCellEventsForTable = function() {\r\n    const p = this.p;\r\n    \r\n    if (p.headerRow) {\r\n        for (let i = 0, rows = p.headerRow.childNodes, rowCount = rows.length; i < rowCount; i++) {\r\n            let rowToClean = rows[i];\r\n            for (let j = 0, cells = rowToClean.childNodes, cellCount = cells.length; j < cellCount; j++) {\r\n                p._unbindCellHoverIn(cells[j]);\r\n            }\r\n        }\r\n    }\r\n    \r\n    if (p.tbody) {\r\n        for (let i = 0, rows = p.tbody.childNodes, rowCount = rows.length; i < rowCount; i++) {\r\n            this._unbindCellEventsForRow(rows[i]);\r\n        }\r\n    }\r\n    \r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {HTMLElement} rowToClean\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._unbindCellEventsForRow = function(rowToClean) {\r\n    const p = this.p;\r\n    for (let i = 0, cells = rowToClean.childNodes, cellCount = cells.length; i < cellCount; i++) {\r\n        p._unbindCellHoverIn(cells[i]);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.render = function () {\r\n    const o = this.o, p = this.p;\r\n\r\n    if (!this.el.offsetParent) {\r\n        if (!p._deferredRender) {\r\n            p._deferredRender = setTimeout(() => {\r\n                p._deferredRender = null;\r\n                if (!this.__removed && this.el.offsetParent) {\r\n                    this.render();\r\n                }\r\n            });\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    let renderedRows, rowCount;\r\n\r\n    if (p.tableSkeletonNeedsRendering === true) {\r\n        p.tableSkeletonNeedsRendering = false;\r\n\r\n        if (o.width == DGTable.Width.AUTO) {\r\n            // We need to do this to return to the specified widths instead. The arrows added to the column widths...\r\n            this._clearSortArrows();\r\n        }\r\n\r\n        let lastScrollTop = p.table ? p.table.scrollTop : 0,\r\n            lastScrollLeft = p.table ? p.table.scrollLeft : 0;\r\n\r\n        this._renderSkeletonBase()\r\n            ._renderSkeletonBody()\r\n            .tableWidthChanged(true, false) // Take this chance to calculate required column widths\r\n            ._renderSkeletonHeaderCells();\r\n            \r\n        if (!o.virtualTable) {\r\n            let rows = p.filteredRows || p.rows;\r\n            rowCount = rows.length;\r\n            renderedRows = this.renderRows(0, rowCount - 1);\r\n            p.$tbody.html('').append(renderedRows);\r\n            this._updateLastCellWidthFromScrollbar(true);\r\n        } else {\r\n            this._updateLastCellWidthFromScrollbar(); // Detect vertical scrollbar height\r\n        }\r\n\r\n        p.table.scrollTop = lastScrollTop;\r\n        p.table.scrollLeft = lastScrollLeft;\r\n        p.header.scrollLeft = lastScrollLeft;\r\n\r\n        this._updateTableWidth(true);\r\n\r\n        // Show sort arrows\r\n        for (let i = 0; i < p.rows.sortColumn.length; i++) {\r\n            this._showSortArrow(p.rows.sortColumn[i].column, p.rows.sortColumn[i].descending);\r\n        }\r\n        if (o.adjustColumnWidthForSortArrow && p.rows.sortColumn.length) {\r\n            this.tableWidthChanged(true);\r\n        } else if (!o.virtualTable) {\r\n            this.tableWidthChanged();\r\n        }\r\n\r\n        this.trigger('renderskeleton');\r\n\r\n        if (o.virtualTable) {\r\n            p.$table.on('scroll', this._onVirtualTableScrolled.bind(this));\r\n            this.render();\r\n        }\r\n\r\n    } else if (o.virtualTable) {\r\n        rowCount = (p.filteredRows || p.rows).length;\r\n        let scrollTop = p.table.scrollTop;\r\n        let firstVisible = Math.floor((scrollTop - p.virtualRowHeightFirst) / p.virtualRowHeight) + 1 - o.rowsBufferSize;\r\n        let lastVisible = Math.ceil(((scrollTop - p.virtualRowHeightFirst + p.visibleHeight) / p.virtualRowHeight)) + o.rowsBufferSize;\r\n        if (firstVisible < 0) firstVisible = 0;\r\n        if (lastVisible >= rowCount) {\r\n            lastVisible = rowCount - 1;\r\n        }\r\n\r\n        let oldFirstVisible = -1, oldLastVisible = -1;\r\n        let tbodyChildNodes = p.tbody.childNodes;\r\n        if (tbodyChildNodes.length) {\r\n            oldFirstVisible = tbodyChildNodes[0]['rowIndex'];\r\n            oldLastVisible = tbodyChildNodes[tbodyChildNodes.length - 1]['rowIndex'];\r\n        }\r\n\r\n        let countToRemove;\r\n\r\n        if (oldFirstVisible !== -1 && oldFirstVisible < firstVisible) {\r\n            countToRemove = Math.min(oldLastVisible + 1, firstVisible) - oldFirstVisible;\r\n            for (let i = 0; i < countToRemove; i++) {\r\n                this.trigger('rowdestroy', tbodyChildNodes[0]);\r\n                this._unbindCellEventsForRow(tbodyChildNodes[0]);\r\n                p.tbody.removeChild(tbodyChildNodes[0]);\r\n            }\r\n            oldFirstVisible += countToRemove;\r\n            if (oldFirstVisible > oldLastVisible) {\r\n                oldFirstVisible = oldLastVisible = -1;\r\n            }\r\n        } else if (oldLastVisible !== -1 && oldLastVisible > lastVisible) {\r\n            countToRemove = oldLastVisible - Math.max(oldFirstVisible - 1, lastVisible);\r\n            for (let i = 0; i < countToRemove; i++) {\r\n                this.trigger('rowdestroy', tbodyChildNodes[tbodyChildNodes.length - 1]);\r\n                this._unbindCellEventsForRow(tbodyChildNodes[tbodyChildNodes.length - 1]);\r\n                p.tbody.removeChild(tbodyChildNodes[tbodyChildNodes.length - 1]);\r\n            }\r\n            if (oldLastVisible < oldFirstVisible) {\r\n                oldFirstVisible = oldLastVisible = -1;\r\n            }\r\n        }\r\n\r\n        if (firstVisible < oldFirstVisible) {\r\n            renderedRows = this.renderRows(firstVisible, Math.min(lastVisible, oldFirstVisible - 1));\r\n            p.$tbody.prepend(renderedRows);\r\n        }\r\n        if (lastVisible > oldLastVisible || oldLastVisible === -1) {\r\n            renderedRows = this.renderRows(oldLastVisible === -1 ? firstVisible : oldLastVisible + 1, lastVisible);\r\n            p.$tbody.append(renderedRows);\r\n        }\r\n    }\r\n    this.trigger('render');\r\n    return this;\r\n};\r\n\r\n/**\r\n * Forces a full render of the table\r\n * @public\r\n * @expose\r\n * @param {Boolean=true} render - Should render now?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.clearAndRender = function (render) {\r\n    let p = this.p;\r\n\r\n    p.tableSkeletonNeedsRendering = true;\r\n\r\n    if (render === undefined || render) {\r\n        this.render();\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Render rows\r\n * @private\r\n * @param {Number} first first row to render\r\n * @param {Number} last last row to render\r\n * @returns {DocumentFragment} fragment containing all rendered rows\r\n */\r\nDGTable.prototype.renderRows = function (first, last) {\r\n    const o = this.o, p = this.p;\r\n        \r\n    let tableClassName = o.tableClassName,\r\n        rowClassName = tableClassName + '-row',\r\n        cellClassName = tableClassName + '-cell',\r\n        rows = p.filteredRows || p.rows,\r\n        isDataFiltered = !!p.filteredRows,\r\n        allowCellPreview = o.allowCellPreview,\r\n        visibleColumns = p.visibleColumns,\r\n        isVirtual = o.virtualTable,\r\n        virtualRowHeightFirst = p.virtualRowHeightFirst,\r\n        virtualRowHeight = p.virtualRowHeight,\r\n        top,\r\n        physicalRowIndex;\r\n\r\n    let colCount = visibleColumns.length;\r\n    for (let colIndex = 0, column; colIndex < colCount; colIndex++) {\r\n        column = visibleColumns[colIndex];\r\n        column._finalWidth = (column.actualWidthConsideringScrollbarWidth || column.actualWidth);\r\n    }\r\n\r\n    let bodyFragment = document.createDocumentFragment();\r\n\r\n    let isRtl = this._isTableRtl(),\r\n        virtualRowXAttr = isRtl ? 'right' : 'left';\r\n\r\n    for (let i = first, rowCount = rows.length;\r\n         i < rowCount && i <= last;\r\n         i++) {\r\n\r\n        let rowData = rows[i];\r\n        physicalRowIndex = isDataFiltered ? rowData['__i'] : i;\r\n\r\n        let row = createElement('div');\r\n        row.className = rowClassName;\r\n        row['rowIndex'] = i;\r\n        row['physicalRowIndex'] = physicalRowIndex;\r\n\r\n        for (let colIndex = 0; colIndex < colCount; colIndex++) {\r\n            let column = visibleColumns[colIndex];\r\n            let cell = createElement('div');\r\n            cell['columnName'] = column.name;\r\n            cell.setAttribute('data-column', column.name);\r\n            cell.className = cellClassName;\r\n            cell.style.width = column._finalWidth + 'px';\r\n            if (column.cellClasses) cell.className += ' ' + column.cellClasses;\r\n            if (allowCellPreview) {\r\n                p._bindCellHoverIn(cell);\r\n            }\r\n            \r\n            let cellInner = cell.appendChild(createElement('div'));\r\n            cellInner.innerHTML = this._getHtmlForCell(rowData, column);\r\n            \r\n            row.appendChild(cell);\r\n        }\r\n\r\n        if (isVirtual) {\r\n            top = i > 0 ? virtualRowHeightFirst + (i - 1) * virtualRowHeight : 0;\r\n            row.style.position = 'absolute';\r\n            row.style[virtualRowXAttr] = 0;\r\n            row.style.top = top + 'px';\r\n        }\r\n\r\n        bodyFragment.appendChild(row);\r\n\r\n        this.trigger('rowcreate', i, physicalRowIndex, row, rowData);\r\n    }\r\n\r\n    return bodyFragment;\r\n};\r\n\r\n/**\r\n * Calculate virtual table height for scrollbar\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._calculateVirtualHeight = function () {\r\n    let p = this.p;\r\n\r\n    if (p.tbody) {\r\n        let rowCount = (p.filteredRows || p.rows).length;\r\n        let height = p.virtualRowHeight * rowCount;\r\n        if (rowCount) {\r\n            height += (p.virtualRowHeightFirst - p.virtualRowHeight);\r\n            height += (p.virtualRowHeightLast - p.virtualRowHeight);\r\n        }\r\n        // At least 1 pixel - to show scrollers correctly.\r\n        if (height < 1) {\r\n            height = 1;\r\n        }\r\n        p.tbody.style.height = height + 'px';\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculate the size required for the table body width (which is the row's width)\r\n * @private\r\n * @returns {Number} calculated width\r\n */\r\nDGTable.prototype._calculateTbodyWidth = function () {\r\n    const p = this.p;\r\n        \r\n    let tableClassName = this.o.tableClassName,\r\n        rowClassName = tableClassName + '-row',\r\n        cellClassName = tableClassName + '-cell',\r\n        visibleColumns = p.visibleColumns,\r\n        colCount = visibleColumns.length,\r\n        cell,\r\n        cellInner,\r\n        colIndex,\r\n        column;\r\n\r\n    let $row = $('<div>').addClass(rowClassName).css('float', 'left');\r\n    let sumActualWidth = 0;\r\n\r\n    for (colIndex = 0; colIndex < colCount; colIndex++) {\r\n        column = visibleColumns[colIndex];\r\n        cell = createElement('div');\r\n        cell.className = cellClassName;\r\n        cell.style.width = column.actualWidth + 'px';\r\n        if (column.cellClasses) cell.className += ' ' + column.cellClasses;\r\n        cellInner = cell.appendChild(createElement('div'));\r\n        $row.append(cell);\r\n        sumActualWidth += column.actualWidth;\r\n    }\r\n\r\n    let $thisWrapper = $('<div>')\r\n        .addClass(this.el.className)\r\n        .css({ 'z-index': -1, 'position': 'absolute', left: '0', top: '-9999px', 'float': 'left', width: '1px', overflow: 'hidden' })\r\n        .append(\r\n            $('<div>').addClass(tableClassName).append(\r\n                $('<div>').addClass(tableClassName + '-body').css('width', sumActualWidth + 10000).append(\r\n                    $row,\r\n                ),\r\n            ),\r\n        );\r\n\r\n    $thisWrapper.appendTo(document.body);\r\n\r\n    let fractionTest = $('<div style=\"border:1.5px solid #000;width:0;height:0;position:absolute;left:0;top:-9999px\">').appendTo(document.body);\r\n    let hasFractions = parseFloat(fractionTest.css('border-width'));\r\n    hasFractions = Math.round(hasFractions) != hasFractions;\r\n    fractionTest.remove();\r\n\r\n    let width = CssUtil.outerWidth($row);\r\n    width -= p.scrollbarWidth || 0;\r\n\r\n    if (hasFractions) {\r\n        width++;\r\n    }\r\n\r\n    $thisWrapper.remove();\r\n    return width;\r\n};\r\n\r\n/**\r\n * Sets the columns of the table\r\n * @public\r\n * @expose\r\n * @param {COLUMN_OPTIONS[]} columns - Column definitions array\r\n * @param {Boolean=true} render - Should render now?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setColumns = function (columns, render) {\r\n    const p = this.p;\r\n        \r\n    columns = columns || [];\r\n\r\n    let normalizedCols = new ColumnCollection();\r\n    for (let i = 0, order = 0; i < columns.length; i++) {\r\n\r\n        let columnData = columns[i];\r\n        let normalizedColumn = this._initColumnFromData(columnData);\r\n\r\n        if (columnData.order !== undefined) {\r\n            if (columnData.order > order) {\r\n                order = columnData.order + 1;\r\n            }\r\n            normalizedColumn.order = columnData.order;\r\n        } else {\r\n            normalizedColumn.order = order++;\r\n        }\r\n\r\n        normalizedCols.push(normalizedColumn);\r\n    }\r\n    normalizedCols.normalizeOrder();\r\n\r\n    p.columns = normalizedCols;\r\n    p.visibleColumns = normalizedCols.getVisibleColumns();\r\n    \r\n    this._ensureVisibleColumns().clearAndRender(render);\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Add a column to the table\r\n * @public\r\n * @expose\r\n * @param {COLUMN_OPTIONS} columnData column properties\r\n * @param {String|Number} [before=-1] column name or order to be inserted before\r\n * @param {Boolean=true} render - Should render now?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.addColumn = function (columnData, before, render) {\r\n    const p = this.p;\r\n    let columns = p.columns;\r\n\r\n    if (columnData && !columns.get(columnData.name)) {\r\n        let beforeColumn = null;\r\n        if (before !== undefined) {\r\n            beforeColumn = columns.get(before) || columns.getByOrder(before);\r\n        }\r\n\r\n        let column = this._initColumnFromData(columnData);\r\n        column.order = beforeColumn ? beforeColumn.order : (columns.getMaxOrder() + 1);\r\n\r\n        for (let i = columns.getMaxOrder(), to = column.order; i >= to ; i--) {\r\n            let col = columns.getByOrder(i);\r\n            if (col) {\r\n                col.order++;\r\n            }\r\n        }\r\n\r\n        columns.push(column);\r\n        columns.normalizeOrder();\r\n\r\n        p.visibleColumns = columns.getVisibleColumns();\r\n        this._ensureVisibleColumns().clearAndRender(render);\r\n\r\n        this.trigger('addcolumn', column.name);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Remove a column from the table\r\n * @public\r\n * @expose\r\n * @param {String} column column name\r\n * @param {Boolean=true} render - Should render now?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.removeColumn = function (column, render) {\r\n    const p = this.p;\r\n    let columns = p.columns;\r\n\r\n    let colIdx = columns.indexOf(column);\r\n    if (colIdx > -1) {\r\n        columns.splice(colIdx, 1);\r\n        columns.normalizeOrder();\r\n\r\n        p.visibleColumns = columns.getVisibleColumns();\r\n        this._ensureVisibleColumns().clearAndRender(render);\r\n\r\n        this.trigger('removecolumn', column);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets a new cell formatter.\r\n * @public\r\n * @expose\r\n * @param {function(value: *, columnName: String, row: Object):String|null} [formatter=null] - The cell formatter. Should return an HTML.\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setCellFormatter = function (formatter) {\r\n    /**\r\n     * @private\r\n     * @field {Function} cellFormatter */\r\n    this.o.cellFormatter = formatter || function (val) {\r\n        return (typeof val === 'string') ? htmlEncode(val) : val;\r\n    };\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets a new header cell formatter.\r\n * @public\r\n * @expose\r\n * @param {function(label: String, columnName: String):String|null} [formatter=null] - The cell formatter. Should return an HTML.\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setHeaderCellFormatter = function (formatter) {\r\n    /**\r\n     * @private\r\n     * @field {Function} headerCellFormatter */\r\n    this.o.headerCellFormatter = formatter || function (val) {\r\n        return (typeof val === 'string') ? htmlEncode(val) : val;\r\n    };\r\n        \r\n    return this;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @param {function(row:Object,args:Object):Boolean|null} [filterFunc=null] - The filter function to work with filters. Default is a by-colum filter.\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setFilter = function (filterFunc) {\r\n    /** @private\r\n     * @field {Function} filter */\r\n    this.o.filter = filterFunc;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @param {Object|null} args - Options to pass to the filter function\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.filter = function (args) {\r\n    const p = this.p;\r\n    \r\n    let filterFunc = this.o.filter || ByColumnFilter;\r\n    \r\n    // Deprecated use of older by-column filter\r\n    if (typeof arguments[0] === 'string' && typeof arguments[1] === 'string') {\r\n        args = {\r\n            column: arguments[0],\r\n            keyword: arguments[1],\r\n            caseSensitive: arguments[2],\r\n        };\r\n    }\r\n    \r\n    let hadFilter = !!p.filteredRows;\r\n    if (p.filteredRows) {\r\n        p.filteredRows = null; // Allow releasing array memory now\r\n    }\r\n\r\n    // Shallow-clone the args, as the filter function may want to modify it for keeping state\r\n    p.filterArgs = (typeof args === 'object' && !Array.isArray(args)) ? $.extend({}, args) : args;\r\n    p.filteredRows = p.rows.filteredCollection(filterFunc, args);\r\n\r\n    if (hadFilter || p.filteredRows) {\r\n        this.clearAndRender();\r\n        this.trigger('filter', args);\r\n    }\r\n    \r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._refilter = function() {\r\n    const p = this.p;\r\n\r\n    if (p.filteredRows && p.filterArgs) {\r\n        let filterFunc = this.o.filter || ByColumnFilter;\r\n        p.filteredRows = p.rows.filteredCollection(filterFunc, p.filterArgs);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Set a new label to a column\r\n * @public\r\n * @expose\r\n * @param {String} column Name of the column\r\n * @param {String} label New label for the column\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setColumnLabel = function (column, label) {\r\n    const p = this.p;\r\n\r\n    let col = p.columns.get(column);\r\n    if (col) {\r\n        col.label = label === undefined ? col.name : label;\r\n\r\n        if (col.element) {\r\n            for (let i = 0; i < col.element[0].firstChild.childNodes.length; i++) {\r\n                let node = col.element[0].firstChild.childNodes[i];\r\n                if (node.nodeType === 3) {\r\n                    node.textContent = col.label;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Move a column to a new position\r\n * @public\r\n * @expose\r\n * @param {String|Number} src Name or position of the column to be moved\r\n * @param {String|Number} dest Name of the column currently in the desired position, or the position itself\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.moveColumn = function (src, dest) {\r\n    const o = this.o, p = this.p;\r\n        \r\n    let columns = p.columns,\r\n        col, destCol;\r\n\r\n    if (typeof src === 'string') {\r\n        col = columns.get(src);\r\n    } else if (typeof src === 'number') {\r\n        col = p.visibleColumns[src];\r\n    }\r\n    if (typeof dest === 'string') {\r\n        destCol = columns.get(dest);\r\n    } else if (typeof dest === 'number') {\r\n        destCol = p.visibleColumns[dest];\r\n    }\r\n\r\n    if (col && destCol && src !== dest) {\r\n        let srcOrder = col.order, destOrder = destCol.order;\r\n\r\n        p.visibleColumns = columns.moveColumn(col, destCol).getVisibleColumns();\r\n        this._ensureVisibleColumns();\r\n\r\n        if (o.virtualTable) {\r\n            this.clearAndRender()\r\n                ._updateLastCellWidthFromScrollbar(true);\r\n        } else {\r\n            let headerCell = p.$headerRow.find('>div.' + o.tableClassName + '-header-cell');\r\n            let beforePos = srcOrder < destOrder ? destOrder + 1 : destOrder,\r\n                fromPos = srcOrder;\r\n            headerCell[0].parentNode.insertBefore(headerCell[fromPos], headerCell[beforePos]);\r\n\r\n            let srcWidth = p.visibleColumns[srcOrder];\r\n            srcWidth = (srcWidth.actualWidthConsideringScrollbarWidth || srcWidth.actualWidth) + 'px';\r\n            let destWidth = p.visibleColumns[destOrder];\r\n            destWidth = (destWidth.actualWidthConsideringScrollbarWidth || destWidth.actualWidth) + 'px';\r\n\r\n            let tbodyChildren = p.$tbody[0].childNodes;\r\n            for (let i = 0, count = tbodyChildren.length; i < count; i++) {\r\n                let row = tbodyChildren[i];\r\n                if (row.nodeType !== 1) continue;\r\n                row.insertBefore(row.childNodes[fromPos], row.childNodes[beforePos]);\r\n                row.childNodes[destOrder].firstChild.style.width = destWidth;\r\n                row.childNodes[srcOrder].firstChild.style.width = srcWidth;\r\n            }\r\n        }\r\n\r\n        this.trigger('movecolumn', col.name, srcOrder, destOrder);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sort the table\r\n * @public\r\n * @expose\r\n * @param {String?} column Name of the column to sort on (or null to remove sort arrow)\r\n * @param {Boolean=} descending Sort in descending order\r\n * @param {Boolean} [add=false] Should this sort be on top of the existing sort? (For multiple column sort)\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.sort = function (column, descending, add) {\r\n    const o = this.o, p = this.p;\r\n    \r\n    let columns = p.columns,\r\n        col = columns.get(column);\r\n\r\n    let currentSort = p.rows.sortColumn;\r\n        \r\n    if (col) {\r\n\r\n        if (currentSort.length && currentSort[currentSort.length - 1].column == column) {\r\n            // Recognize current descending mode, if currently sorting by this column\r\n            descending = descending === undefined ? !currentSort[currentSort.length - 1].descending : descending;\r\n        }\r\n\r\n        if (add) { // Add the sort to current sort stack\r\n\r\n            for (let i = 0; i < currentSort.length; i++) {\r\n                if (currentSort[i].column == col.name) {\r\n                    if (i < currentSort.length - 1) {\r\n                        currentSort.length = 0;\r\n                    } else {\r\n                        currentSort.splice(currentSort.length - 1, 1);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            if ((o.sortableColumns > 0 /* allow manual sort when disabled */ && currentSort.length >= o.sortableColumns) || currentSort.length >= p.visibleColumns.length) {\r\n                currentSort.length = 0;\r\n            }\r\n\r\n        } else { // Sort only by this column\r\n            currentSort.length = 0;\r\n        }\r\n\r\n        // Default to ascending\r\n        descending = descending === undefined ? false : descending;\r\n\r\n        // Set the required column in the front of the stack\r\n        currentSort.push({\r\n            column: col.name,\r\n            comparePath: col.comparePath || col.dataPath,\r\n            descending: !!descending,\r\n        });\r\n    } else {\r\n        currentSort.length = 0;\r\n    }\r\n\r\n    this._clearSortArrows();\r\n\r\n    for (let i = 0; i < currentSort.length; i++) {\r\n        this._showSortArrow(currentSort[i].column, currentSort[i].descending);\r\n    }\r\n\r\n    if (o.adjustColumnWidthForSortArrow && !o._tableSkeletonNeedsRendering) {\r\n        this.tableWidthChanged(true);\r\n    }\r\n\r\n    if (o.virtualTable) {\r\n        while (p.tbody && p.tbody.firstChild) {\r\n            this.trigger('rowdestroy', p.tbody.firstChild);\r\n            this._unbindCellEventsForRow(p.tbody.firstChild);\r\n            p.tbody.removeChild(p.tbody.firstChild);\r\n        }\r\n    } else {\r\n        p.tableSkeletonNeedsRendering = true;\r\n    }\r\n\r\n    p.rows.sortColumn = currentSort;\r\n    \r\n    if (currentSort.length) {\r\n        p.rows.sort(!!p.filteredRows);\r\n        if (p.filteredRows) {\r\n            p.filteredRows.sort(!!p.filteredRows);\r\n        }\r\n    }\r\n\r\n    // Build output for event, with option names that will survive compilers\r\n    let sorts = [];\r\n    for (let i = 0; i < currentSort.length; i++) {\r\n        sorts.push({ 'column': currentSort[i].column, 'descending': currentSort[i].descending });\r\n    }\r\n    this.trigger('sort', sorts);\r\n    \r\n    return this;\r\n};\r\n\r\n/**\r\n * Re-sort the table using current sort specifiers\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.resort = function () {\r\n    const p = this.p;\r\n    let columns = p.columns;\r\n\r\n    let currentSort = p.rows.sortColumn;\r\n    if (currentSort.length) {\r\n        \r\n        for (let i = 0; i < currentSort.length; i++) {\r\n            if (!columns.get(currentSort[i].column)) {\r\n                currentSort.splice(i--, 1);\r\n            }\r\n        }\r\n        \r\n        p.rows.sortColumn = currentSort;\r\n        if (currentSort.length) {\r\n            p.rows.sort(!!p.filteredRows);\r\n            if (p.filteredRows) {\r\n                p.filteredRows.sort(!!p.filteredRows);\r\n            }\r\n        }\r\n\r\n        // Build output for event, with option names that will survive compilers\r\n        let sorts = [];\r\n        for (let i = 0; i < currentSort.length; i++) {\r\n            sorts.push({ 'column': currentSort[i].column, 'descending': currentSort[i].descending });\r\n        }\r\n        this.trigger('sort', sorts);\r\n    }\r\n    \r\n    \r\n    return this;\r\n};\r\n\r\n/**\r\n * Make sure there's at least one column visible\r\n * @private\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._ensureVisibleColumns = function () {\r\n    const p = this.p;\r\n\r\n    if (p.visibleColumns.length === 0 && p.columns.length) {\r\n        p.columns[0].visible = true;\r\n        p.visibleColumns.push(p.columns[0]);\r\n        this.trigger('showcolumn', p.columns[0].name);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Show or hide a column\r\n * @public\r\n * @expose\r\n * @param {String} column Unique column name\r\n * @param {Boolean} visible New visibility mode for the column\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setColumnVisible = function (column, visible) {\r\n    const p = this.p;\r\n\r\n    let col = p.columns.get(column);\r\n\r\n    //noinspection PointlessBooleanExpressionJS\r\n    visible = !!visible;\r\n\r\n    if (col && !!col.visible != visible) {\r\n        col.visible = visible;\r\n        p.visibleColumns = p.columns.getVisibleColumns();\r\n        this.trigger(visible ? 'showcolumn' : 'hidecolumn', column);\r\n        this._ensureVisibleColumns();\r\n        this.clearAndRender();\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Get the visibility mode of a column\r\n * @public\r\n * @expose\r\n * @returns {Boolean} true if visible\r\n */\r\nDGTable.prototype.isColumnVisible = function (column) {\r\n    const p = this.p;\r\n    let col = p.columns.get(column);\r\n    if (col) {\r\n        return col.visible;\r\n    }\r\n    return false;\r\n};\r\n\r\n/**\r\n * Globally set the minimum column width\r\n * @public\r\n * @expose\r\n * @param {Number} minColumnWidth Minimum column width\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setMinColumnWidth = function (minColumnWidth) {\r\n    let o = this.o;\r\n    minColumnWidth = Math.max(minColumnWidth, 0);\r\n    if (o.minColumnWidth != minColumnWidth) {\r\n        o.minColumnWidth = minColumnWidth;\r\n        this.tableWidthChanged(true);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Get the current minimum column width\r\n * @public\r\n * @expose\r\n * @returns {Number} Minimum column width\r\n */\r\nDGTable.prototype.getMinColumnWidth = function () {\r\n    return this.o.minColumnWidth;\r\n};\r\n\r\n/**\r\n * Set the limit on concurrent columns sorted\r\n * @public\r\n * @expose\r\n * @param {Number} sortableColumns How many sortable columns to allow?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setSortableColumns = function (sortableColumns) {\r\n    const p = this.p, o = this.o;\r\n    if (o.sortableColumns != sortableColumns) {\r\n        o.sortableColumns = sortableColumns;\r\n        if (p.$table) {\r\n            let headerCell = p.$headerRow.find('>div.' + o.tableClassName + '-header-cell');\r\n            for (let i = 0; i < headerCell.length; i++) {\r\n                $(headerCell[0])[(o.sortableColumns > 0 && p.visibleColumns[i].sortable) ? 'addClass' : 'removeClass']('sortable');\r\n            }\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Get the limit on concurrent columns sorted\r\n * @public\r\n * @expose\r\n * @returns {Number} How many sortable columns are allowed?\r\n */\r\nDGTable.prototype.getSortableColumns = function () {\r\n    return this.o.sortableColumns;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @param {Boolean?} movableColumns=true are the columns movable?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setMovableColumns = function (movableColumns) {\r\n    let o = this.o;\r\n    //noinspection PointlessBooleanExpressionJS\r\n    movableColumns = movableColumns === undefined ? true : !!movableColumns;\r\n    if (o.movableColumns != movableColumns) {\r\n        o.movableColumns = movableColumns;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @returns {Boolean} are the columns movable?\r\n */\r\nDGTable.prototype.getMovableColumns = function () {\r\n    return this.o.movableColumns;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @param {Boolean} resizableColumns=true are the columns resizable?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setResizableColumns = function (resizableColumns) {\r\n    let o = this.o;\r\n    //noinspection PointlessBooleanExpressionJS\r\n    resizableColumns = resizableColumns === undefined ? true : !!resizableColumns;\r\n    if (o.resizableColumns != resizableColumns) {\r\n        o.resizableColumns = resizableColumns;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @returns {Boolean} are the columns resizable?\r\n */\r\nDGTable.prototype.getResizableColumns = function () {\r\n    return this.o.resizableColumns;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @param {{function(string,boolean):{function(a:*,b:*):boolean}}} comparatorCallback a callback function that returns the comparator for a specific column\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setComparatorCallback = function (comparatorCallback) {\r\n    let o = this.o;\r\n    if (o.onComparatorRequired != comparatorCallback) {\r\n        o.onComparatorRequired = comparatorCallback;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Set a new width to a column\r\n * @public\r\n * @expose\r\n * @param {String} column name of the column to resize\r\n * @param {Number|String} width new column as pixels, or relative size (0.5, 50%)\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setColumnWidth = function (column, width) {\r\n\r\n    const p = this.p;\r\n\r\n    let col = p.columns.get(column);\r\n\r\n    let parsedWidth = this._parseColumnWidth(width, col.ignoreMin ? 0 : this.o.minColumnWidth);\r\n\r\n    if (col) {\r\n        let oldWidth = this._serializeColumnWidth(col);\r\n\r\n        col.width = parsedWidth.width;\r\n        col.widthMode = parsedWidth.mode;\r\n\r\n        let newWidth = this._serializeColumnWidth(col);\r\n\r\n        if (oldWidth != newWidth) {\r\n            this.tableWidthChanged(true); // Calculate actual sizes\r\n        }\r\n\r\n        this.trigger('columnwidth', col.name, oldWidth, newWidth);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @param {String} column name of the column\r\n * @returns {String|null} the serialized width of the specified column, or null if column not found\r\n */\r\nDGTable.prototype.getColumnWidth = function (column) {\r\n    const p = this.p;\r\n\r\n    let col = p.columns.get(column);\r\n    if (col) {\r\n        return this._serializeColumnWidth(col);\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @param {String} column name of the column\r\n * @returns {SERIALIZED_COLUMN|null} configuration for all columns\r\n */\r\nDGTable.prototype.getColumnConfig = function (column) {\r\n    const p = this.p;\r\n    let col = p.columns.get(column);\r\n    if (col) {\r\n        return {\r\n            'order': col.order,\r\n            'width': this._serializeColumnWidth(col),\r\n            'visible': col.visible,\r\n            'label': col.label,\r\n        };\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns a config object for the columns, to allow saving configurations for next time...\r\n * @public\r\n * @expose\r\n * @returns {Object} configuration for all columns\r\n */\r\nDGTable.prototype.getColumnsConfig = function () {\r\n    const p = this.p;\r\n\r\n    let config = {};\r\n    for (let i = 0; i < p.columns.length; i++) {\r\n        config[p.columns[i].name] = this.getColumnConfig(p.columns[i].name);\r\n    }\r\n    return config;\r\n};\r\n\r\n/**\r\n * Returns an array of the currently sorted columns\r\n * @public\r\n * @expose\r\n * @returns {Array.<SERIALIZED_COLUMN_SORT>} configuration for all columns\r\n */\r\nDGTable.prototype.getSortedColumns = function () {\r\n    const p = this.p;\r\n\r\n    let sorted = [];\r\n    for (let i = 0; i < p.rows.sortColumn.length; i++) {\r\n        let sort = p.rows.sortColumn[i];\r\n        sorted.push({ column: sort.column, descending: sort.descending });\r\n    }\r\n    return sorted;\r\n};\r\n\r\n/**\r\n * Returns the HTML string for a specific cell. Can be used externally for special cases (i.e. when setting a fresh HTML in the cell preview through the callback).\r\n * @public\r\n * @expose\r\n * @param {Number} row - index of the row\r\n * @param {String} columnName - name of the column\r\n * @returns {String} HTML string for the specified cell\r\n */\r\nDGTable.prototype.getHtmlForCell = function (row, columnName) {\r\n    const p = this.p;\r\n\r\n    if (row < 0 || row > p.rows.length - 1) return null;\r\n    let column = p.columns.get(columnName);\r\n    if (!column) return null;\r\n    let rowData = p.rows[row];\r\n\r\n    return this._getHtmlForCell(rowData, column);\r\n};\r\n\r\n/**\r\n * Returns the HTML string for a specific cell. Can be used externally for special cases (i.e. when setting a fresh HTML in the cell preview through the callback).\r\n * @public\r\n * @expose\r\n * @param {Object} rowData - row data\r\n * @param {Object} column - column data\r\n * @returns {String} HTML string for the specified cell\r\n */\r\nDGTable.prototype._getHtmlForCell = function (rowData, column) {\r\n    let dataPath = column.dataPath;\r\n    let colValue = rowData[dataPath[0]];\r\n    for (let dataPathIndex = 1; dataPathIndex < dataPath.length; dataPathIndex++) {\r\n        if (colValue == null) break;\r\n        colValue = colValue && colValue[dataPath[dataPathIndex]];\r\n    }\r\n\r\n    let content = this.o.cellFormatter(colValue, column.name, rowData);\r\n    if (content === undefined) {\r\n        content = '';\r\n    }\r\n    \r\n    return content;\r\n};\r\n\r\n/**\r\n * Returns the y pos of a row by index\r\n * @public\r\n * @expose\r\n * @param {Number} rowIndex - index of the row\r\n * @returns {Number|null} Y pos\r\n */\r\nDGTable.prototype.getRowYPos = function (rowIndex) {\r\n    const p = this.p;\r\n    \r\n    if (this.o.virtualTable) {\r\n        return rowIndex > 0 ? p.virtualRowHeightFirst + (rowIndex - 1) * p.virtualRowHeight : 0;\r\n    } else {\r\n        let row = p.tbody.childNodes[rowIndex];\r\n        return row ? row.offsetTop : null;\r\n    }\r\n};\r\n\r\n/**\r\n * Returns the row data for a specific row\r\n * @public\r\n * @expose\r\n * @param {Number} row index of the row\r\n * @returns {Object} Row data\r\n */\r\nDGTable.prototype.getDataForRow = function (row) {\r\n    const p = this.p;\r\n\r\n    if (row < 0 || row > p.rows.length - 1) return null;\r\n    return p.rows[row];\r\n};\r\n\r\n/**\r\n * Gets the number of rows\r\n * @public\r\n * @expose\r\n * @returns {Number} Row count\r\n */\r\nDGTable.prototype.getRowCount = function () {\r\n    const p = this.p;\r\n    return p.rows ? p.rows.length : 0;\r\n};\r\n\r\n/**\r\n * Returns the physical row index for specific row\r\n * @public\r\n * @expose\r\n * @param {Object} rowData - Row data to find\r\n * @returns {Number} Row index\r\n */\r\nDGTable.prototype.getIndexForRow = function (rowData) {\r\n    const p = this.p;\r\n    return p.rows.indexOf(rowData);\r\n};\r\n\r\n/**\r\n * Gets the number of filtered rows\r\n * @public\r\n * @expose\r\n * @returns {Number} Filtered row count\r\n */\r\nDGTable.prototype.getFilteredRowCount = function () {\r\n    const p = this.p;\r\n    return (p.filteredRows || p.rows).length;\r\n};\r\n\r\n/**\r\n * Returns the filtered row index for specific row\r\n * @public\r\n * @expose\r\n * @param {Object} rowData - Row data to find\r\n * @returns {Number} Row index\r\n */\r\nDGTable.prototype.getIndexForFilteredRow = function (rowData) {\r\n    const p = this.p;\r\n    return (p.filteredRows || p.rows).indexOf(rowData);\r\n};\r\n\r\n/**\r\n * Returns the row data for a specific row\r\n * @public\r\n * @expose\r\n * @param {Number} row index of the filtered row\r\n * @returns {Object} Row data\r\n */\r\nDGTable.prototype.getDataForFilteredRow = function (row) {\r\n    const p = this.p;\r\n    if (row < 0 || row > (p.filteredRows || p.rows).length - 1) return null;\r\n    return (p.filteredRows || p.rows)[row];\r\n};\r\n\r\n/**\r\n * Returns DOM element of the header row\r\n * @public\r\n * @expose\r\n * @returns {Element} Row element\r\n */\r\nDGTable.prototype.getHeaderRowElement = function () {\r\n    return this.p.headerRow;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {Element} el\r\n * @returns {Number} width\r\n */\r\nDGTable.prototype._horizontalPadding = function(el) {\r\n    return ((parseFloat($.css(el, 'padding-left')) || 0) +\r\n    (parseFloat($.css(el, 'padding-right')) || 0));\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {Element} el\r\n * @returns {Number} width\r\n */\r\nDGTable.prototype._horizontalBorderWidth = function(el) {\r\n    return ((parseFloat($.css(el, 'border-left')) || 0) +\r\n    (parseFloat($.css(el, 'border-right')) || 0));\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {Number} width\r\n */\r\nDGTable.prototype._calculateWidthAvailableForColumns = function() {\r\n    const o = this.o, p = this.p;\r\n\r\n    // Changing display mode briefly, to prevent taking in account the  parent's scrollbar width when we are the cause for it\r\n    let oldDisplay, lastScrollTop, lastScrollLeft;\r\n    if (p.$table) {\r\n        lastScrollTop = p.table ? p.table.scrollTop : 0;\r\n        lastScrollLeft = p.table ? p.table.scrollLeft : 0;\r\n\r\n        if (o.virtualTable) {\r\n            oldDisplay = p.$table[0].style.display;\r\n            p.$table[0].style.display = 'none';\r\n        }\r\n    }\r\n\r\n    let detectedWidth = CssUtil.width(this.$el);\r\n\r\n    if (p.$table) {\r\n        if (o.virtualTable) {\r\n            p.$table[0].style.display = oldDisplay;\r\n        }\r\n\r\n        p.table.scrollTop = lastScrollTop;\r\n        p.table.scrollLeft = lastScrollLeft;\r\n        p.header.scrollLeft = lastScrollLeft;\r\n    }\r\n\r\n    let tableClassName = o.tableClassName;\r\n\r\n    let $thisWrapper = $('<div>').addClass(this.el.className).css({ 'z-index': -1, 'position': 'absolute', left: '0', top: '-9999px' });\r\n    let $header = $('<div>').addClass(tableClassName + '-header').appendTo($thisWrapper);\r\n    let $headerRow = $('<div>').addClass(tableClassName + '-header-row').appendTo($header);\r\n    for (let i = 0; i < p.visibleColumns.length; i++) {\r\n        $headerRow.append($('<div><div></div></div>').addClass(tableClassName + '-header-cell').addClass(p.visibleColumns[i].cellClasses || ''));\r\n    }\r\n    $thisWrapper.appendTo(document.body);\r\n\r\n    detectedWidth -= this._horizontalBorderWidth($headerRow[0]);\r\n\r\n    let $cells = $headerRow.find('>div.' + tableClassName + '-header-cell');\r\n    for (let i = 0; i < $cells.length; i++) {\r\n        let $cell = $($cells[i]);\r\n\r\n        let isBoxing = $cell.css('boxSizing') === 'border-box';\r\n        if (!isBoxing) {\r\n            detectedWidth -=\r\n                (parseFloat($cell.css('border-right-width')) || 0) +\r\n                (parseFloat($cell.css('border-left-width')) || 0) +\r\n                (this._horizontalPadding($cell[0])); // CELL's padding\r\n        }\r\n    }\r\n\r\n    if ($thisWrapper) {\r\n        $thisWrapper.remove();\r\n    }\r\n\r\n    return Math.max(0, detectedWidth);\r\n};\r\n\r\n/**\r\n * Notify the table that its width has changed\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.tableWidthChanged = (function () {\r\n\r\n    let getTextWidth = function(text) {\r\n        let tableClassName = this.o.tableClassName;\r\n\r\n        let $cell, $tableWrapper = $('<div>').addClass(this.$el).append(\r\n            $('<div>').addClass(tableClassName + '-header').append(\r\n                $('<div>').addClass(tableClassName + '-header-row').append(\r\n                    $cell = $('<div>').addClass(tableClassName + '-header-cell').append(\r\n                        $('<div>').text(text),\r\n                    ),\r\n                ),\r\n            ),\r\n        ).css({ 'position': 'absolute', top: '-9999px', 'visibility': 'hidden' });\r\n        $tableWrapper.appendTo(document.body);\r\n\r\n        let width = CssUtil.width($cell);\r\n\r\n        $tableWrapper.remove();\r\n\r\n        return width;\r\n    };\r\n\r\n    let lastDetectedWidth = null;\r\n\r\n    /**\r\n     * @public\r\n     * @expose\r\n     * @param {Boolean} [forceUpdate=false]\r\n     * @param {Boolean} [renderColumns=true]\r\n     * @returns {DGTable} self\r\n     */\r\n    return function(forceUpdate, renderColumns) {\r\n\r\n        let that = this,\r\n            o = that.o,\r\n            p = that.p,\r\n            detectedWidth = this._calculateWidthAvailableForColumns(),\r\n            sizeLeft = detectedWidth,\r\n            relatives = 0;\r\n\r\n        renderColumns = renderColumns === undefined || renderColumns;\r\n\r\n        let tableWidthBeforeCalculations = 0;\r\n\r\n        if (!p.tbody) {\r\n            renderColumns = false;\r\n        }\r\n\r\n        if (renderColumns) {\r\n            tableWidthBeforeCalculations = parseFloat(p.tbody.style.minWidth) || 0;\r\n        }\r\n\r\n        if (sizeLeft != lastDetectedWidth || forceUpdate) {\r\n            lastDetectedWidth = detectedWidth;\r\n\r\n            let absWidthTotal = 0, changedColumnIndexes = [], totalRelativePercentage = 0;\r\n\r\n            for (let i = 0; i < p.columns.length; i++) {\r\n                p.columns[i].actualWidthConsideringScrollbarWidth = null;\r\n            }\r\n\r\n            for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                let col = p.visibleColumns[i];\r\n                if (col.widthMode === ColumnWidthMode.ABSOLUTE) {\r\n                    let width = col.width;\r\n                    width += col.arrowProposedWidth || 0; // Sort-arrow width\r\n                    if (!col.ignoreMin && width < o.minColumnWidth) {\r\n                        width = o.minColumnWidth;\r\n                    }\r\n                    sizeLeft -= width;\r\n                    absWidthTotal += width;\r\n\r\n                    // Update actualWidth\r\n                    if (width !== col.actualWidth) {\r\n                        col.actualWidth = width;\r\n                        changedColumnIndexes.push(i);\r\n                    }\r\n                } else if (col.widthMode === ColumnWidthMode.AUTO) {\r\n                    let width = getTextWidth.call(this, col.label) + 20;\r\n                    width += col.arrowProposedWidth || 0; // Sort-arrow width\r\n                    if (!col.ignoreMin && width < o.minColumnWidth) {\r\n                        width = o.minColumnWidth;\r\n                    }\r\n                    sizeLeft -= width;\r\n                    absWidthTotal += width;\r\n\r\n                    // Update actualWidth\r\n                    if (width !== col.actualWidth) {\r\n                        col.actualWidth = width;\r\n                        if (!o.convertColumnWidthsToRelative) {\r\n                            changedColumnIndexes.push(i);\r\n                        }\r\n                    }\r\n                } else if (col.widthMode === ColumnWidthMode.RELATIVE) {\r\n                    totalRelativePercentage += col.width;\r\n                    relatives++;\r\n                }\r\n            }\r\n\r\n            // Normalize relative sizes if needed\r\n            if (o.convertColumnWidthsToRelative) {\r\n                for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                    let col = p.visibleColumns[i];\r\n                    if (col.widthMode === ColumnWidthMode.AUTO) {\r\n                        col.widthMode = ColumnWidthMode.RELATIVE;\r\n                        sizeLeft += col.actualWidth;\r\n                        col.width = col.actualWidth / absWidthTotal;\r\n                        totalRelativePercentage += col.width;\r\n                        relatives++;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Normalize relative sizes if needed\r\n            if (relatives && ((totalRelativePercentage < 1 && o.relativeWidthGrowsToFillWidth) ||\r\n                (totalRelativePercentage > 1 && o.relativeWidthShrinksToFillWidth))) {\r\n                for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                    let col = p.visibleColumns[i];\r\n                    if (col.widthMode === ColumnWidthMode.RELATIVE) {\r\n                        col.width /= totalRelativePercentage;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let sizeLeftForRelative = Math.max(0, sizeLeft); // Use this as the space to take the relative widths out of\r\n            if (sizeLeftForRelative === 0) {\r\n                sizeLeftForRelative = p.table.clientWidth;\r\n            }\r\n\r\n            let minColumnWidthRelative = (o.minColumnWidth / sizeLeftForRelative);\r\n            if (isNaN(minColumnWidthRelative)) {\r\n                minColumnWidthRelative = 0;\r\n            }\r\n            if (minColumnWidthRelative > 0) {\r\n                let extraRelative = 0, delta;\r\n\r\n                // First pass - make sure they are all constrained to the minimum width\r\n                for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                    let col = p.visibleColumns[i];\r\n                    if (col.widthMode === ColumnWidthMode.RELATIVE) {\r\n                        if (!col.ignoreMin && col.width < minColumnWidthRelative) {\r\n                            extraRelative += minColumnWidthRelative - col.width;\r\n                            col.width = minColumnWidthRelative;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Second pass - try to take the extra width out of the other columns to compensate\r\n                for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                    let col = p.visibleColumns[i];\r\n                    if (col.widthMode === ColumnWidthMode.RELATIVE) {\r\n                        if (!col.ignoreMin && col.width > minColumnWidthRelative) {\r\n                            if (extraRelative > 0) {\r\n                                delta = Math.min(extraRelative, col.width - minColumnWidthRelative);\r\n                                col.width -= delta;\r\n                                extraRelative -= delta;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // Try to fill width\r\n            if (o.autoFillTableWidth && sizeLeft > 0) {\r\n                let nonResizableTotal = 0;\r\n                let sizeLeftToFill = sizeLeft;\r\n                \r\n                for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                    let col = p.visibleColumns[i];\r\n                    if (!col.resizable && col.widthMode === ColumnWidthMode.ABSOLUTE)\r\n                        nonResizableTotal += col.width;\r\n                    \r\n                    if (col.widthMode === ColumnWidthMode.RELATIVE)\r\n                        sizeLeftToFill -= Math.round(sizeLeftForRelative * col.width);\r\n                }\r\n                \r\n                let conv = ((detectedWidth - nonResizableTotal) / (detectedWidth - sizeLeftToFill - nonResizableTotal)) || NaN;\r\n                for (let i = 0; i < p.visibleColumns.length && sizeLeftToFill > 0; i++) {\r\n                    let col = p.visibleColumns[i];\r\n                    if (!col.resizable && col.widthMode === ColumnWidthMode.ABSOLUTE)\r\n                        continue;\r\n                    \r\n                    if (col.widthMode === ColumnWidthMode.RELATIVE) {\r\n                        col.width *= conv;\r\n                    } else {\r\n                        let width = col.actualWidth * conv;\r\n                        if (col.actualWidth !== width) {\r\n                            col.actualWidth = width;\r\n                            if (changedColumnIndexes.indexOf(i) === -1)\r\n                                changedColumnIndexes.push(i);\r\n                        }\r\n                    } \r\n                }\r\n            }\r\n            \r\n            // Materialize relative sizes\r\n            for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                let col = p.visibleColumns[i];\r\n                if (col.widthMode === ColumnWidthMode.RELATIVE) {\r\n                    let width = Math.round(sizeLeftForRelative * col.width);\r\n                    sizeLeft -= width;\r\n                    relatives--;\r\n\r\n                    // Take care of rounding errors\r\n                    if (relatives === 0 && sizeLeft === 1) { // Take care of rounding errors\r\n                        width++;\r\n                        sizeLeft--;\r\n                    }\r\n                    if (sizeLeft === -1) {\r\n                        width--;\r\n                        sizeLeft++;\r\n                    }\r\n\r\n                    // Update actualWidth\r\n                    if (width !== col.actualWidth) {\r\n                        col.actualWidth = width;\r\n                        changedColumnIndexes.push(i);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (p.visibleColumns.length) {\r\n                // (There should always be at least 1 column visible, but just in case)\r\n                p.visibleColumns[p.visibleColumns.length - 1].actualWidthConsideringScrollbarWidth =\r\n                    p.visibleColumns[p.visibleColumns.length - 1].actualWidth - (p.scrollbarWidth || 0);\r\n            }\r\n\r\n            if (renderColumns) {\r\n                let tableWidth = this._calculateTbodyWidth();\r\n\r\n                if (tableWidthBeforeCalculations < tableWidth) {\r\n                    this._updateTableWidth(false);\r\n                }\r\n\r\n                for (let i = 0; i < changedColumnIndexes.length; i++) {\r\n                    this._resizeColumnElements(changedColumnIndexes[i]);\r\n                }\r\n\r\n                if (tableWidthBeforeCalculations > tableWidth) {\r\n                    this._updateTableWidth(false);\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n})();\r\n\r\n/**\r\n * Notify the table that its height has changed\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.tableHeightChanged = function () {\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p;\r\n\r\n    if (!p.$table) {\r\n        return that;\r\n    }\r\n\r\n    let height = CssUtil.innerHeight(that.$el)\r\n        - (parseFloat(p.$table.css('border-top-width')) || 0) // Subtract top border of inner element\r\n        - (parseFloat(p.$table.css('border-bottom-width')) || 0); // Subtract bottom border of inner element\r\n\r\n    if (height != o.height) {\r\n\r\n        o.height = height;\r\n\r\n        if (p.tbody) {\r\n            // At least 1 pixel - to show scrollers correctly.\r\n            p.tbody.style.height = Math.max(o.height - CssUtil.outerHeight(p.$headerRow), 1) + 'px';\r\n        }\r\n\r\n        if (o.virtualTable) {\r\n            that.clearAndRender();\r\n        }\r\n    }\r\n\r\n    return that;\r\n};\r\n\r\n/**\r\n * Add rows to the table\r\n * @public\r\n * @expose\r\n * @param {Object[]} data - array of rows to add to the table\r\n * @param {Number} [at=-1] - where to add the rows at\r\n * @param {Boolean} [resort=false] - should resort all rows?\r\n * @param {Boolean} [render=true]\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.addRows = function (data, at, resort, render) {\r\n    let that = this,\r\n        p = that.p;\r\n        \r\n    if (typeof at === 'boolean') {\r\n        render = resort;\r\n        resort = at;\r\n        at = -1;\r\n    }\r\n    \r\n    if (typeof at !== 'number')\r\n        at = -1;\r\n    \r\n    if (at < 0 || at > p.rows.length)\r\n        at = p.rows.length;\r\n    \r\n    render = (render === undefined) ? true : !!render;\r\n\r\n    if (data) {\r\n        p.rows.add(data, at);\r\n        \r\n        if (p.filteredRows || (resort && p.rows.sortColumn.length)) {\r\n            \r\n            if (resort && p.rows.sortColumn.length) {\r\n                this.resort();\r\n            } else {\r\n                this._refilter();\r\n            }\r\n            \r\n            p.tableSkeletonNeedsRendering = true;\r\n            \r\n            if (render) {\r\n                // Render the skeleton with all rows from scratch\r\n                this.render();\r\n            }\r\n            \r\n        } else if (render) {\r\n            let childNodes = p.tbody.childNodes;\r\n            \r\n            if (that.o.virtualTable) {\r\n                \r\n                while (p.tbody.firstChild) {\r\n                    this.trigger('rowdestroy', p.tbody.firstChild);\r\n                    this._unbindCellEventsForRow(p.tbody.firstChild);\r\n                    p.tbody.removeChild(p.tbody.firstChild);\r\n                }\r\n\r\n                this._calculateVirtualHeight() // Calculate virtual height\r\n                    ._updateLastCellWidthFromScrollbar() // Detect vertical scrollbar height\r\n                    .render()\r\n                    ._updateTableWidth(false); // Update table width to suit the required width considering vertical scrollbar\r\n                \r\n            } else if (p.$tbody) {\r\n                \r\n                let firstRow = at,\r\n                    lastRow = at + data.length - 1;\r\n                \r\n                let renderedRows = that.renderRows(firstRow, lastRow);\r\n                p.tbody.insertBefore(renderedRows, childNodes[at] || null);\r\n                \r\n                for (let i = lastRow + 1; i < childNodes.length; i++) {\r\n                    let row = childNodes[i];\r\n                    row['rowIndex'] += data.length;\r\n                    row['physicalRowIndex'] += data.length;\r\n                }\r\n                               \r\n                this.render()\r\n                    ._updateLastCellWidthFromScrollbar() // Detect vertical scrollbar height, and update existing last cells\r\n                    ._updateTableWidth(true); // Update table width to suit the required width considering vertical scrollbar\r\n\r\n            }\r\n        }\r\n\r\n        this.trigger('addrows', data.length, false);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a row from the table\r\n * @public\r\n * @expose\r\n * @param {Number} physicalRowIndex - index\r\n * @param {Number} count - how many rows to remove\r\n * @param {Boolean=true} render\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.removeRows = function (physicalRowIndex, count, render) {\r\n    let that = this,\r\n        p = that.p;\r\n        \r\n    if (typeof count !== 'number' || count <= 0) return this;\r\n\r\n    if (physicalRowIndex < 0 || physicalRowIndex > p.rows.length - 1) return this;\r\n\r\n    p.rows.splice(physicalRowIndex, count);\r\n    render = (render === undefined) ? true : !!render;\r\n    \r\n    if (p.filteredRows) {\r\n        \r\n        this._refilter();\r\n        \r\n        p.tableSkeletonNeedsRendering = true;\r\n        \r\n        if (render) {\r\n            // Render the skeleton with all rows from scratch\r\n            this.render();\r\n        }\r\n        \r\n    } else if (render) {\r\n        \r\n        let childNodes = p.tbody.childNodes;\r\n        \r\n        if (this.o.virtualTable) {\r\n                \r\n            while (p.tbody.firstChild) {\r\n                this.trigger('rowdestroy', p.tbody.firstChild);\r\n                this._unbindCellEventsForRow(p.tbody.firstChild);\r\n                p.tbody.removeChild(p.tbody.firstChild);\r\n            }\r\n            \r\n            this._calculateVirtualHeight()\r\n                ._updateLastCellWidthFromScrollbar()\r\n                .render()\r\n                ._updateTableWidth(false); // Update table width to suit the required width considering vertical scrollbar\r\n                \r\n                \r\n        } else {\r\n            \r\n            let countRemoved = 0, lastRowIndex = physicalRowIndex + count - 1;\r\n            \r\n            for (let i = 0; i < childNodes.length; i++) {\r\n                let row = childNodes[i];\r\n                let index = row['physicalRowIndex'];\r\n                \r\n                if (index >= physicalRowIndex) {\r\n                    if (index <= lastRowIndex) {\r\n                        this.trigger('rowdestroy', row);\r\n                        this._unbindCellEventsForRow(row);\r\n                        p.tbody.removeChild(row);\r\n                        i--;\r\n                    } else {\r\n                        row['physicalRowIndex'] -= count;\r\n                    }\r\n                } else {\r\n                    row['rowIndex'] = i;\r\n                }\r\n            }\r\n                        \r\n            this.render()\r\n                ._updateLastCellWidthFromScrollbar()\r\n                ._updateTableWidth(true); // Update table width to suit the required width considering vertical scrollbar\r\n                \r\n        }\r\n    }\r\n    \r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a row from the table\r\n * @public\r\n * @expose\r\n * @param {Number} physicalRowIndex - index\r\n * @param {Boolean=true} render\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.removeRow = function (physicalRowIndex, render) {\r\n    return this.removeRows(physicalRowIndex, 1, render);\r\n};\r\n\r\n/**\r\n * Refreshes the row specified\r\n * @public\r\n * @expose\r\n * @param {Number} physicalRowIndex index\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.refreshRow = function(physicalRowIndex) {\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    if (physicalRowIndex < 0 || physicalRowIndex > p.rows.length - 1) return this;\r\n\r\n    // Find out if the row is in the rendered dataset\r\n    let rowIndex = -1;\r\n    if (p.filteredRows && (rowIndex = p.filteredRows.indexOf(p.rows[physicalRowIndex])) === -1) return this;\r\n\r\n    if (rowIndex === -1) {\r\n        rowIndex = physicalRowIndex;\r\n    }\r\n\r\n    let childNodes = p.tbody.childNodes;\r\n\r\n    if (this.o.virtualTable) {\r\n        // Now make sure that the row actually rendered, as this is a virtual table\r\n        let isRowVisible = false;\r\n        let i = 0;\r\n        \r\n        for (; i < childNodes.length; i++) {\r\n            if (childNodes[i]['physicalRowIndex'] === physicalRowIndex) {\r\n                isRowVisible = true;\r\n                this.trigger('rowdestroy', childNodes[i]);\r\n                this._unbindCellEventsForRow(childNodes[i]);\r\n                p.tbody.removeChild(childNodes[i]);\r\n                break;\r\n            }\r\n        }\r\n        \r\n        if (isRowVisible) {\r\n            let renderedRow = this.renderRows(rowIndex, rowIndex);\r\n            p.tbody.insertBefore(renderedRow, childNodes[i] || null);\r\n        }\r\n    } else {\r\n        this.trigger('rowdestroy', childNodes[rowIndex]);\r\n        this._unbindCellEventsForRow(childNodes[rowIndex]);\r\n        p.tbody.removeChild(childNodes[rowIndex]);\r\n        let renderedRow = this.renderRows(rowIndex, rowIndex);\r\n        p.tbody.insertBefore(renderedRow, childNodes[rowIndex] || null);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Get the DOM element for the specified row, if it exists\r\n * @public\r\n * @expose\r\n * @param {Number} physicalRowIndex index\r\n * @returns {Element?} row or null\r\n */\r\nDGTable.prototype.getRowElement = function(physicalRowIndex) {\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    if (physicalRowIndex < 0 || physicalRowIndex > p.rows.length - 1) return null;\r\n\r\n    // Find out if the row is in the rendered dataset\r\n    let rowIndex = -1;\r\n    if (p.filteredRows && (rowIndex = p.filteredRows.indexOf(p.rows[physicalRowIndex])) === -1) return this;\r\n\r\n    if (rowIndex === -1) {\r\n        rowIndex = physicalRowIndex;\r\n    }\r\n\r\n    let childNodes = p.tbody.childNodes;\r\n\r\n    if (this.o.virtualTable) {\r\n        // Now make sure that the row actually rendered, as this is a virtual table\r\n        for (let i = 0; i < childNodes.length; i++) {\r\n            if (childNodes[i]['physicalRowIndex'] === physicalRowIndex) {\r\n                return childNodes[i];\r\n            }\r\n        }\r\n    } else {\r\n        return childNodes[rowIndex];\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Refreshes all virtual rows\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.refreshAllVirtualRows = function () {\r\n\r\n    const p = this.p;\r\n\r\n    if (this.o.virtualTable) {\r\n        // Now make sure that the row actually rendered, as this is a virtual table\r\n        let rowsToRender = [];\r\n        let childNodes = p.tbody.childNodes;\r\n        \r\n        for (let i = 0, rowCount = childNodes.length; i < rowCount; i++) {\r\n            rowsToRender.push(childNodes[i]['physicalRowIndex']);\r\n            this.trigger('rowdestroy', childNodes[i]);\r\n            this._unbindCellEventsForRow(childNodes[i]);\r\n            p.tbody.removeChild(childNodes[i]);\r\n            i--;\r\n            rowCount--;\r\n        }\r\n        \r\n        for (let i = 0; i < rowsToRender.length; i++) {\r\n            let renderedRow = this.renderRows(rowsToRender[i], rowsToRender[i]);\r\n            p.tbody.appendChild(renderedRow);\r\n        }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Replace the whole dataset\r\n * @public\r\n * @expose\r\n * @param {Object[]} data array of rows to add to the table\r\n * @param {Boolean} [resort=false] should resort all rows?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setRows = function (data, resort) {\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    // this.scrollTop = this.$el.find('.table').scrollTop();\r\n    p.rows.reset(data);\r\n\r\n    if (resort && p.rows.sortColumn.length) {\r\n        this.resort();\r\n    } else {\r\n        this._refilter();\r\n    }\r\n\r\n    this.clearAndRender().trigger('addrows', data.length, true);\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Creates a URL representing the data in the specified element.\r\n * This uses the Blob or BlobBuilder of the modern browsers.\r\n * The url can be used for a Web Worker.\r\n * @public\r\n * @expose\r\n * @param {string} id Id of the element containing your data\r\n * @returns {String|null} the url, or null if not supported\r\n */\r\nDGTable.prototype.getUrlForElementContent = function (id) {\r\n    let blob,\r\n        el = document.getElementById(id);\r\n    if (el) {\r\n        let data = el.textContent;\r\n        if (typeof Blob === 'function') {\r\n            blob = new Blob([data]);\r\n        } else {\r\n            let BlobBuilder = global.BlobBuilder || global.WebKitBlobBuilder || global.MozBlobBuilder || global.MSBlobBuilder;\r\n            if (!BlobBuilder) {\r\n                return null;\r\n            }\r\n            let builder = new BlobBuilder();\r\n            builder.append(data);\r\n            blob = builder.getBlob();\r\n        }\r\n        return (global.URL || global.webkitURL).createObjectURL(blob);\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @returns {Boolean} A value indicating whether Web Workers are supported\r\n */\r\nDGTable.prototype.isWorkerSupported = function() {\r\n    return global['Worker'] instanceof Function;\r\n};\r\n\r\n/**\r\n * Creates a Web Worker for updating the table.\r\n * @public\r\n * @expose\r\n * @param {string} url Url to the script for the Web Worker\r\n * @param {Boolean=true} start if true, starts the Worker immediately\r\n * @returns {Worker?} the Web Worker, or null if not supported\r\n */\r\nDGTable.prototype.createWebWorker = function (url, start, resort) {\r\n    if (this.isWorkerSupported()) {\r\n        let that = this,\r\n            p = that.p;\r\n\r\n        let worker = new Worker(url);\r\n        let listener = function (evt) {\r\n            if (evt.data.append) {\r\n                that.addRows(evt.data.rows, resort);\r\n            } else {\r\n                that.setRows(evt.data.rows, resort);\r\n            }\r\n        };\r\n        worker.addEventListener('message', listener, false);\r\n        if (!p.workerListeners) {\r\n            p.workerListeners = [];\r\n        }\r\n        p.workerListeners.push({ worker: worker, listener: listener });\r\n        if (start || start === undefined) {\r\n            worker.postMessage(null);\r\n        }\r\n        return worker;\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Unbinds a Web Worker from the table, stopping updates.\r\n * @public\r\n * @expose\r\n * @param {Worker} worker the Web Worker\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.unbindWebWorker = function (worker) {\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    if (p.workerListeners) {\r\n        for (let j = 0; j < p.workerListeners.length; j++) {\r\n            if (p.workerListeners[j].worker == worker) {\r\n                worker.removeEventListener('message', p.workerListeners[j].listener, false);\r\n                p.workerListeners.splice(j, 1);\r\n                j--;\r\n            }\r\n        }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * A synonym for hideCellPreview()\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.abortCellPreview = function() {\r\n    this.hideCellPreview();\r\n    return this;\r\n};\r\n\r\n/**\r\n * Cancel a resize in progress\r\n * @expose\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.cancelColumnResize = function() {\r\n    const p = this.p;\r\n\r\n    if (p.$resizer) {\r\n        p.$resizer.remove();\r\n        p.$resizer = null;\r\n        $(document).off('mousemove.dgtable', p.onMouseMoveResizeAreaBound)\r\n            .off('mouseup.dgtable', p.onEndDragColumnHeaderBound);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * @param {jQuery_Event} event\r\n */\r\nDGTable.prototype._onVirtualTableScrolled = function (_event) {\r\n    this.render();\r\n};\r\n\r\n/**\r\n * @param {jQuery_Event} event\r\n */\r\nDGTable.prototype._onTableScrolledHorizontally = function (_event) {\r\n    const p = this.p;\r\n\r\n    p.header.scrollLeft = p.table.scrollLeft;\r\n};\r\n\r\n/**previousElementSibling\r\n * Reverse-calculate the column to resize from mouse position\r\n * @private\r\n * @param {jQuery_Event} e jQuery mouse event\r\n * @returns {String} name of the column which the mouse is over, or null if the mouse is not in resize position\r\n */\r\nDGTable.prototype._getColumnByResizePosition = function (e) {\r\n\r\n    let that = this,\r\n        o = that.o,\r\n        rtl = this._isTableRtl();\r\n\r\n    let $headerCell = $(e.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName),\r\n        headerCell = $headerCell[0];\r\n    if (headerCell['__cell']) {\r\n        headerCell = headerCell['__cell'];\r\n        $headerCell = $(headerCell);\r\n    }\r\n\r\n    let previousElementSibling = $headerCell[0].previousSibling;\r\n    while (previousElementSibling && previousElementSibling.nodeType != 1) {\r\n        previousElementSibling = previousElementSibling.previousSibling;\r\n    }\r\n\r\n    let firstCol = !previousElementSibling;\r\n\r\n    let mouseX = ((e.pageX != null ? e.pageX : e.originalEvent.pageX) || e.originalEvent.clientX) - $headerCell.offset().left;\r\n\r\n    if (rtl) {\r\n        if (!firstCol && CssUtil.outerWidth($headerCell) - mouseX <= o.resizeAreaWidth / 2) {\r\n            return previousElementSibling['columnName'];\r\n        } else if (mouseX <= o.resizeAreaWidth / 2) {\r\n            return headerCell['columnName'];\r\n        }\r\n    } else {\r\n        if (!firstCol && mouseX <= o.resizeAreaWidth / 2) {\r\n            return previousElementSibling['columnName'];\r\n        } else if (CssUtil.outerWidth($headerCell) - mouseX <= o.resizeAreaWidth / 2) {\r\n            return headerCell['columnName'];\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * @param {jQuery_Event} event\r\n */\r\nDGTable.prototype._onTouchStartColumnHeader = function (event) {\r\n    const p = this.p;\r\n\r\n    if (p.currentTouchId) return;\r\n\r\n    let startTouch = event.originalEvent.changedTouches[0];\r\n    p.currentTouchId = startTouch.identifier;\r\n\r\n    let $eventTarget = $(event.currentTarget);\r\n\r\n    let startPos = { x: startTouch.pageX, y: startTouch.pageY },\r\n        currentPos = startPos,\r\n        distanceTreshold = 9;\r\n        \r\n    let tapAndHoldTimeout;\r\n\r\n    let unbind = function () {\r\n        p.currentTouchId = null;\r\n        $eventTarget.off('touchend').off('touchcancel');\r\n        clearTimeout(tapAndHoldTimeout);\r\n    };\r\n\r\n    let fakeEvent = function (name) {\r\n        let fakeEvent = $.Event(name);\r\n        let extendObjects = Array.prototype.slice.call(arguments, 1);\r\n        $.each(['target', 'clientX', 'clientY', 'offsetX', 'offsetY', 'screenX', 'screenY', 'pageX', 'pageY', 'which'],\r\n            function () {\r\n                fakeEvent[this] = event[this];\r\n                for (let i = 0; i < extendObjects.length; i++) {\r\n                    if (extendObjects[i][this] != null) {\r\n                        fakeEvent[this] = extendObjects[i][this];\r\n                    }\r\n                }\r\n            });\r\n        return fakeEvent;\r\n    };\r\n\r\n    $eventTarget.trigger(fakeEvent('mousedown', event.originalEvent.changedTouches[0], { 'which': 1 }));\r\n\r\n    tapAndHoldTimeout = setTimeout(() => {\r\n        unbind();\r\n\r\n        // Prevent simulated mouse events after touchend\r\n        $eventTarget\r\n            .one('touchend', (event) => {\r\n                event.preventDefault();\r\n                $eventTarget.off('touchend').off('touchcancel');\r\n            })\r\n            .one('touchcancel', (_event) => {\r\n                $eventTarget.off('touchend').off('touchcancel');\r\n            });\r\n\r\n        let distanceTravelled = Math.sqrt(Math.pow(Math.abs(currentPos.x - startPos.x), 2) + Math.pow(Math.abs(currentPos.y - startPos.y), 2));\r\n\r\n        if (distanceTravelled < distanceTreshold) {\r\n            this.cancelColumnResize();\r\n            $eventTarget.trigger(fakeEvent('mouseup', event.originalEvent.changedTouches[0], { 'which': 3 }));\r\n        }\r\n\r\n    }, 500);\r\n\r\n    $eventTarget\r\n        .on('touchend', (event) => {\r\n            let touch = find(event.originalEvent.changedTouches, (touch) => touch.identifier === p.currentTouchId);\r\n            if (!touch) return;\r\n\r\n            unbind();\r\n\r\n            event.preventDefault(); // Prevent simulated mouse events\r\n\r\n            currentPos = { x: touch.pageX, y: touch.pageY };\r\n            let distanceTravelled = Math.sqrt(Math.pow(Math.abs(currentPos.x - startPos.x), 2) + Math.pow(Math.abs(currentPos.y - startPos.y), 2));\r\n\r\n            if (distanceTravelled < distanceTreshold || p.$resizer) {\r\n                $eventTarget.trigger(fakeEvent('mouseup', touch, { 'which': 1 }));\r\n                $eventTarget.trigger(fakeEvent('click', touch, { 'which': 1 }));\r\n            }\r\n\r\n        })\r\n        .on('touchcancel', () => {\r\n            unbind();\r\n        })\r\n        .on('touchmove', (event) => {\r\n            let touch = find(event.originalEvent.changedTouches, (touch) => touch.identifier === p.currentTouchId);\r\n            if (!touch) return;\r\n\r\n            // Keep track of current position, so we know if we need to cancel the tap-and-hold\r\n            currentPos = { x: touch.pageX, y: touch.pageY };\r\n\r\n            if (p.$resizer) {\r\n                event.preventDefault();\r\n\r\n                $eventTarget.trigger(fakeEvent('mousemove', touch));\r\n            }\r\n        });\r\n};\r\n\r\n/**\r\n * @param {jQuery_Event} e event\r\n */\r\nDGTable.prototype._onMouseDownColumnHeader = function (event) {\r\n    if (event.which !== 1) return this; // Only treat left-clicks\r\n\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p,\r\n        col = this._getColumnByResizePosition(event);\r\n\r\n    if (col) {\r\n        let column = p.columns.get(col);\r\n        if (!o.resizableColumns || !column || !column.resizable) {\r\n            return false;\r\n        }\r\n\r\n        let rtl = this._isTableRtl();\r\n\r\n        if (p.$resizer) {\r\n            $(p.$resizer).remove();\r\n        }\r\n        p.$resizer = $('<div></div>')\r\n            .addClass(o.resizerClassName)\r\n            .css({\r\n                'position': 'absolute',\r\n                'display': 'block',\r\n                'z-index': -1,\r\n                'visibility': 'hidden',\r\n                'width': '2px',\r\n                'background': '#000',\r\n                'opacity': 0.7,\r\n            })\r\n            .appendTo(this.$el);\r\n\r\n        let selectedHeaderCell = column.element,\r\n            commonAncestor = p.$resizer.parent();\r\n\r\n        let posCol = selectedHeaderCell.offset(),\r\n            posRelative = commonAncestor.offset();\r\n        if (ieVersion === 8) {\r\n            posCol = selectedHeaderCell.offset(); // IE8 bug, first time it receives zeros...\r\n        }\r\n        posRelative.left += parseFloat(commonAncestor.css('border-left-width')) || 0;\r\n        posRelative.top += parseFloat(commonAncestor.css('border-top-width')) || 0;\r\n        posCol.left -= posRelative.left;\r\n        posCol.top -= posRelative.top;\r\n        posCol.top -= parseFloat(selectedHeaderCell.css('border-top-width')) || 0;\r\n        let resizerWidth = CssUtil.outerWidth(p.$resizer);\r\n        if (rtl) {\r\n            posCol.left -= Math.ceil((parseFloat(selectedHeaderCell.css('border-left-width')) || 0) / 2);\r\n            posCol.left -= Math.ceil(resizerWidth / 2);\r\n        } else {\r\n            posCol.left += CssUtil.outerWidth(selectedHeaderCell);\r\n            posCol.left += Math.ceil((parseFloat(selectedHeaderCell.css('border-right-width')) || 0) / 2);\r\n            posCol.left -= Math.ceil(resizerWidth / 2);\r\n        }\r\n\r\n        p.$resizer\r\n            .css({\r\n                'z-index': '10',\r\n                'visibility': 'visible',\r\n                'left': posCol.left,\r\n                'top': posCol.top,\r\n                'height': CssUtil.height(this.$el),\r\n            })[0]['columnName'] = selectedHeaderCell[0]['columnName'];\r\n            \r\n        try { p.$resizer[0].style.zIndex = ''; }\r\n        catch (ignored) { /* we're ok with this */ }\r\n\r\n        $(document).on('mousemove.dgtable', p.onMouseMoveResizeAreaBound);\r\n        $(document).on('mouseup.dgtable', p.onEndDragColumnHeaderBound);\r\n\r\n        event.preventDefault();\r\n    }\r\n};\r\n\r\n/**\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onMouseMoveColumnHeader = function (event) {\r\n\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p;\r\n\r\n    if (o.resizableColumns) {\r\n        let col = this._getColumnByResizePosition(event);\r\n        let headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName)[0];\r\n        if (!col || !p.columns.get(col).resizable) {\r\n            headerCell.style.cursor = '';\r\n        } else {\r\n            headerCell.style.cursor = 'e-resize';\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * @param {jQuery_Event} event\r\n */\r\nDGTable.prototype._onMouseUpColumnHeader = function (event) {\r\n    if (event.which === 3) {\r\n        let o = this.o;\r\n        let $headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName);\r\n        let bounds = $headerCell.offset();\r\n        bounds['width'] = CssUtil.outerWidth($headerCell);\r\n        bounds['height'] = CssUtil.outerHeight($headerCell);\r\n        this.trigger('headercontextmenu', $headerCell[0]['columnName'], event.pageX, event.pageY, bounds);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onMouseLeaveColumnHeader = function (event) {\r\n    let o = this.o;\r\n    let headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName)[0];\r\n    headerCell.style.cursor = '';\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onClickColumnHeader = function (event) {\r\n    if (!this._getColumnByResizePosition(event)) {\r\n\r\n        let that = this,\r\n            o = that.o,\r\n            p = that.p;\r\n\r\n        let headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName)[0];\r\n        if (o.sortableColumns) {\r\n            let column = p.columns.get(headerCell['columnName']);\r\n            if (column && column.sortable) {\r\n                this.sort(headerCell['columnName'], undefined, true).render();\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onStartDragColumnHeader = function (event) {\r\n\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p;\r\n\r\n    if (o.movableColumns) {\r\n\r\n        let $headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName);\r\n        let column = p.columns.get($headerCell[0]['columnName']);\r\n        if (column && column.movable) {\r\n            $headerCell[0].style.opacity = 0.35;\r\n            p.dragId = Math.random() * 0x9999999; // Recognize this ID on drop\r\n            event.originalEvent.dataTransfer.setData('text', JSON.stringify({ dragId: p.dragId, column: column.name }));\r\n        } else {\r\n            event.preventDefault();\r\n        }\r\n\r\n    } else {\r\n\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {MouseEvent} event event\r\n */\r\nDGTable.prototype._onMouseMoveResizeArea = function (event) {\r\n\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    let column = p.columns.get(p.$resizer[0]['columnName']);\r\n    let rtl = this._isTableRtl();\r\n\r\n    let selectedHeaderCell = column.element,\r\n        commonAncestor = p.$resizer.parent();\r\n    let posCol = selectedHeaderCell.offset(), posRelative = commonAncestor.offset();\r\n    posRelative.left += parseFloat(commonAncestor.css('border-left-width')) || 0;\r\n    posCol.left -= posRelative.left;\r\n    let resizerWidth = CssUtil.outerWidth(p.$resizer);\r\n    \r\n    let isBoxing = selectedHeaderCell.css('box-sizing') === 'border-box';\r\n    \r\n    let actualX = event.pageX - posRelative.left;\r\n    let minX = posCol.left;\r\n\r\n    minX -= Math.ceil(resizerWidth / 2);\r\n\r\n    if (rtl) {\r\n        minX += CssUtil.outerWidth(selectedHeaderCell);\r\n        minX -= column.ignoreMin ? 0 : this.o.minColumnWidth;\r\n\r\n        if (!isBoxing) {\r\n            minX -= Math.ceil((parseFloat(selectedHeaderCell.css('border-left-width')) || 0) / 2);\r\n            minX -= this._horizontalPadding(selectedHeaderCell[0]);\r\n        }\r\n\r\n        if (actualX > minX) {\r\n            actualX = minX;\r\n        }\r\n    } else {\r\n        minX += column.ignoreMin ? 0 : this.o.minColumnWidth;\r\n        \r\n        if (!isBoxing) {\r\n            minX += Math.ceil((parseFloat(selectedHeaderCell.css('border-right-width')) || 0) / 2);\r\n            minX += this._horizontalPadding(selectedHeaderCell[0]);\r\n        }\r\n\r\n        if (actualX < minX) {\r\n            actualX = minX;\r\n        }\r\n    }\r\n\r\n    p.$resizer.css('left', actualX + 'px');\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {Event} event event\r\n */\r\nDGTable.prototype._onEndDragColumnHeader = function (event) {\r\n\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p;\r\n\r\n    if (!p.$resizer) {\r\n        event.target.style.opacity = null;\r\n    } else {\r\n        $(document).off('mousemove.dgtable', p.onMouseMoveResizeAreaBound)\r\n            .off('mouseup.dgtable', p.onEndDragColumnHeaderBound);\r\n\r\n        let column = p.columns.get(p.$resizer[0]['columnName']);\r\n        let rtl = this._isTableRtl();\r\n\r\n        let selectedHeaderCell = column.element,\r\n            commonAncestor = p.$resizer.parent();\r\n        let posCol = selectedHeaderCell.offset(), posRelative = commonAncestor.offset();\r\n        posRelative.left += parseFloat(commonAncestor.css('border-left-width')) || 0;\r\n        posCol.left -= posRelative.left;\r\n        let resizerWidth = CssUtil.outerWidth(p.$resizer);\r\n        \r\n        let isBoxing = selectedHeaderCell.css('box-sizing') === 'border-box';\r\n\r\n        let actualX = event.pageX - posRelative.left;\r\n        let baseX = posCol.left, minX = posCol.left;\r\n        let width = 0;\r\n\r\n        baseX -= Math.ceil(resizerWidth / 2);\r\n\r\n        if (rtl) {\r\n\r\n            if (!isBoxing) {\r\n                actualX += this._horizontalPadding(selectedHeaderCell[0]);\r\n                actualX += parseFloat(selectedHeaderCell.css('border-left-width')) || 0;\r\n                actualX += parseFloat(selectedHeaderCell.css('border-right-width')) || 0;\r\n            }\r\n\r\n            baseX += CssUtil.outerWidth(selectedHeaderCell);\r\n            \r\n            minX = baseX - (column.ignoreMin ? 0 : this.o.minColumnWidth);\r\n            if (actualX > minX) {\r\n                actualX = minX;\r\n            }\r\n\r\n            width = baseX - actualX;\r\n        } else {\r\n\r\n            if (!isBoxing) {\r\n                actualX -= this._horizontalPadding(selectedHeaderCell[0]);\r\n                actualX -= parseFloat(selectedHeaderCell.css('border-left-width')) || 0;\r\n                actualX -= parseFloat(selectedHeaderCell.css('border-right-width')) || 0;\r\n            }\r\n\r\n            minX = baseX + (column.ignoreMin ? 0 : this.o.minColumnWidth);\r\n            if (actualX < minX) {\r\n                actualX = minX;\r\n            }\r\n\r\n            width = actualX - baseX;\r\n        }\r\n        \r\n        p.$resizer.remove();\r\n        p.$resizer = null;\r\n\r\n        let sizeToSet = width;\r\n\r\n        if (column.widthMode === ColumnWidthMode.RELATIVE) {\r\n            let detectedWidth = this._calculateWidthAvailableForColumns();\r\n\r\n            let sizeLeft = detectedWidth;\r\n            //sizeLeft -= p.table.offsetWidth - p.table.clientWidth;\r\n\r\n            let totalRelativePercentage = 0;\r\n            let relatives = 0;\r\n\r\n            for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                let col = p.visibleColumns[i];\r\n                if (col.name === column.name) continue;\r\n\r\n                if (col.widthMode == ColumnWidthMode.RELATIVE) {\r\n                    totalRelativePercentage += col.width;\r\n                    relatives++;\r\n                } else {\r\n                    sizeLeft -= col.actualWidth;\r\n                }\r\n            }\r\n\r\n            sizeLeft = Math.max(1, sizeLeft);\r\n            sizeToSet = width / sizeLeft;\r\n\r\n            if (relatives > 0) {\r\n                // When there's more than one relative overall,\r\n                //   we can do relative enlarging/shrinking.\r\n                // Otherwise, we can end up having a 0 width.\r\n\r\n                let unNormalizedSizeToSet = sizeToSet / ((1 - sizeToSet) / totalRelativePercentage);\r\n\r\n                totalRelativePercentage += sizeToSet;\r\n\r\n                // Account for relative widths scaling later\r\n                if ((totalRelativePercentage < 1 && o.relativeWidthGrowsToFillWidth) ||\r\n                    (totalRelativePercentage > 1 && o.relativeWidthShrinksToFillWidth)) {\r\n                    sizeToSet = unNormalizedSizeToSet;\r\n                }\r\n            }\r\n            \r\n            sizeToSet *= 100;\r\n            sizeToSet += '%';\r\n        }\r\n\r\n        this.setColumnWidth(column.name, sizeToSet);\r\n    }\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onDragEnterColumnHeader = function (event) {\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p;\r\n\r\n    if (o.movableColumns) {\r\n        let dataTransferred = event.originalEvent.dataTransfer.getData('text');\r\n        if (dataTransferred) {\r\n            dataTransferred = JSON.parse(dataTransferred);\r\n        }\r\n        else {\r\n            dataTransferred = null; // WebKit does not provide the dataTransfer on dragenter?..\r\n        }\r\n\r\n        let $headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName);\r\n        if (!dataTransferred ||\r\n            (p.dragId == dataTransferred.dragId && $headerCell['columnName'] !== dataTransferred.column)) {\r\n\r\n            let column = p.columns.get($headerCell[0]['columnName']);\r\n            if (column && (column.movable || column != p.visibleColumns[0])) {\r\n                $($headerCell).addClass('drag-over');\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onDragOverColumnHeader = function (event) {\r\n    event.preventDefault();\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onDragLeaveColumnHeader = function (event) {\r\n    let o = this.o;\r\n    let $headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName);\r\n    if ( !$($headerCell[0].firstChild)\r\n            .has(event.originalEvent.relatedTarget).length ) {\r\n        $headerCell.removeClass('drag-over');\r\n    }\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onDropColumnHeader = function (event) {\r\n    event.preventDefault();\r\n\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p;\r\n\r\n    let dataTransferred = JSON.parse(event.originalEvent.dataTransfer.getData('text'));\r\n    let $headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName);\r\n    if (o.movableColumns && dataTransferred.dragId == p.dragId) {\r\n        let srcColName = dataTransferred.column,\r\n            destColName = $headerCell[0]['columnName'],\r\n            srcCol = p.columns.get(srcColName),\r\n            destCol = p.columns.get(destColName);\r\n        if (srcCol && destCol && srcCol.movable && (destCol.movable || destCol != p.visibleColumns[0])) {\r\n            this.moveColumn(srcColName, destColName);\r\n        }\r\n    }\r\n    $($headerCell).removeClass('drag-over');\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._clearSortArrows = function () {\r\n\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    if (p.$table) {\r\n        let tableClassName = this.o.tableClassName;\r\n        let sortedColumns = p.$headerRow.find('>div.' + tableClassName + '-header-cell.sorted');\r\n        let arrows = sortedColumns.find('>div>.sort-arrow');\r\n        for (let arrow of arrows) {\r\n            let col = p.columns.get(arrow.parentNode.parentNode['columnName']);\r\n            if (col) {\r\n                col.arrowProposedWidth = 0;\r\n            }\r\n        }\r\n        arrows.remove();\r\n        sortedColumns.removeClass('sorted').removeClass('desc');\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {String} column the name of the sort column\r\n * @param {Boolean} descending table is sorted descending\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._showSortArrow = function (column, descending) {\r\n\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    let col = p.columns.get(column);\r\n    if (!col) return false;\r\n    \r\n    let arrow = createElement('span');\r\n    arrow.className = 'sort-arrow';\r\n\r\n    if (col.element) {\r\n        col.element.addClass(descending ? 'sorted desc' : 'sorted');\r\n        col.element[0].firstChild.insertBefore(arrow, col.element[0].firstChild.firstChild);\r\n    }\r\n\r\n    if (col.widthMode != ColumnWidthMode.RELATIVE && this.o.adjustColumnWidthForSortArrow) {\r\n        col.arrowProposedWidth = arrow.scrollWidth + (parseFloat($(arrow).css('margin-right')) || 0) + (parseFloat($(arrow).css('margin-left')) || 0);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {Number} cellIndex index of the column in the DOM\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._resizeColumnElements = function (cellIndex) {\r\n\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    let headerCells = p.$headerRow.find('div.' + this.o.tableClassName + '-header-cell');\r\n    let col = p.columns.get(headerCells[cellIndex]['columnName']);\r\n\r\n    if (col) {\r\n        headerCells[cellIndex].style.width = (col.actualWidthConsideringScrollbarWidth || col.actualWidth) + 'px';\r\n\r\n        let width = (col.actualWidthConsideringScrollbarWidth || col.actualWidth) + 'px';\r\n        let tbodyChildren = p.$tbody[0].childNodes;\r\n        for (let i = 0, count = tbodyChildren.length; i < count; i++) {\r\n            let headerRow = tbodyChildren[i];\r\n            if (headerRow.nodeType !== 1) continue;\r\n            headerRow.childNodes[cellIndex].style.width = width;\r\n        }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * @returns {DGTable} self\r\n * */\r\nDGTable.prototype._destroyHeaderCells = function() {\r\n\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p;\r\n\r\n    if (p.$headerRow) {\r\n        this.trigger('headerrowdestroy', p.headerRow);\r\n        p.$headerRow.find('div.' + o.tableClassName + '-header-cell').remove();\r\n        p.$headerRow = null;\r\n        p.headerRow = null;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._renderSkeletonBase = function () {\r\n    let that = this,\r\n        p = that.p,\r\n        o = that.o;\r\n    \r\n    // Clean up old elements\r\n    \r\n    if (p.$table && o.virtualTable) {\r\n        p.$table.remove();\r\n        if (p.$tbody) {\r\n            let rows = p.$tbody[0].childNodes;\r\n            for (let i = 0, len = rows.length; i < len; i++) {\r\n                that.trigger('rowdestroy', rows[i]);\r\n                that._unbindCellEventsForRow(rows[i]);\r\n            }\r\n        }\r\n        p.$table = p.table = p.$tbody = p.tbody = null;\r\n    }\r\n    \r\n    that._destroyHeaderCells();\r\n    p.currentTouchId = null;\r\n    if (p.$header) {\r\n        p.$header.remove();\r\n    }    \r\n\r\n    // Create new base elements\r\n    let tableClassName = o.tableClassName,\r\n        headerCellClassName = tableClassName + '-header-cell',\r\n        header = createElement('div'),\r\n        $header = $(header),\r\n        headerRow = createElement('div'),\r\n        $headerRow = $(headerRow);\r\n\r\n    header.className = tableClassName + '-header';\r\n    headerRow.className = tableClassName + '-header-row';\r\n    \r\n    p.$header = $header;\r\n    p.header = header;\r\n    p.$headerRow = $headerRow;\r\n    p.headerRow = headerRow;\r\n    $headerRow.appendTo(p.$header);\r\n    $header.prependTo(this.$el);\r\n    \r\n    relativizeElement(that.$el);\r\n    \r\n    if (o.width == DGTable.Width.SCROLL) {\r\n        this.el.style.overflow = 'hidden';\r\n    } else {\r\n        this.el.style.overflow = '';\r\n    }\r\n    \r\n    if (!o.height && o.virtualTable) {\r\n        o.height = CssUtil.innerHeight(this.$el);\r\n    }\r\n    \r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._renderSkeletonHeaderCells = function () {\r\n    let that = this,\r\n        p = that.p,\r\n        o = that.o;\r\n        \r\n    let allowCellPreview = o.allowCellPreview,\r\n        allowHeaderCellPreview = o.allowHeaderCellPreview;\r\n\r\n    let tableClassName = o.tableClassName,\r\n        headerCellClassName = tableClassName + '-header-cell',\r\n        header = p.header,\r\n        $header = p.$header,\r\n        headerRow = p.headerRow,\r\n        $headerRow = p.$headerRow;\r\n\r\n    let ieDragDropHandler;\r\n    if (hasIeDragAndDropBug) {\r\n        ieDragDropHandler = function(evt) {\r\n            evt.preventDefault();\r\n            this.dragDrop();\r\n            return false;\r\n        };\r\n    }\r\n\r\n    let preventDefault = function (event) { event.preventDefault(); };\r\n\r\n    // Create header cells\r\n    for (let i = 0; i < p.visibleColumns.length; i++) {\r\n        let column = p.visibleColumns[i];\r\n        if (column.visible) {\r\n            let cell = createElement('div');\r\n            let $cell = $(cell);\r\n            cell.draggable = true;\r\n            cell.className = headerCellClassName;\r\n            cell.style.width = column.actualWidth + 'px';\r\n            if (o.sortableColumns && column.sortable) {\r\n                cell.className += ' sortable';\r\n            }\r\n            cell['columnName'] = column.name;\r\n            cell.setAttribute('data-column', column.name);\r\n            \r\n            let cellInside = createElement('div');\r\n            cellInside.innerHTML = o.headerCellFormatter(column.label, column.name);\r\n            cell.appendChild(cellInside);\r\n            if (allowCellPreview && allowHeaderCellPreview) {\r\n                p._bindCellHoverIn(cell);\r\n            }\r\n            headerRow.appendChild(cell);\r\n\r\n            p.visibleColumns[i].element = $cell;\r\n\r\n            $cell.on('mousedown.dgtable', that._onMouseDownColumnHeader.bind(that))\r\n                .on('mousemove.dgtable', that._onMouseMoveColumnHeader.bind(that))\r\n                .on('mouseup.dgtable', that._onMouseUpColumnHeader.bind(that))\r\n                .on('mouseleave.dgtable', that._onMouseLeaveColumnHeader.bind(that))\r\n                .on('touchstart.dgtable', that._onTouchStartColumnHeader.bind(that))\r\n                .on('dragstart.dgtable', that._onStartDragColumnHeader.bind(that))\r\n                .on('click.dgtable', that._onClickColumnHeader.bind(that))\r\n                .on('contextmenu.dgtable', preventDefault);\r\n            $(cellInside)\r\n                .on('dragenter.dgtable', that._onDragEnterColumnHeader.bind(that))\r\n                .on('dragover.dgtable', that._onDragOverColumnHeader.bind(that))\r\n                .on('dragleave.dgtable', that._onDragLeaveColumnHeader.bind(that))\r\n                .on('drop.dgtable', that._onDropColumnHeader.bind(that));\r\n\r\n            if (hasIeDragAndDropBug) {\r\n                $cell.on('selectstart.dgtable', ieDragDropHandler.bind(cell));\r\n            }\r\n\r\n            // Disable these to allow our own context menu events without interruption\r\n            $cell.css({ '-webkit-touch-callout': 'none', '-webkit-user-select': 'none', '-moz-user-select': 'none', '-ms-user-select': 'none', '-o-user-select': 'none', 'user-select': 'none' });\r\n        }\r\n    }\r\n\r\n    this.trigger('headerrowcreate', headerRow);\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._renderSkeletonBody = function () {\r\n    let that = this,\r\n        p = that.p,\r\n        o = that.o;\r\n\r\n    let tableClassName = o.tableClassName;\r\n        \r\n    // Calculate virtual row heights\r\n    if (o.virtualTable && !p.virtualRowHeight) {\r\n        let createDummyRow = function() {\r\n            let row = createElement('div'),\r\n                cell = row.appendChild(createElement('div')),\r\n                cellInner = cell.appendChild(createElement('div'));\r\n            row.className = tableClassName + '-row';\r\n            cell.className = tableClassName + '-cell';\r\n            cellInner.innerHTML = '0';\r\n            row.style.visibility = 'hidden';\r\n            row.style.position = 'absolute';\r\n            return row;\r\n        };\r\n\r\n        let $dummyTbody, $dummyWrapper = $('<div>')\r\n            .addClass(that.el.className)\r\n            .css({ 'z-index': -1, 'position': 'absolute', left: '0', top: '-9999px', width: '1px', overflow: 'hidden' })\r\n            .append(\r\n                $('<div>').addClass(tableClassName).append(\r\n                    $dummyTbody = $('<div>').addClass(tableClassName + '-body').css('width', 99999),\r\n                ),\r\n            );\r\n\r\n        $dummyWrapper.appendTo(document.body);\r\n\r\n        let row1 = createDummyRow(), row2 = createDummyRow(), row3 = createDummyRow();\r\n        $dummyTbody.append(row1, row2, row3);\r\n\r\n        p.virtualRowHeightFirst = CssUtil.outerHeight(row1);\r\n        p.virtualRowHeight = CssUtil.outerHeight(row2);\r\n        p.virtualRowHeightLast = CssUtil.outerHeight(row3);\r\n\r\n        p.virtualRowHeightMin = Math.min(Math.min(p.virtualRowHeightFirst, p.virtualRowHeight), p.virtualRowHeightLast);\r\n        p.virtualRowHeightMax = Math.max(Math.max(p.virtualRowHeightFirst, p.virtualRowHeight), p.virtualRowHeightLast);\r\n\r\n        $dummyWrapper.remove();\r\n    }\r\n\r\n    // Create inner table and tbody\r\n    if (!p.$table) {\r\n\r\n        let fragment = document.createDocumentFragment();\r\n        \r\n        // Create the inner table element\r\n        let table = createElement('div');\r\n        let $table = $(table);\r\n        table.className = tableClassName;\r\n\r\n        if (o.virtualTable) {\r\n            table.className += ' virtual';\r\n        }\r\n\r\n        let tableHeight = (o.height - CssUtil.outerHeight(p.$headerRow));\r\n        if ($table.css('box-sizing') !== 'border-box') {\r\n            tableHeight -= parseFloat($table.css('border-top-width')) || 0;\r\n            tableHeight -= parseFloat($table.css('border-bottom-width')) || 0;\r\n            tableHeight -= parseFloat($table.css('padding-top')) || 0;\r\n            tableHeight -= parseFloat($table.css('padding-bottom')) || 0;\r\n        }\r\n        p.visibleHeight = tableHeight;\r\n        table.style.height = o.height ? tableHeight + 'px' : 'auto';\r\n        table.style.display = 'block';\r\n        table.style.overflowY = 'auto';\r\n        table.style.overflowX = o.width == DGTable.Width.SCROLL ? 'auto' : 'hidden';\r\n        fragment.appendChild(table);\r\n\r\n        // Create the \"tbody\" element\r\n        let tbody = createElement('div');\r\n        let $tbody = $(tbody);\r\n        tbody.className = o.tableClassName + '-body';\r\n        p.table = table;\r\n        p.tbody = tbody;\r\n        p.$table = $table;\r\n        p.$tbody = $tbody;\r\n\r\n        if (o.virtualTable) {\r\n            p.virtualVisibleRows = Math.ceil(p.visibleHeight / p.virtualRowHeightMin);\r\n        }\r\n\r\n        that._calculateVirtualHeight();\r\n\r\n        relativizeElement($tbody);\r\n        relativizeElement($table);\r\n\r\n        table.appendChild(tbody);\r\n        that.el.appendChild(fragment);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n * @deprecated\r\n */\r\nDGTable.prototype._renderSkeleton = function () {\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._updateLastCellWidthFromScrollbar = function(force) {\r\n\r\n    const p = this.p;\r\n\r\n    // Calculate scrollbar's width and reduce from lat column's width\r\n    let scrollbarWidth = p.table.offsetWidth - p.table.clientWidth;\r\n    if (scrollbarWidth != p.scrollbarWidth || force) {\r\n        p.scrollbarWidth = scrollbarWidth;\r\n        for (let i = 0; i < p.columns.length; i++) {\r\n            p.columns[i].actualWidthConsideringScrollbarWidth = null;\r\n        }\r\n\r\n        if (p.scrollbarWidth > 0 && p.visibleColumns.length > 0) {\r\n            // (There should always be at least 1 column visible, but just in case)\r\n            let lastColIndex = p.visibleColumns.length - 1;\r\n\r\n            p.visibleColumns[lastColIndex].actualWidthConsideringScrollbarWidth = p.visibleColumns[lastColIndex].actualWidth - p.scrollbarWidth;\r\n            let lastColWidth = p.visibleColumns[lastColIndex].actualWidthConsideringScrollbarWidth + 'px';\r\n            let tbodyChildren = p.tbody.childNodes;\r\n            for (let i = 0, count = tbodyChildren.length; i < count; i++) {\r\n                let row = tbodyChildren[i];\r\n                if (row.nodeType !== 1) continue;\r\n                row.childNodes[lastColIndex].style.width = lastColWidth;\r\n            }\r\n\r\n            p.headerRow.childNodes[lastColIndex].style.width = lastColWidth;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Explicitly set the width of the table based on the sum of the column widths\r\n * @private\r\n * @param {boolean} parentSizeMayHaveChanged Parent size may have changed, treat rendering accordingly\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._updateTableWidth = function (parentSizeMayHaveChanged) {\r\n    const o = this.o, p = this.p;\r\n    let width = this._calculateTbodyWidth();\r\n\r\n    p.tbody.style.minWidth = width + 'px';\r\n    p.headerRow.style.minWidth = (width + (p.scrollbarWidth || 0)) + 'px';\r\n\r\n    p.$table.off('scroll', p.onTableScrolledHorizontallyBound);\r\n\r\n    if (o.width == DGTable.Width.AUTO) {\r\n        // Update wrapper element's size to fully contain the table body\r\n\r\n        CssUtil.width(p.$table, CssUtil.outerWidth(p.$tbody));\r\n        CssUtil.width(this.$el, CssUtil.outerWidth(p.$table));\r\n\r\n    } else if (o.width == DGTable.Width.SCROLL) {\r\n\r\n        if (parentSizeMayHaveChanged) {\r\n            let lastScrollTop = p.table ? p.table.scrollTop : 0,\r\n                lastScrollLeft = p.table ? p.table.scrollLeft : 0;\r\n\r\n            // BUGFIX: Relayout before recording the widths\r\n            webkitRenderBugfix(this.el);\r\n\r\n            p.table.scrollTop = lastScrollTop;\r\n            p.table.scrollLeft = lastScrollLeft;\r\n            p.header.scrollLeft = lastScrollLeft;\r\n        }\r\n\r\n        p.$table.on('scroll', p.onTableScrolledHorizontallyBound);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {Boolean}\r\n */\r\nDGTable.prototype._isTableRtl = function() {\r\n    return this.p.$table.css('direction') === 'rtl';\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {Object} column column object\r\n * @returns {String}\r\n */\r\nDGTable.prototype._serializeColumnWidth = function(column) {\r\n    return column.widthMode === ColumnWidthMode.AUTO ? 'auto' :\r\n        column.widthMode === ColumnWidthMode.RELATIVE ? column.width * 100 + '%' :\r\n            column.width;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {HTMLElement} el\r\n */\r\nDGTable.prototype._cellMouseOverEvent = function(el) {\r\n    const o = this.o, p = this.p;\r\n\r\n    let elInner = el.firstChild;\r\n\r\n    if ((elInner.scrollWidth - elInner.clientWidth > 1) ||\r\n        (elInner.scrollHeight - elInner.clientHeight > 1)) {\r\n\r\n        this.hideCellPreview();\r\n        p.abortCellPreview = false;\r\n\r\n        let $el = $(el), $elInner = $(elInner);\r\n        let previewCell = createElement('div'), $previewCell = $(previewCell);\r\n        previewCell.innerHTML = el.innerHTML;\r\n        previewCell.className = o.cellPreviewClassName;\r\n\r\n        let isHeaderCell = $el.hasClass(o.tableClassName + '-header-cell');\r\n        if (isHeaderCell) {\r\n            previewCell.className += ' header';\r\n            if ($el.hasClass('sortable')) {\r\n                previewCell.className += ' sortable';\r\n            }\r\n\r\n            previewCell.draggable = true;\r\n\r\n            $(previewCell).on('mousedown', this._onMouseDownColumnHeader.bind(this))\r\n                .on('mousemove', this._onMouseMoveColumnHeader.bind(this))\r\n                .on('mouseup', this._onMouseUpColumnHeader.bind(this))\r\n                .on('mouseleave', this._onMouseLeaveColumnHeader.bind(this))\r\n                .on('touchstart', this._onTouchStartColumnHeader.bind(this))\r\n                .on('dragstart', this._onStartDragColumnHeader.bind(this))\r\n                .on('click', this._onClickColumnHeader.bind(this))\r\n                .on('contextmenu.dgtable', function (event) { event.preventDefault(); });\r\n            $(previewCell.firstChild)\r\n                .on('dragenter', this._onDragEnterColumnHeader.bind(this))\r\n                .on('dragover', this._onDragOverColumnHeader.bind(this))\r\n                .on('dragleave', this._onDragLeaveColumnHeader.bind(this))\r\n                .on('drop', this._onDropColumnHeader.bind(this));\r\n\r\n            if (hasIeDragAndDropBug) {\r\n                $(previewCell).on('selectstart', (function(evt) {\r\n                    evt.preventDefault();\r\n                    this.dragDrop();\r\n                    return false;\r\n                }).bind(previewCell));\r\n            }\r\n        }\r\n\r\n        let paddingL = parseFloat($el.css('padding-left')) || 0,\r\n            paddingR = parseFloat($el.css('padding-right')) || 0,\r\n            paddingT = parseFloat($el.css('padding-top')) || 0,\r\n            paddingB = parseFloat($el.css('padding-bottom')) || 0;\r\n\r\n        let requiredWidth = elInner.scrollWidth + (el.clientWidth - elInner.offsetWidth);\r\n\r\n        let borderBox = $el.css('box-sizing') === 'border-box';\r\n        if (borderBox) {\r\n            $previewCell.css('box-sizing', 'border-box');\r\n        } else {\r\n            requiredWidth -= paddingL + paddingR;\r\n            $previewCell.css('margin-top', parseFloat($(el).css('border-top-width')) || 0);\r\n        }\r\n\r\n        if (!p.transparentBgColor1) {\r\n            // Detect browser's transparent spec\r\n            let tempDiv = document.createElement('div');\r\n            tempDiv.style.backgroundColor = 'transparent';\r\n            p.transparentBgColor1 = $(tempDiv).css('background-color');\r\n            tempDiv.style.backgroundColor = 'rgba(0,0,0,0)';\r\n            p.transparentBgColor2 = $(tempDiv).css('background-color');\r\n        }\r\n\r\n        let css = {\r\n            'box-sizing': borderBox ? 'border-box' : 'content-box',\r\n            'width': requiredWidth,\r\n            'min-height': CssUtil.height($el),\r\n            'padding-left': paddingL,\r\n            'padding-right': paddingR,\r\n            'padding-top': paddingT,\r\n            'padding-bottom': paddingB,\r\n            'overflow': 'hidden',\r\n            'position': 'absolute',\r\n            'z-index': '-1',\r\n            'left': '0',\r\n            'top': '0',\r\n            'cursor': 'default',\r\n        };\r\n\r\n        if (css) {\r\n            let bgColor = $(el).css('background-color');\r\n            if (bgColor === p.transparentBgColor1 || bgColor === p.transparentBgColor2) {\r\n                bgColor = $(el.parentNode).css('background-color');\r\n            }\r\n            if (bgColor === p.transparentBgColor1 || bgColor === p.transparentBgColor2) {\r\n                bgColor = '#fff';\r\n            }\r\n            css['background-color'] = bgColor;\r\n        }\r\n\r\n        $previewCell.css(css);\r\n\r\n        this.el.appendChild(previewCell);\r\n\r\n        $(previewCell.firstChild).css({\r\n            'direction': $elInner.css('direction'),\r\n            'white-space': $elInner.css('white-space'),\r\n        });\r\n\r\n        if (isHeaderCell) {\r\n            // Disable these to allow our own context menu events without interruption\r\n            $previewCell.css({\r\n                '-webkit-touch-callout': 'none',\r\n                '-webkit-user-select': 'none',\r\n                '-moz-user-select': 'none',\r\n                '-ms-user-select': 'none',\r\n                '-o-user-select': 'none',\r\n                'user-select': 'none',\r\n            });\r\n        }\r\n\r\n        previewCell['rowIndex'] = el.parentNode['rowIndex'];\r\n        let physicalRowIndex = previewCell['physicalRowIndex'] = el.parentNode['physicalRowIndex'];\r\n        previewCell['columnName'] = p.visibleColumns[nativeIndexOf.call(el.parentNode.childNodes, el)].name;\r\n\r\n        try {\r\n            let selection = SelectionHelper.saveSelection(el);\r\n            if (selection)\r\n                SelectionHelper.restoreSelection(previewCell, selection);\r\n        } catch (ignored) { /* we're ok with this */ }\r\n        \r\n        this.trigger(\r\n            'cellpreview',\r\n            previewCell.firstChild,\r\n            physicalRowIndex == null ? null : physicalRowIndex,\r\n            previewCell['columnName'],\r\n            physicalRowIndex == null ? null : p.rows[physicalRowIndex],\r\n            el,\r\n        );\r\n\r\n        if (p.abortCellPreview) {\r\n            $previewCell.remove();\r\n            return;\r\n        }\r\n\r\n        let $parent = this.$el;\r\n        let $scrollParent = $parent[0] === window ? $(document) : $parent;\r\n\r\n        let offset = $el.offset();\r\n        let parentOffset = $parent.offset();\r\n        let rtl = $el.css('float') === 'right';\r\n        let prop = rtl ? 'right' : 'left';\r\n\r\n        // Handle RTL, go from the other side\r\n        if (rtl) {\r\n            let windowWidth = $(window).width();\r\n            offset.right = windowWidth - (offset.left + CssUtil.outerWidth($el));\r\n            parentOffset.right = windowWidth - (parentOffset.left + CssUtil.outerWidth($parent));\r\n        }\r\n\r\n        // If the parent has borders, then it would offset the offset...\r\n        offset.left -= parseFloat($parent.css('border-left-width')) || 0;\r\n        offset.right -= parseFloat($parent.css('border-right-width')) || 0;\r\n        offset.top -= parseFloat($parent.css('border-top-width')) || 0;\r\n\r\n        // Handle border widths of the element being offset\r\n        offset[prop] += parseFloat($(el).css('border-' + prop + '-width')) || 0;\r\n        offset.top += parseFloat($(el).css('border-top-width')) || parseFloat($(el).css('border-bottom-width')) || 0;\r\n\r\n        // Subtract offsets to get offset relative to parent\r\n        offset.left -= parentOffset.left;\r\n        offset.right -= parentOffset.right;\r\n        offset.top -= parentOffset.top;\r\n\r\n        // Constrain horizontally\r\n        let minHorz = 0,\r\n            maxHorz = $parent - CssUtil.outerWidth($previewCell);\r\n        offset[prop] = offset[prop] < minHorz ?\r\n            minHorz :\r\n            (offset[prop] > maxHorz ? maxHorz : offset[prop]);\r\n\r\n        // Constrain vertically\r\n        let totalHeight = CssUtil.outerHeight($el);\r\n        let maxTop = $scrollParent.scrollTop() + CssUtil.innerHeight($parent) - totalHeight;\r\n        if (offset.top > maxTop) {\r\n            offset.top = Math.max(0, maxTop);\r\n        }\r\n\r\n        // Apply css to preview cell\r\n        let previewCss = {\r\n            top: offset.top,\r\n            'z-index': 9999,\r\n        };\r\n        previewCss[prop] = offset[prop];\r\n\r\n        $previewCell.css(previewCss);\r\n\r\n        previewCell['__cell'] = el;\r\n        p.$cellPreviewCell = $previewCell;\r\n        el['__previewCell'] = previewCell;\r\n\r\n        p._bindCellHoverOut(el);\r\n        p._bindCellHoverOut(previewCell);\r\n\r\n        $previewCell.on('mousewheel', (event) => {\r\n            let originalEvent = event.originalEvent;\r\n            let xy = originalEvent.wheelDelta || -originalEvent.detail,\r\n                x = originalEvent.wheelDeltaX || (originalEvent.axis == 1 ? xy : 0),\r\n                y = originalEvent.wheelDeltaY || (originalEvent.axis == 2 ? xy : 0);\r\n\r\n            if (xy) {\r\n                this.hideCellPreview();\r\n            }\r\n\r\n            if (y && p.table.scrollHeight > p.table.clientHeight) {\r\n                let scrollTop = (y * -1) + p.$table.scrollTop();\r\n                p.$table.scrollTop(scrollTop);\r\n            }\r\n\r\n            if (x && p.table.scrollWidth > p.table.clientWidth) {\r\n                let scrollLeft = (x * -1) + p.$table.scrollLeft();\r\n                p.$table.scrollLeft(scrollLeft);\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {HTMLElement} el\r\n */\r\nDGTable.prototype._cellMouseOutEvent = function(_el) {\r\n    this.hideCellPreview();\r\n};\r\n\r\n/**\r\n * Hides the current cell preview,\r\n * or prevents the one that is currently trying to show (in the 'cellpreview' event)\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.hideCellPreview = function() {\r\n    const p = this.p;\r\n    \r\n    if (p.$cellPreviewCell) {\r\n        let previewCell = p.$cellPreviewCell[0];\r\n        let origCell = previewCell['__cell'];\r\n        let selection;\r\n        \r\n        try {\r\n            selection = SelectionHelper.saveSelection(previewCell);\r\n        } catch (ignored) { /* we're ok with this */ }\r\n        \r\n        p.$cellPreviewCell.remove();\r\n        p._unbindCellHoverOut(origCell);\r\n        p._unbindCellHoverOut(previewCell);\r\n        \r\n        try {\r\n            if (selection)\r\n                SelectionHelper.restoreSelection(origCell, selection);\r\n        } catch (ignored) { /* we're ok with this */ }\r\n\r\n        this.trigger('cellpreviewdestroy', previewCell.firstChild, previewCell['physicalRowIndex'], previewCell['columnName'], origCell);\r\n\r\n        origCell['__previewCell'] = null;\r\n        previewCell['__cell'] = null;\r\n\r\n        p.$cellPreviewCell = null;\r\n        p.abortCellPreview = false;\r\n    } else {\r\n        p.abortCellPreview = true;\r\n    }\r\n    \r\n    return this;\r\n};\r\n\r\n// It's a shame the Google Closure Compiler does not support exposing a nested @param\r\n\r\n/**\r\n * @typedef {Object} SERIALIZED_COLUMN\r\n * @property {Number|null|undefined} [order=0]\r\n * @property {String|null|undefined} [width='auto']\r\n * @property {Boolean|null|undefined} [visible=true]\r\n * */\r\n\r\n/**\r\n * @typedef {Object} SERIALIZED_COLUMN_SORT\r\n * @property {String|null|undefined} [column='']\r\n * @property {Boolean|null|undefined} [descending=false]\r\n * */\r\n\r\n/**\r\n * @enum {ColumnWidthMode|number|undefined}\r\n * @const\r\n * @typedef {ColumnWidthMode}\r\n */\r\nconst ColumnWidthMode = {\r\n    /** @const*/ AUTO: 0,\r\n    /** @const*/ ABSOLUTE: 1,\r\n    /** @const*/ RELATIVE: 2,\r\n};\r\n\r\n/**\r\n * @enum {DGTable.Width|String|undefined}\r\n * @const\r\n * @typedef {DGTable.Width}\r\n */\r\nDGTable.Width = {\r\n    /** @const*/ NONE: 'none',\r\n    /** @const*/ AUTO: 'auto',\r\n    /** @const*/ SCROLL: 'scroll',\r\n};\r\n\r\n/**\r\n * @expose\r\n * @typedef {Object} COLUMN_SORT_OPTIONS\r\n * @property {String|null|undefined} column\r\n * @property {Boolean|null|undefined} [descending=false]\r\n * */\r\n\r\n/**\r\n * @expose\r\n * @typedef {Object} COLUMN_OPTIONS\r\n * @property {String|null|undefined} width\r\n * @property {String|null|undefined} name\r\n * @property {String|null|undefined} label\r\n * @property {String|null|undefined} dataPath - defaults to `name`\r\n * @property {String|null|undefined} comparePath - defaults to `dataPath`\r\n * @property {Number|String|null|undefined} comparePath\r\n * @property {Boolean|null|undefined} [resizable=true]\r\n * @property {Boolean|null|undefined} [movable=true]\r\n * @property {Boolean|null|undefined} [sortable=true]\r\n * @property {Boolean|null|undefined} [visible=true]\r\n * @property {String|null|undefined} [cellClasses]\r\n * @property {Boolean|null|undefined} [ignoreMin=false]\r\n * */\r\n\r\n/**\r\n * @typedef {Object} DGTable.Options\r\n * @property {COLUMN_OPTIONS[]} [columns]\r\n * @property {Number} [height]\r\n * @property {DGTable.Width} [width]\r\n * @property {Boolean|null|undefined} [virtualTable=true]\r\n * @property {Boolean|null|undefined} [resizableColumns=true]\r\n * @property {Boolean|null|undefined} [movableColumns=true]\r\n * @property {Number|null|undefined} [sortableColumns=1]\r\n * @property {Boolean|null|undefined} [adjustColumnWidthForSortArrow=true]\r\n * @property {Boolean|null|undefined} [relativeWidthGrowsToFillWidth=true]\r\n * @property {Boolean|null|undefined} [relativeWidthShrinksToFillWidth=false]\r\n * @property {Boolean|null|undefined} [convertColumnWidthsToRelative=false]\r\n * @property {Boolean|null|undefined} [autoFillTableWidth=false]\r\n * @property {String|null|undefined} [cellClasses]\r\n * @property {String|String[]|COLUMN_SORT_OPTIONS|COLUMN_SORT_OPTIONS[]} [sortColumn]\r\n * @property {Function|null|undefined} [cellFormatter=null]\r\n * @property {Function|null|undefined} [headerCellFormatter=null]\r\n * @property {Number|null|undefined} [rowsBufferSize=10]\r\n * @property {Number|null|undefined} [minColumnWidth=35]\r\n * @property {Number|null|undefined} [resizeAreaWidth=8]\r\n * @property {{function(string,boolean):{function(a:*,b:*):boolean}}} [onComparatorRequired]\r\n * @property {String|null|undefined} [resizerClassName=undefined]\r\n * @property {String|null|undefined} [tableClassName=undefined]\r\n * @property {Boolean|null|undefined} [allowCellPreview=true]\r\n * @property {Boolean|null|undefined} [allowHeaderCellPreview=true]\r\n * @property {String|null|undefined} [cellPreviewClassName=undefined]\r\n * @property {Boolean|null|undefined} [cellPreviewAutoBackground=true]\r\n * @property {Element|null|undefined} [el=undefined]\r\n * @property {String|null|undefined} [className=undefined]\r\n * @property {Function|null|undefined} [filter=undefined]\r\n * */\r\n\r\n/**\r\n * @typedef {{\r\n     *  currentTarget: Element,\r\n     *  data: Object.<string, *>,\r\n     *  delegateTarget: Element,\r\n     *  isDefaultPrevented: Boolean,\r\n     *  isImmediatePropagationStopped: Boolean,\r\n     *  isPropagationStopped: Boolean,\r\n     *  namespace: string,\r\n     *  originalEvent: MouseEvent|TouchEvent|Event,\r\n     *  pageX: Number,\r\n     *  pageY: Number,\r\n     *  preventDefault: Function,\r\n     *  props: Object.<string, *>,\r\n     *  relatedTarget: Element,\r\n     *  result: *,\r\n     *  stopImmediatePropagation: Function,\r\n     *  stopPropagation: Function,\r\n     *  target: Element,\r\n     *  timeStamp: Number,\r\n     *  type: string,\r\n     *  which: Number\r\n     * }} jQuery_Event\r\n * */\r\n\r\nif (!$.controls) {\r\n    $.controls = {};\r\n}\r\n\r\n$.controls.dgtable = DGTable;\r\n\r\nexport default DGTable;"],"names":["indexOf","Array","prototype","find","array","predicate","i","len","length","htmlEncode","text","replace","RowCollection","collection","Object","assign","initialize","apply","arguments","options","sortColumn","add","rows","at","splice","push","reset","filteredCollection","filterFunc","args","this","row","onComparatorRequired","onSort","nativeSort","sort","getDefaultComparator","column","descending","columnName","comparePath","split","pathLength","hasPath","lessVal","moreVal","leftRow","rightRow","leftVal","rightVal","ColumnCollection","silent","comparator","comparators","bind","call","value","get","name","getByOrder","order","normalizeOrder","ordered","col1","col2","getVisibleColumns","visible","getMaxOrder","moveColumn","src","dest","col","srcOrder","destOrder","$","jQuery","hasComputedStyle","document","defaultView","getComputedStyle","jQuerySupportsFractions","fn","jquery","cssExpands","sizeKeys","CssUtil","generateSizeFunction","key","cssExpand","inner","outer","el","Element","size","border","padding","style","currentStyle","isBoxing","includeMargins","parseFloat","margin","undefined","generatejQueryFunction","isArray","ret","slice","SelectionHelper","range","window","getSelection","getRangeAt","commonAncestorContainer","child","parent","parentNode","isChildOf","preSelectionRange","cloneRange","selectNodeContents","setEnd","startContainer","startOffset","start","toString","end","savedSel","node","charIndex","nodeStack","foundStart","stop","createRange","setStart","collapse","pop","nodeType","nextCharIndex","childNodes","sel","removeAllRanges","addRange","ByColumnFilter","keyword","actualVal","caseSensitive","toLowerCase","nativeIndexOf","userAgent","navigator","ieVersion","substr","hasIeDragAndDropBug","createElement","hasOwnProperty","relativizeElement","$el","item","css","DGTable","Function","concat","VERSION","that","o","p","events","addClass","className","data","on","destroy","onMouseMoveResizeAreaBound","_onMouseMoveResizeArea","onEndDragColumnHeaderBound","_onEndDragColumnHeader","onTableScrolledHorizontallyBound","_onTableScrolledHorizontally","tableSkeletonNeedsRendering","virtualTable","rowsBufferSize","minColumnWidth","Math","max","resizeAreaWidth","resizableColumns","movableColumns","sortableColumns","parseInt","adjustColumnWidthForSortArrow","convertColumnWidthsToRelative","autoFillTableWidth","cellClasses","resizerClassName","tableClassName","allowCellPreview","allowHeaderCellPreview","cellPreviewClassName","cellPreviewAutoBackground","width","Width","NONE","relativeWidthGrowsToFillWidth","relativeWidthShrinksToFillWidth","setCellFormatter","cellFormatter","setHeaderCellFormatter","headerCellFormatter","setFilter","filter","height","setColumns","columns","sortColumns","tmpSortColumns","dataPath","filteredRows","hoverMouseOverHandler","evt","relatedTarget","event","fromElement","contains","_cellMouseOverEvent","hoverMouseOutHandler","toElement","_cellMouseOutEvent","_bindCellHoverIn","addEventListener","_unbindCellHoverIn","removeEventListener","_bindCellHoverOut","_unbindCellHoverOut","attachEvent","detachEvent","eventName","callback","cb","once","off","callbacks","trigger","_parseColumnWidth","minWidth","widthSize","widthMode","ColumnWidthMode","AUTO","RELATIVE","ABSOLUTE","mode","_initColumnFromData","columnData","parsedWidth","ignoreMin","label","resizable","sortable","movable","close","remove","__removed","$resizer","$tbody","trs","_destroyHeaderCells","_unbindCellEventsForTable","$table","empty","workerListeners","j","worker","listener","_deferredRender","clearTimeout","prop","headerRow","rowCount","cells","cellCount","tbody","_unbindCellEventsForRow","rowToClean","render","offsetParent","setTimeout","renderedRows","_clearSortArrows","lastScrollTop","table","scrollTop","lastScrollLeft","scrollLeft","_renderSkeletonBase","_renderSkeletonBody","tableWidthChanged","_renderSkeletonHeaderCells","_updateLastCellWidthFromScrollbar","renderRows","html","append","header","_updateTableWidth","_showSortArrow","_onVirtualTableScrolled","firstVisible","floor","virtualRowHeightFirst","virtualRowHeight","lastVisible","ceil","visibleHeight","countToRemove","oldFirstVisible","oldLastVisible","tbodyChildNodes","min","removeChild","prepend","clearAndRender","first","last","top","physicalRowIndex","rowClassName","cellClassName","isDataFiltered","visibleColumns","isVirtual","colCount","colIndex","_finalWidth","actualWidthConsideringScrollbarWidth","actualWidth","bodyFragment","createDocumentFragment","virtualRowXAttr","_isTableRtl","rowData","cell","setAttribute","appendChild","innerHTML","_getHtmlForCell","position","_calculateVirtualHeight","virtualRowHeightLast","_calculateTbodyWidth","cellInner","$row","sumActualWidth","$thisWrapper","z-index","left","float","overflow","appendTo","body","fractionTest","hasFractions","round","outerWidth","scrollbarWidth","normalizedCols","normalizedColumn","_ensureVisibleColumns","addColumn","before","beforeColumn","to","removeColumn","colIdx","formatter","val","hadFilter","filterArgs","extend","_refilter","setColumnLabel","element","firstChild","textContent","destCol","headerCell","$headerRow","beforePos","fromPos","insertBefore","srcWidth","destWidth","tbodyChildren","count","currentSort","_tableSkeletonNeedsRendering","sorts","resort","setColumnVisible","isColumnVisible","setMinColumnWidth","getMinColumnWidth","setSortableColumns","getSortableColumns","setMovableColumns","getMovableColumns","setResizableColumns","getResizableColumns","setComparatorCallback","comparatorCallback","setColumnWidth","oldWidth","_serializeColumnWidth","newWidth","getColumnWidth","getColumnConfig","getColumnsConfig","config","getSortedColumns","sorted","getHtmlForCell","colValue","dataPathIndex","content","getRowYPos","rowIndex","offsetTop","getDataForRow","getRowCount","getIndexForRow","getFilteredRowCount","getIndexForFilteredRow","getDataForFilteredRow","getHeaderRowElement","_horizontalPadding","_horizontalBorderWidth","_calculateWidthAvailableForColumns","oldDisplay","display","detectedWidth","$header","$cells","$cell","getTextWidth","$tableWrapper","visibility","lastDetectedWidth","forceUpdate","renderColumns","sizeLeft","relatives","tableWidthBeforeCalculations","absWidthTotal","changedColumnIndexes","totalRelativePercentage","arrowProposedWidth","sizeLeftForRelative","clientWidth","minColumnWidthRelative","isNaN","delta","extraRelative","nonResizableTotal","sizeLeftToFill","conv","NaN","tableWidth","_resizeColumnElements","tableHeightChanged","innerHeight","outerHeight","addRows","firstRow","lastRow","removeRows","lastRowIndex","index","removeRow","refreshRow","isRowVisible","renderedRow","getRowElement","refreshAllVirtualRows","rowsToRender","setRows","getUrlForElementContent","id","blob","getElementById","Blob","BlobBuilder","global","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","builder","getBlob","URL","webkitURL","createObjectURL","isWorkerSupported","createWebWorker","url","Worker","postMessage","unbindWebWorker","abortCellPreview","hideCellPreview","cancelColumnResize","_event","_getColumnByResizePosition","e","rtl","$headerCell","target","closest","previousElementSibling","previousSibling","firstCol","mouseX","pageX","originalEvent","clientX","offset","_onTouchStartColumnHeader","currentTouchId","startTouch","changedTouches","identifier","tapAndHoldTimeout","$eventTarget","currentTarget","startPos","x","y","pageY","currentPos","unbind","fakeEvent","Event","extendObjects","each","which","one","preventDefault","sqrt","pow","abs","touch","_onMouseDownColumnHeader","selectedHeaderCell","commonAncestor","posCol","posRelative","resizerWidth","zIndex","ignored","_onMouseMoveColumnHeader","cursor","_onMouseUpColumnHeader","bounds","_onMouseLeaveColumnHeader","_onClickColumnHeader","_onStartDragColumnHeader","opacity","dragId","random","dataTransfer","setData","JSON","stringify","actualX","minX","baseX","sizeToSet","unNormalizedSizeToSet","_onDragEnterColumnHeader","dataTransferred","getData","parse","_onDragOverColumnHeader","_onDragLeaveColumnHeader","has","removeClass","_onDropColumnHeader","srcColName","destColName","srcCol","sortedColumns","arrows","arrow","scrollWidth","cellIndex","headerCells","headerCellClassName","prependTo","SCROLL","ieDragDropHandler","dragDrop","draggable","cellInside","-webkit-touch-callout","-webkit-user-select","-moz-user-select","-ms-user-select","-o-user-select","user-select","$dummyTbody","createDummyRow","$dummyWrapper","row1","row2","row3","virtualRowHeightMin","virtualRowHeightMax","fragment","tableHeight","overflowY","overflowX","virtualVisibleRows","_renderSkeleton","force","offsetWidth","lastColIndex","lastColWidth","parentSizeMayHaveChanged","offsetHeight","webkitRenderBugfix","elInner","scrollHeight","clientHeight","$elInner","previewCell","$previewCell","isHeaderCell","hasClass","paddingL","paddingR","paddingT","paddingB","requiredWidth","borderBox","transparentBgColor1","tempDiv","backgroundColor","transparentBgColor2","bgColor","selection","saveSelection","restoreSelection","$parent","$scrollParent","parentOffset","windowWidth","right","minHorz","maxHorz","totalHeight","maxTop","previewCss","$cellPreviewCell","xy","wheelDelta","detail","wheelDeltaX","axis","wheelDeltaY","_el","origCell","controls","dgtable"],"mappings":"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"}