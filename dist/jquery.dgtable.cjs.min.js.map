{"version":3,"file":"index.js","sources":["src/util.js","src/row_collection.js","src/column_collection.js","src/css_util.js","src/ScrollHelper.js","src/SelectionHelper.js","src/by_column_filter.js","src/index.js"],"sourcesContent":["'use strict';\r\n\r\nconst indexOf = Array.prototype.indexOf;\r\n\r\nexport const includes = function includes (array, item) {\r\n    return indexOf.call(array, item) >= 0;\r\n};\r\n\r\nexport const find = function find (array, predicate) {\r\n    for (let i = 0, len = array.length; i >= 0 && i < len; i += 1) {\r\n        if (predicate(array[i], i, array))\r\n            return array[i];\r\n    }\r\n};\r\n\r\nexport const htmlEncode = function htmlEncode (text) {\r\n    return text.replace(/&/g, \"&amp;\")\r\n        .replace(/</g, \"&lt;\")\r\n        .replace(/>/g, \"&gt;\")\r\n        .replace(/'/g, \"&#39;\")\r\n        .replace(/\"/g, \"&quot;\")\r\n        .replace(/\\n/g, '<br />');\r\n};\r\n","'use strict';\r\n\r\n// Define class RowCollection\r\nfunction RowCollection () {\r\n\r\n    // Instantiate an Array. Seems like the `.length = ` of an inherited Array does not work well.\r\n    // I will not use the IFRAME solution either in fear of memory leaks, and we're supporting large datasets...\r\n    let collection = [];\r\n\r\n    // Synthetically set the 'prototype'\r\n    Object.assign(collection, RowCollection.prototype);\r\n\r\n    // Call initializer\r\n    collection.initialize.apply(collection, arguments);\r\n\r\n    return collection;\r\n}\r\n\r\n// Inherit Array\r\nRowCollection.prototype = [];\r\n\r\nRowCollection.prototype.initialize = function (options) {\r\n\r\n    options = options || {};\r\n\r\n    /** @field {string} sortColumn */\r\n    this.sortColumn = options.sortColumn == null ? [] : options.sortColumn;\r\n};\r\n\r\n/**\r\n * @param {Object|Object[]} rows - row or array of rows to add to this collection\r\n * @param {number?} at - position to insert rows at\r\n */\r\nRowCollection.prototype.add = function (rows, at) {\r\n    let isArray = ('splice' in rows && 'length' in rows), i, len;\r\n    if (isArray) {\r\n        if (typeof at === 'number') {\r\n            for (i = 0, len = rows.length; i < len; i++) {\r\n                this.splice(at++, 0, rows[i]);\r\n            }\r\n        } else {\r\n            for (i = 0, len = rows.length; i < len; i++) {\r\n                this.push(rows[i]);\r\n            }\r\n        }\r\n    } else {\r\n        if (typeof at === 'number') {\r\n            this.splice(at, 0, rows);\r\n        } else {\r\n            this.push(rows);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * @param {Object|Object[]=} rows Row or array of rows to add to this collection\r\n */\r\nRowCollection.prototype.reset = function (rows) {\r\n    this.length = 0;\r\n    if (rows) {\r\n        this.add(rows);\r\n    }\r\n};\r\n\r\n/**\r\n * @param {Function} filterFunc - Filtering function\r\n * @param {Object|null} args? - Options to pass to the function\r\n * @returns {RowCollection} success result\r\n */\r\nRowCollection.prototype.filteredCollection = function (filterFunc, args) {\r\n    if (filterFunc && args) {\r\n        let rows = new RowCollection({ sortColumn: this.sortColumn });\r\n        \r\n        for (let i = 0, len = this.length, row; i < len; i++) {\r\n            row = this[i];\r\n            if (filterFunc(row, args)) {\r\n                row['__i'] = i;\r\n                rows.push(row);\r\n            }\r\n        }\r\n        return rows;\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\n/**\r\n * @type {Function|null|undefined}\r\n */\r\nRowCollection.prototype.onComparatorRequired = null;\r\n\r\n/**\r\n * @type {Function|null|undefined}\r\n */\r\nRowCollection.prototype.onSort = null;\r\n\r\nlet nativeSort = RowCollection.prototype.sort;\r\n\r\nfunction getDefaultComparator(column, descending) {\r\n    let columnName = column.column;\r\n    let comparePath = column.comparePath || columnName;\r\n    if (typeof comparePath === 'string') {\r\n        comparePath = comparePath.split('.');\r\n    }\r\n    let pathLength = comparePath.length,\r\n        hasPath = pathLength > 1,\r\n        i;\r\n\r\n    let lessVal = descending ? 1 : -1, moreVal = descending ? -1 : 1;\r\n    return function(leftRow, rightRow) {\r\n        let leftVal = leftRow[comparePath[0]],\r\n            rightVal = rightRow[comparePath[0]];\r\n        if (hasPath) {\r\n            for (i = 1; i < pathLength; i++) {\r\n                leftVal = leftVal && leftVal[comparePath[i]];\r\n                rightVal = rightVal && rightVal[comparePath[i]];\r\n            }\r\n        }\r\n        if (leftVal === rightVal) return 0;\r\n        if (leftVal == null) return lessVal;\r\n        if (leftVal < rightVal) return lessVal;\r\n        return moreVal;\r\n    };\r\n}\r\n\r\n/**\r\n * @param {Boolean=false} silent\r\n * @returns {RowCollection} self\r\n */\r\nRowCollection.prototype.sort = function (silent) {\r\n    if (this.sortColumn.length) {\r\n        let comparators = [], i, comparator;\r\n\r\n        for (i = 0; i < this.sortColumn.length; i++) {\r\n            comparator = null;\r\n            if (this.onComparatorRequired) {\r\n                comparator = this.onComparatorRequired(this.sortColumn[i].column, this.sortColumn[i].descending);\r\n            }\r\n            if (!comparator) {\r\n                comparator = getDefaultComparator(this.sortColumn[i], this.sortColumn[i].descending);\r\n            }\r\n            comparators.push(comparator.bind(this));\r\n        }\r\n\r\n        if (comparators.length === 1) {\r\n            nativeSort.call(this, comparators[0]);\r\n        } else {\r\n            let len = comparators.length,\r\n                value;\r\n\r\n            comparator = function(leftRow, rightRow) {\r\n                for (i = 0; i < len; i++) {\r\n                    value = comparators[i](leftRow, rightRow);\r\n                    if (value !== 0) {\r\n                        return value;\r\n                    }\r\n                }\r\n                return value;\r\n            };\r\n\r\n            nativeSort.call(this, comparator);\r\n        }\r\n\r\n        if (!silent) {\r\n            if (this.onSort) {\r\n                this.onSort();\r\n            }\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\nexport default RowCollection;","'use strict';\r\n\r\n// Define class RowCollection\r\nfunction ColumnCollection () {\r\n\r\n    // Instantiate an Array. Seems like the `.length = ` of an inherited Array does not work well.\r\n    // I will not use the IFRAME solution either in fear of memory leaks, and we're supporting large datasets...\r\n    let collection = [];\r\n\r\n    // Synthetically set the 'prototype'\r\n    Object.assign(collection, ColumnCollection.prototype);\r\n\r\n    // Call initializer\r\n    collection.initialize.apply(collection, arguments);\r\n\r\n    return collection;\r\n}\r\n\r\n// Inherit Array\r\nColumnCollection.prototype = [];\r\n\r\nColumnCollection.prototype.initialize = function () {\r\n\r\n};\r\n\r\n/**\r\n * Get the column by this name\r\n * @param {String} column column name\r\n * @returns {Object} the column object\r\n */\r\nColumnCollection.prototype.get = function (column) {\r\n    for (let i = 0, len = this.length; i < len; i++) {\r\n        if (this[i].name == column) {\r\n            return this[i];\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Get the index of the column by this name\r\n * @param {String} column column name\r\n * @returns {int} the index of this column\r\n */\r\nColumnCollection.prototype.indexOf = function (column) {\r\n    for (let i = 0, len = this.length; i < len; i++) {\r\n        if (this[i].name == column) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n};\r\n\r\n/**\r\n * Get the column by the specified order\r\n * @param {Number} order the column's order\r\n * @returns {Object} the column object\r\n */\r\nColumnCollection.prototype.getByOrder = function (order) {\r\n    for (let i = 0, len = this.length; i < len; i++) {\r\n        if (this[i].order == order) {\r\n            return this[i];\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Normalize order\r\n * @returns {ColumnCollection} self\r\n */\r\nColumnCollection.prototype.normalizeOrder = function () {\r\n    let ordered = [], i;\r\n    for (i = 0; i < this.length; i++) {\r\n        ordered.push(this[i]);\r\n    }\r\n    ordered.sort(function(col1, col2){ return col1.order < col2.order ? -1 : (col1.order > col2.order ? 1 : 0); });\r\n    for (i = 0; i < ordered.length; i++) {\r\n        ordered[i].order = i;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Get the array of visible columns, order by the order property\r\n * @returns {Array<Object>} ordered array of visible columns\r\n */\r\nColumnCollection.prototype.getVisibleColumns = function () {\r\n    let visible = [];\r\n    for (let i = 0, column; i < this.length; i++) {\r\n        column = this[i];\r\n        if (column.visible) {\r\n            visible.push(column);\r\n        }\r\n    }\r\n    visible.sort((col1, col2) => col1.order < col2.order ? -1 : (col1.order > col2.order ? 1 : 0));\r\n    return visible;\r\n};\r\n\r\n/**\r\n * @returns {int} maximum order currently in the array\r\n */\r\nColumnCollection.prototype.getMaxOrder = function () {\r\n    let order = 0;\r\n    for (let i = 0, column; i < this.length; i++) {\r\n        column = this[i];\r\n        if (column.order > order) {\r\n            order = column.order;\r\n        }\r\n    }\r\n    return order;\r\n};\r\n\r\n/**\r\n * Move a column to a new spot in the collection\r\n * @param {Object} src the column to move\r\n * @param {Object} dest the destination column\r\n * @returns {ColumnCollection} self\r\n */\r\nColumnCollection.prototype.moveColumn = function (src, dest) {\r\n    if (src && dest) {\r\n        let srcOrder = src.order, destOrder = dest.order, i, col;\r\n        if (srcOrder < destOrder) {\r\n            for (i = srcOrder + 1; i <= destOrder; i++) {\r\n                col = this.getByOrder(i);\r\n                col.order--;\r\n            }\r\n        } else {\r\n            for (i = srcOrder - 1; i >= destOrder; i--) {\r\n                col = this.getByOrder(i);\r\n                col.order++;\r\n            }\r\n        }\r\n        src.order = destOrder;\r\n    }\r\n    return this;\r\n};\r\n\r\nexport default ColumnCollection;","/* eslint-env browser */\r\n\r\n'use strict';\r\n\r\nimport jQuery from 'jquery';\r\n\r\nconst $ = jQuery;\r\n\r\nconst hasComputedStyle = document.defaultView && document.defaultView.getComputedStyle;\r\n\r\nconst jQuerySupportsFractions = $ && $.fn.jquery >= '3';\r\n\r\nconst cssExpands = {\r\n    'width': [\r\n        'Left',\r\n        'Right',\r\n        'Width',\r\n    ],\r\n    'height': [\r\n        'Top',\r\n        'Bottom',\r\n        'Height',\r\n    ],\r\n};\r\n\r\nconst sizeKeys = ['width', 'height'];\r\n\r\nconst CssUtil = {};\r\n\r\nlet generateSizeFunction = function (key, cssExpand, inner, outer) {\r\n\r\n    return function () {\r\n        let el = arguments[0];\r\n        let value = arguments[1];\r\n\r\n        if (el && !(el instanceof Element) && 'length' in el) {\r\n            el = el[0];\r\n        }\r\n\r\n        if (!el) {\r\n            return null;\r\n        }\r\n\r\n        let style = hasComputedStyle ? document.defaultView.getComputedStyle(el) : el.currentStyle;\r\n        let isBoxing = style['boxSizing'] === 'border-box';\r\n        let size, border, padding;\r\n        let includeMargins = outer && arguments[2] === true || arguments[1] === true;\r\n\r\n        if (isBoxing || outer || inner) {\r\n            border = parseFloat(style['border' + cssExpand[0] + 'Width'] || 0)\r\n                + parseFloat(style['border' + cssExpand[1] + 'Width'] || 0);\r\n\r\n            padding = parseFloat(style['padding' + cssExpand[0]] || 0)\r\n                + parseFloat(style['padding' + cssExpand[1]] || 0);\r\n        }\r\n\r\n        let margin = includeMargins ?\r\n            (parseFloat(style['margin' + cssExpand[0]] || 0)\r\n            + parseFloat(style['margin' + cssExpand[1]] || 0)) : 0;\r\n\r\n        if (value == undefined) {\r\n            size = parseFloat(style[key]);\r\n\r\n            if (isBoxing) {\r\n\r\n                if (padding + border > size) {\r\n                    size = padding + border;\r\n                }\r\n\r\n                if (outer) {\r\n                    if (includeMargins) {\r\n                        size += margin;\r\n                    }\r\n                }\r\n                else if (inner) {\r\n                    size -= border;\r\n                }\r\n                else {\r\n                    size -= padding + border;\r\n                }\r\n\r\n            } else {\r\n\r\n                if (outer) {\r\n                    size += padding + border;\r\n\r\n                    if (includeMargins) {\r\n                        size += margin;\r\n                    }\r\n                }\r\n                else if (inner) {\r\n                    size += padding;\r\n                }\r\n\r\n            }\r\n\r\n            return size;\r\n        } else {\r\n            value = value || 0;\r\n            size = value;\r\n\r\n            if (isBoxing) {\r\n\r\n                if (outer) {\r\n                    if (includeMargins) {\r\n                        size -= margin;\r\n                    }\r\n                }\r\n                else if (inner) {\r\n                    size += border;\r\n                }\r\n                else {\r\n                    size += padding + border;\r\n                }\r\n\r\n            } else {\r\n\r\n                if (outer) {\r\n                    size -= padding + border;\r\n\r\n                    if (includeMargins) {\r\n                        size -= margin;\r\n                    }\r\n                }\r\n                else if (inner) {\r\n                    size -= padding;\r\n                }\r\n\r\n                if (size < 0) {\r\n                    size = 0;\r\n                }\r\n            }\r\n\r\n            el.style[key] = size + 'px';\r\n\r\n            return value;\r\n        }\r\n    };\r\n};\r\n\r\nlet generatejQueryFunction = function (key) {\r\n    return function () {\r\n        let collection = arguments[0];\r\n        if (!$.isArray(collection) && !(collection instanceof $)) {\r\n            collection = [collection];\r\n        }\r\n        \r\n        let ret = $.fn[key].apply(collection, Array.prototype.slice.call(arguments, 1));\r\n        \r\n        if (arguments.length > 1) {\r\n            return this;\r\n        }\r\n        \r\n        return ret;\r\n    };\r\n};\r\n\r\nfor (let i = 0; i < sizeKeys.length; i++) {\r\n    let key = sizeKeys[i];\r\n    let cssExpand = cssExpands[key];\r\n\r\n    if (jQuerySupportsFractions) {\r\n\r\n        CssUtil[key] = generatejQueryFunction(key);\r\n        CssUtil['inner' + cssExpand[2]] = generatejQueryFunction('inner' + cssExpand[2]);\r\n        CssUtil['outer' + cssExpand[2]] = generatejQueryFunction('outer' + cssExpand[2]);\r\n\r\n    } else {\r\n\r\n        CssUtil[key] = generateSizeFunction(key, cssExpand, false, false);\r\n        CssUtil['inner' + cssExpand[2]] = generateSizeFunction(key, cssExpand, true, false);\r\n        CssUtil['outer' + cssExpand[2]] = generateSizeFunction(key, cssExpand, false, true);\r\n\r\n    }\r\n}\r\n\r\n// Remove that huge function from memory\r\ngenerateSizeFunction = null;\r\n\r\nexport default CssUtil;","/* eslint-env browser */\r\n\r\nlet rtlScrollType;\r\n\r\nconst detectRtlScrollType = () => {\r\n    const definer = document.createElement('div');\r\n    definer.dir = 'rtl';\r\n    Object.assign(definer.style, {\r\n        direction: 'rtl',\r\n        fontSize: '14px',\r\n        width: '1px',\r\n        height: '1px',\r\n        position: 'absolute',\r\n        top: '-1000px',\r\n        overflow: 'scroll',\r\n    });\r\n    definer.textContent = 'A';\r\n    document.body.appendChild(definer);\r\n\r\n    let type = 'reverse';\r\n\r\n    if (definer.scrollLeft > 0) {\r\n        type = 'default';\r\n    } else {\r\n        definer.scrollLeft = 1;\r\n        if (definer.scrollLeft === 0) {\r\n            type = 'negative';\r\n        }\r\n    }\r\n\r\n    definer.parentNode.removeChild(definer);\r\n\r\n    return type;\r\n};\r\n\r\nclass ScrollHelper {\r\n\r\n    /**\r\n     * @param {HTMLElement} el\r\n     * @param {boolean|undefined} [rtl]\r\n     * @returns {number}\r\n     */\r\n    static normalizeScrollLeft(el, rtl) {\r\n        if (rtl === undefined) {\r\n            rtl = document.defaultView.getComputedStyle(el, null).direction === 'rtl';\r\n        }\r\n\r\n        if (rtl === true && rtlScrollType === undefined) {\r\n            rtlScrollType = detectRtlScrollType();\r\n        }\r\n\r\n        if (rtl) {\r\n            switch (rtlScrollType) {\r\n                case 'negative':\r\n                    return el.scrollLeft + el.scrollWidth - el.clientWidth;\r\n\r\n                case 'reverse':\r\n                    return el.scrollWidth - el.scrollLeft - el.clientWidth;\r\n\r\n                default:\r\n                    return el.scrollLeft;\r\n            }\r\n        } else {\r\n            return el.scrollLeft;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement} el\r\n     * @param {boolean|undefined} [rtl]\r\n     * @param {number} value\r\n     * @returns {number}\r\n     */\r\n    static denormalizeScrollLeft(el, rtl, value) {\r\n        if (rtl === undefined) {\r\n            rtl = document.defaultView.getComputedStyle(el, null).direction === 'rtl';\r\n        }\r\n\r\n        if (rtl === true && rtlScrollType === undefined) {\r\n            rtlScrollType = detectRtlScrollType();\r\n        }\r\n\r\n        if (rtl) {\r\n            switch (rtlScrollType) {\r\n                case 'negative':\r\n                    return value + el.scrollWidth - el.clientWidth;\r\n\r\n                case 'reverse':\r\n                    return el.scrollWidth - value - el.clientWidth;\r\n\r\n                default:\r\n                    return value;\r\n            }\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    static scrollLeftNormalized(el, x) {\r\n        if (x === undefined) {\r\n            return ScrollHelper.normalizeScrollLeft(el, undefined);\r\n        } else {\r\n            el.scrollLeft = ScrollHelper.denormalizeScrollLeft(el, undefined, x);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement} el\r\n     * @param {boolean|undefined} [rtl]\r\n     * @returns {number}\r\n     */\r\n    static normalizeScrollHorz(el, rtl) {\r\n        if (rtl === undefined) {\r\n            rtl = document.defaultView.getComputedStyle(el, null).direction === 'rtl';\r\n        }\r\n        if (rtl) {\r\n            return el.scrollWidth - el.clientWidth - ScrollHelper.normalizeScrollLeft(el, rtl);\r\n        } else {\r\n            return ScrollHelper.normalizeScrollLeft(el, rtl);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement} el\r\n     * @param {boolean|undefined} [rtl]\r\n     * @param {number} value\r\n     * @returns {number}\r\n     */\r\n    static denormalizeScrollHorz(el, rtl, value) {\r\n        if (rtl === undefined) {\r\n            rtl = document.defaultView.getComputedStyle(el, null).direction === 'rtl';\r\n        }\r\n\r\n        if (rtl) {\r\n            return ScrollHelper.denormalizeScrollLeft(el, rtl, el.scrollWidth - el.clientWidth - value);\r\n        } else {\r\n            return ScrollHelper.denormalizeScrollLeft(el, rtl, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement} el\r\n     * @param {number|undefined} [x]\r\n     * @returns {number|undefined}\r\n     */\r\n    static scrollHorzNormalized(el, x) {\r\n        if (x === undefined) {\r\n            return ScrollHelper.normalizeScrollHorz(el);\r\n        } else {\r\n            el.scrollLeft = ScrollHelper.denormalizeScrollHorz(el, undefined, x);\r\n        }\r\n    }\r\n}\r\n\r\nexport default ScrollHelper;\r\n","/* eslint-env browser */\r\n\r\n'use strict';\r\n\r\n// saveSelection/restoreSelection courtesy of Tim Down, with my improvements\r\n// https://stackoverflow.com/questions/13949059/persisting-the-changes-of-range-objects-after-selection-in-html/13950376#13950376\r\n\r\nfunction isChildOf(child, parent) {\r\n  while ((child = child.parentNode) && child !== parent); \r\n  return !!child; \r\n}\r\n\r\nclass SelectionHelper {\r\n    \r\n    static saveSelection(el) {\r\n        let range = window.getSelection().getRangeAt(0);\r\n        \r\n        if (el !== range.commonAncestorContainer && !isChildOf(range.commonAncestorContainer, el))\r\n            return null;\r\n        \r\n        let preSelectionRange = range.cloneRange();\r\n        preSelectionRange.selectNodeContents(el);\r\n        preSelectionRange.setEnd(range.startContainer, range.startOffset);\r\n        let start = preSelectionRange.toString().length;\r\n\r\n        return {\r\n            start: start,\r\n            end: start + range.toString().length,\r\n        };\r\n    }\r\n    \r\n    static restoreSelection(el, savedSel) {\r\n        let charIndex = 0;\r\n        let nodeStack = [el], node, foundStart = false, stop = false;\r\n        let range = document.createRange();\r\n        range.setStart(el, 0);\r\n        range.collapse(true);\r\n        \r\n        while (!stop && (node = nodeStack.pop())) {\r\n            if (node.nodeType == 3) {\r\n                let nextCharIndex = charIndex + node.length;\r\n                if (!foundStart && savedSel.start >= charIndex && savedSel.start <= nextCharIndex) {\r\n                    range.setStart(node, savedSel.start - charIndex);\r\n                    foundStart = true;\r\n                }\r\n                if (foundStart && savedSel.end >= charIndex && savedSel.end <= nextCharIndex) {\r\n                    range.setEnd(node, savedSel.end - charIndex);\r\n                    stop = true;\r\n                }\r\n                charIndex = nextCharIndex;\r\n            } else {\r\n                let i = node.childNodes.length;\r\n                while (i--) {\r\n                    nodeStack.push(node.childNodes[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        let sel = window.getSelection();\r\n        sel.removeAllRanges();\r\n        sel.addRange(range);\r\n    }\r\n}\r\n\r\nexport default SelectionHelper;\r\n","'use strict';\r\n\r\nfunction ByColumnFilter (row, args) {\r\n    \r\n    let column = args.column;\r\n    let keyword = args.keyword == null ? '' : args.keyword.toString();\r\n    \r\n    if (!keyword || !column) return true;\r\n\r\n    let actualVal = row[column];\r\n    if (actualVal == null) {\r\n        return false;\r\n    }\r\n    \r\n    actualVal = actualVal.toString();\r\n    \r\n    if (!args.caseSensitive) {\r\n        actualVal = actualVal.toLowerCase();\r\n        keyword = keyword.toLowerCase();\r\n    }\r\n    \r\n    return actualVal.indexOf(keyword) !== -1;\r\n}\r\n\r\nexport default ByColumnFilter;","/* eslint-env browser */\r\n\r\n'use strict';\r\n\r\nimport jQuery from 'jquery';\r\nimport { includes, find, htmlEncode } from './util';\r\nimport RowCollection from './row_collection';\r\nimport ColumnCollection from './column_collection';\r\nimport CssUtil from './css_util';\r\nimport SelectionHelper from './SelectionHelper';\r\nimport ScrollHelper from './ScrollHelper';\r\nimport ByColumnFilter from './by_column_filter';\r\n\r\nconst nativeIndexOf = Array.prototype.indexOf;\r\nconst $ = jQuery;\r\n\r\nlet userAgent = navigator.userAgent;\r\nlet ieVersion = userAgent.indexOf('MSIE ') != -1 ? parseFloat(userAgent.substr(userAgent.indexOf('MSIE ') + 5)) : null;\r\nlet hasIeDragAndDropBug = ieVersion && ieVersion < 10;\r\nlet createElement = document.createElement.bind(document);\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\nfunction webkitRenderBugfix(el) {\r\n    // BUGFIX: WebKit has a bug where it does not relayout, and this affects us because scrollbars \r\n    //   are still calculated even though they are not there yet. This is the last resort.\r\n    let oldDisplay = el.style.display;\r\n    el.style.display = 'none';\r\n    //noinspection BadExpressionStatementJS\r\n    el.offsetHeight; // No need to store this anywhere, the reference is enough\r\n    el.style.display = oldDisplay;\r\n    return el;\r\n}\r\n\r\nfunction relativizeElement($el) {\r\n    if (!includes(['relative', 'absolute', 'fixed'], $el.css('position'))) {\r\n        $el.css('position', 'relative');\r\n    }\r\n}\r\n\r\n/** @class DGTable */\r\nlet DGTable = function DGTable () {\r\n    if (!(this instanceof DGTable)) {\r\n        // Allow constructing without `new`\r\n        return new (Function.prototype.bind.apply(\r\n            DGTable,\r\n            [DGTable].concat(Array.prototype.slice.call(arguments, 0))));\r\n    }\r\n\r\n    this.initialize.apply(this, arguments);\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @type {string}\r\n */\r\nDGTable.VERSION = '@@VERSION';\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @type {string}\r\n */\r\nDGTable.prototype.VERSION = DGTable.VERSION;\r\n\r\n/**\r\n * @constructs\r\n * @param {DGTable.Options?} options - initialization options\r\n * @returns {DGTable}\r\n */\r\nDGTable.prototype.initialize = function (options) {\r\n    let that = this;\r\n\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {DGTable.Options}\r\n     * */\r\n    let o = that.o = {};\r\n\r\n    /**\r\n     * @private\r\n     * This is for encapsulating private data */\r\n    let p = that.p = {};\r\n\r\n    /** This is for encapsulating event callback */\r\n    p.events = {};\r\n\r\n    /**\r\n     * @public\r\n     * @expose\r\n     * */\r\n    that.el = (options.el && options.el instanceof Element) ? options.el : document.createElement('div');\r\n\r\n    /**\r\n     * @public\r\n     * @expose\r\n     * */\r\n    let $el = that.$el = $(that.el);\r\n    \r\n    if (that.el !== options.el) {\r\n        $el.addClass(options.className || 'dgtable-wrapper');\r\n    }\r\n\r\n    // Set control data\r\n    $el\r\n        .data('control', that)\r\n        .data('dgtable', that);\r\n\r\n    // For jQuery.UI or jquery.removeevent\r\n    $el.on('remove', function () {\r\n        that.destroy();\r\n    });\r\n\r\n    p.onMouseMoveResizeAreaBound = this._onMouseMoveResizeArea.bind(this);\r\n    p.onEndDragColumnHeaderBound = this._onEndDragColumnHeader.bind(this);\r\n    p.onTableScrolledHorizontallyBound = this._onTableScrolledHorizontally.bind(this);\r\n\r\n    this.$el.on('dragend', p.onEndDragColumnHeaderBound);\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} _tableSkeletonNeedsRendering */\r\n    p.tableSkeletonNeedsRendering = true;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} virtualTable */\r\n    o.virtualTable = options.virtualTable === undefined ? true : !!options.virtualTable;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Number} rowsBufferSize */\r\n    o.rowsBufferSize = options.rowsBufferSize || 3;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Number} minColumnWidth */\r\n    o.minColumnWidth = Math.max(options.minColumnWidth || 35, 0);\r\n\r\n    /**\r\n     * @private\r\n     * @field {Number} resizeAreaWidth */\r\n    o.resizeAreaWidth = options.resizeAreaWidth || 8;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} resizableColumns */\r\n    o.resizableColumns = options.resizableColumns === undefined ? true : !!options.resizableColumns;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} movableColumns */\r\n    o.movableColumns = options.movableColumns === undefined ? true : !!options.movableColumns;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Number} sortableColumns */\r\n    o.sortableColumns = options.sortableColumns === undefined ? 1 : (parseInt(options.sortableColumns, 10) || 1);\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} adjustColumnWidthForSortArrow */\r\n    o.adjustColumnWidthForSortArrow = options.adjustColumnWidthForSortArrow === undefined ? true : !!options.adjustColumnWidthForSortArrow;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} convertColumnWidthsToRelative */\r\n    o.convertColumnWidthsToRelative = options.convertColumnWidthsToRelative === undefined ? false : !!options.convertColumnWidthsToRelative;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} autoFillTableWidth */\r\n    o.autoFillTableWidth = options.autoFillTableWidth === undefined ? false : !!options.autoFillTableWidth;\r\n\r\n    /**\r\n     * @private\r\n     * @field {String} cellClasses */\r\n    o.cellClasses = options.cellClasses === undefined ? '' : options.cellClasses;\r\n\r\n    /**\r\n     * @private\r\n     * @field {String} resizerClassName */\r\n    o.resizerClassName = options.resizerClassName === undefined ? 'dgtable-resize' : options.resizerClassName;\r\n\r\n    /**\r\n     * @private\r\n     * @field {String} tableClassName */\r\n    o.tableClassName = options.tableClassName === undefined ? 'dgtable' : options.tableClassName;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} allowCellPreview */\r\n    o.allowCellPreview = options.allowCellPreview === undefined ? true : options.allowCellPreview;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} allowHeaderCellPreview */\r\n    o.allowHeaderCellPreview = options.allowHeaderCellPreview === undefined ? true : options.allowHeaderCellPreview;\r\n\r\n    /**\r\n     * @private\r\n     * @field {String} cellPreviewClassName */\r\n    o.cellPreviewClassName = options.cellPreviewClassName === undefined ? 'dgtable-cell-preview' : options.cellPreviewClassName;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} cellPreviewAutoBackground */\r\n    o.cellPreviewAutoBackground = options.cellPreviewAutoBackground === undefined ? true : options.cellPreviewAutoBackground;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Function(String,Boolean)Function(a,b)Boolean} onComparatorRequired */\r\n    o.onComparatorRequired = options.onComparatorRequired === undefined ? null : options.onComparatorRequired;\r\n    if (!o.onComparatorRequired && typeof options['comparatorCallback'] === 'function') {\r\n        o.onComparatorRequired = options['comparatorCallback'];\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} width */\r\n    o.width = options.width === undefined ? DGTable.Width.NONE : options.width;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} relativeWidthGrowsToFillWidth */\r\n    o.relativeWidthGrowsToFillWidth = options.relativeWidthGrowsToFillWidth === undefined ? true : !!options.relativeWidthGrowsToFillWidth;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} relativeWidthShrinksToFillWidth */\r\n    o.relativeWidthShrinksToFillWidth = options.relativeWidthShrinksToFillWidth === undefined ? false : !!options.relativeWidthShrinksToFillWidth;\r\n\r\n    this.setCellFormatter(options.cellFormatter);\r\n    this.setHeaderCellFormatter(options.headerCellFormatter);\r\n    this.setFilter(options.filter);\r\n\r\n    /** @private\r\n     * @field {Number} height */\r\n    o.height = options.height;\r\n\r\n    // Prepare columns\r\n    that.setColumns(options.columns || [], false);\r\n\r\n    // Set sorting columns\r\n    let sortColumns = [];\r\n\r\n    if (options.sortColumn) {\r\n\r\n        let tmpSortColumns = options.sortColumn;\r\n\r\n        if (tmpSortColumns && typeof tmpSortColumns !== 'object') {\r\n            tmpSortColumns = [tmpSortColumns];\r\n        }\r\n\r\n        if (tmpSortColumns instanceof Array ||\r\n            typeof tmpSortColumns === 'object') {\r\n\r\n            for (let i = 0, len = tmpSortColumns.length; i < len; i++) {\r\n                let sortColumn = tmpSortColumns[i];\r\n                if (typeof sortColumn === 'string') {\r\n                    sortColumn = { column: sortColumn, descending: false };\r\n                }\r\n                let col = p.columns.get(sortColumn.column);\r\n                sortColumns.push({\r\n                    column: sortColumn.column,\r\n                    comparePath: col.comparePath || col.dataPath,\r\n                    descending: sortColumn.descending,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @field {RowCollection} _rows */\r\n    p.rows = new RowCollection({ sortColumn: sortColumns });\r\n    p.rows.onComparatorRequired = function(column, descending){\r\n        if (o.onComparatorRequired) {\r\n            return o.onComparatorRequired(column, descending);\r\n        }\r\n    };\r\n\r\n    /** @private\r\n     * @field {RowCollection} _filteredRows */\r\n    p.filteredRows = null;\r\n\r\n    /*\r\n     Setup hover mechanism.\r\n     We need this to be high performance, as there may be MANY cells to call this on, on creation and destruction.\r\n     Using native events to spare the overhead of jQuery's event binding, and even just the creation of the jQuery collection object.\r\n     */\r\n\r\n    /**\r\n     * @param {MouseEvent} evt\r\n     * @this {HTMLElement}\r\n     * */\r\n    let hoverMouseOverHandler = function (evt) {\r\n        evt = evt || event;\r\n        let relatedTarget = evt.fromElement || evt.relatedTarget;\r\n        if (relatedTarget == this || $.contains(this, relatedTarget)) return;\r\n        if (this['__previewCell'] && (relatedTarget == this['__previewCell'] || $.contains(this['__previewCell'], relatedTarget))) return;\r\n        that._cellMouseOverEvent.call(that, this);\r\n    };\r\n\r\n    /**\r\n     * @param {MouseEvent} evt\r\n     * @this {HTMLElement}\r\n     * */\r\n    let hoverMouseOutHandler = function (evt) {\r\n        evt = evt || event;\r\n        let relatedTarget = evt.toElement || evt.relatedTarget;\r\n        if (relatedTarget == this || $.contains(this, relatedTarget)) return;\r\n        if (this['__previewCell'] && (relatedTarget == this['__previewCell'] || $.contains(this['__previewCell'], relatedTarget))) return;\r\n        that._cellMouseOutEvent.call(that, this);\r\n    };\r\n\r\n    if ('addEventListener' in window) {\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * */\r\n        p._bindCellHoverIn = function (el) {\r\n            if (!el['__hoverIn']) {\r\n                el.addEventListener('mouseover', el['__hoverIn'] = hoverMouseOverHandler.bind(el));\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * */\r\n        p._unbindCellHoverIn = function (el) {\r\n            if (el['__hoverIn']) {\r\n                el.removeEventListener('mouseover', el['__hoverIn']);\r\n                el['__hoverIn'] = null;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * @returns {DGTable} self\r\n         * */\r\n        p._bindCellHoverOut = function (el) {\r\n            if (!el['__hoverOut']) {\r\n                el.addEventListener('mouseout', el['__hoverOut'] = hoverMouseOutHandler.bind(el['__cell'] || el));\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * @returns {DGTable} self\r\n         * */\r\n        p._unbindCellHoverOut = function (el) {\r\n            if (el['__hoverOut']) {\r\n                el.removeEventListener('mouseout', el['__hoverOut']);\r\n                el['__hoverOut'] = null;\r\n            }\r\n            return this;\r\n        };\r\n\r\n    } else {\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * */\r\n        p._bindCellHoverIn = function (el) {\r\n            if (!el['__hoverIn']) {\r\n                el.attachEvent('mouseover', el['__hoverIn'] = hoverMouseOverHandler.bind(el));\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * */\r\n        p._unbindCellHoverIn = function (el) {\r\n            if (el['__hoverIn']) {\r\n                el.detachEvent('mouseover', el['__hoverIn']);\r\n                el['__hoverIn'] = null;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * */\r\n        p._bindCellHoverOut = function (el) {\r\n            if (!el['__hoverOut']) {\r\n                el.attachEvent('mouseout', el['__hoverOut'] = hoverMouseOutHandler.bind(el['__cell'] || el));\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * @returns {DGTable} self\r\n         * */\r\n        p._unbindCellHoverOut = function (el) {\r\n            if (el['__hoverOut']) {\r\n                el.detachEvent('mouseout', el['__hoverOut']);\r\n                el['__hoverOut'] = null;\r\n            }\r\n            return this;\r\n        };\r\n\r\n    }\r\n};\r\n\r\n/**\r\n * Add an event listener\r\n * @public\r\n * @expose\r\n * @param {String} eventName\r\n * @param {Function} callback\r\n * @returns {DGTable}\r\n */\r\nDGTable.prototype.on = function (eventName, callback) {\r\n    let that = this, events = that.p.events;\r\n\r\n    if (typeof callback !== 'function')\r\n        return that;\r\n\r\n    if (!hasOwnProperty.call(events, eventName))\r\n        events[eventName] = [];\r\n\r\n    events[eventName].push({\r\n        cb: callback,\r\n        once: false,\r\n    });\r\n\r\n    return that;\r\n};\r\n\r\n/**\r\n * Add an event listener for a one shot\r\n * @public\r\n * @expose\r\n * @param {String} eventName\r\n * @param {Function} callback\r\n * @returns {DGTable}\r\n */\r\nDGTable.prototype.once = function (eventName, callback) {\r\n    let that = this, events = that.p.events;\r\n\r\n    if (typeof callback !== 'function')\r\n        return that;\r\n\r\n    if (!hasOwnProperty.call(events, eventName))\r\n        events[eventName] = [];\r\n\r\n    events[eventName].push({\r\n        cb: callback,\r\n        once: true,\r\n    });\r\n\r\n    return that;\r\n};\r\n\r\n/**\r\n * Remove an event listener\r\n * @public\r\n * @expose\r\n * @param {String} eventName\r\n * @param {Function} callback\r\n * @returns {DGTable}\r\n */\r\nDGTable.prototype.off = function (eventName, callback) {\r\n    let events = this.p.events;\r\n\r\n    if (!hasOwnProperty.call(events, eventName))\r\n        return this;\r\n\r\n    let callbacks = events[eventName];\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        let item = callbacks[i];\r\n        if (callback && item.cb !== callback) continue;\r\n        callbacks.splice(i--, 1);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nDGTable.prototype.trigger = function (eventName) {\r\n    let events = this.p.events;\r\n\r\n    if (hasOwnProperty.call(events, eventName)) {\r\n        let callbacks = events[eventName];\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            let item = callbacks[i];\r\n            if (item.once) {\r\n                callbacks.splice(i--, 1);\r\n            }\r\n            item.cb.apply(this, Array.prototype.slice.call(arguments, 1));\r\n        }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Detect column width mode\r\n * @private\r\n * @param {Number|String} width\r\n * @param {Number} minWidth\r\n * @returns {Object} parsed width\r\n */\r\nDGTable.prototype._parseColumnWidth = function (width, minWidth) {\r\n\r\n    let widthSize = Math.max(0, parseFloat(width)),\r\n        widthMode = ColumnWidthMode.AUTO; // Default\r\n\r\n    if (widthSize > 0) {\r\n        // Well, it's sure is not AUTO, as we have a value\r\n\r\n        if (width == widthSize + '%') {\r\n            // It's a percentage!\r\n\r\n            widthMode = ColumnWidthMode.RELATIVE;\r\n            widthSize /= 100;\r\n        } else if (widthSize > 0 && widthSize < 1) {\r\n            // It's a decimal value, as a relative value!\r\n\r\n            widthMode = ColumnWidthMode.RELATIVE;\r\n        } else {\r\n            // It's an absolute size!\r\n\r\n            if (widthSize < minWidth) {\r\n                widthSize = minWidth;\r\n            }\r\n            widthMode = ColumnWidthMode.ABSOLUTE;\r\n        }\r\n    }\r\n\r\n    return { width: widthSize, mode: widthMode };\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {COLUMN_OPTIONS} columnData\r\n */\r\nDGTable.prototype._initColumnFromData = function(columnData) {\r\n\r\n    let parsedWidth = this._parseColumnWidth(columnData.width, columnData.ignoreMin ? 0 : this.o.minColumnWidth);\r\n\r\n    let col = {\r\n        name: columnData.name,\r\n        label: columnData.label === undefined ? columnData.name : columnData.label,\r\n        width: parsedWidth.width,\r\n        widthMode: parsedWidth.mode,\r\n        resizable: columnData.resizable === undefined ? true : columnData.resizable,\r\n        sortable: columnData.sortable === undefined ? true : columnData.sortable,\r\n        movable: columnData.movable === undefined ? true : columnData.movable,\r\n        visible: columnData.visible === undefined ? true : columnData.visible,\r\n        cellClasses: columnData.cellClasses === undefined ? this.o.cellClasses : columnData.cellClasses,\r\n        ignoreMin: columnData.ignoreMin === undefined ? false : !!columnData.ignoreMin,\r\n    };\r\n\r\n    col.dataPath = columnData.dataPath === undefined ? col.name : columnData.dataPath;\r\n    col.comparePath = columnData.comparePath === undefined ? col.dataPath : columnData.comparePath;\r\n\r\n    if (typeof col.dataPath === 'string') {\r\n        col.dataPath = col.dataPath.split('.');\r\n    }\r\n    if (typeof col.comparePath === 'string') {\r\n        col.comparePath = col.comparePath.split('.');\r\n    }\r\n\r\n    return col;\r\n};\r\n\r\n/**\r\n * Destroy, releasing all memory, events and DOM elements\r\n * @public\r\n * @expose\r\n */\r\nDGTable.prototype.close = DGTable.prototype.remove = DGTable.prototype.destroy = function () {\r\n\r\n    let that = this,\r\n        p = that.p || {},\r\n        $el = that.$el;\r\n\r\n    if (that.__removed) {\r\n        return that;\r\n    }\r\n\r\n    if (p.$resizer) {\r\n        p.$resizer.remove();\r\n        p.$resizer = null;\r\n    }\r\n\r\n    if (p.$tbody) {\r\n        let trs = p.$tbody[0].childNodes;\r\n        for (let i = 0, len = trs.length; i < len; i++) {\r\n            that.trigger('rowdestroy', trs[i]);\r\n        }\r\n    }\r\n\r\n    // Using quotes for __super__ because Google Closure Compiler has a bug...\r\n\r\n    this._destroyHeaderCells()._unbindCellEventsForTable();\r\n    if (p.$table) {\r\n        p.$table.empty();\r\n    }\r\n    if (p.$tbody) {\r\n        p.$tbody.empty();\r\n    }\r\n\r\n    if (p.workerListeners) {\r\n        for (let j = 0; j < p.workerListeners.length; j++) {\r\n            let worker = p.workerListeners[j];\r\n            worker.worker.removeEventListener('message', worker.listener, false);\r\n        }\r\n        p.workerListeners.length = 0;\r\n    }\r\n\r\n    p.rows.length = p.columns.length = 0;\r\n\r\n    if (p._deferredRender) {\r\n        clearTimeout(p._deferredRender);\r\n    }\r\n\r\n    // Cleanup\r\n    for (let prop in that) {\r\n        if (hasOwnProperty.call(that, prop)) {\r\n            that[prop] = null;\r\n        }\r\n    }\r\n\r\n    that.__removed = true;\r\n\r\n    if ($el) {\r\n        $el.remove();\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._unbindCellEventsForTable = function() {\r\n    const p = this.p;\r\n    \r\n    if (p.headerRow) {\r\n        for (let i = 0, rows = p.headerRow.childNodes, rowCount = rows.length; i < rowCount; i++) {\r\n            let rowToClean = rows[i];\r\n            for (let j = 0, cells = rowToClean.childNodes, cellCount = cells.length; j < cellCount; j++) {\r\n                p._unbindCellHoverIn(cells[j]);\r\n            }\r\n        }\r\n    }\r\n    \r\n    if (p.tbody) {\r\n        for (let i = 0, rows = p.tbody.childNodes, rowCount = rows.length; i < rowCount; i++) {\r\n            this._unbindCellEventsForRow(rows[i]);\r\n        }\r\n    }\r\n    \r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {HTMLElement} rowToClean\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._unbindCellEventsForRow = function(rowToClean) {\r\n    const p = this.p;\r\n    for (let i = 0, cells = rowToClean.childNodes, cellCount = cells.length; i < cellCount; i++) {\r\n        p._unbindCellHoverIn(cells[i]);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.render = function () {\r\n    const o = this.o, p = this.p;\r\n\r\n    if (!this.el.offsetParent) {\r\n        if (!p._deferredRender) {\r\n            p._deferredRender = setTimeout(() => {\r\n                p._deferredRender = null;\r\n                if (!this.__removed && this.el.offsetParent) {\r\n                    this.render();\r\n                }\r\n            });\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    let renderedRows, rowCount;\r\n\r\n    if (p.tableSkeletonNeedsRendering === true) {\r\n        p.tableSkeletonNeedsRendering = false;\r\n\r\n        if (o.width == DGTable.Width.AUTO) {\r\n            // We need to do this to return to the specified widths instead. The arrows added to the column widths...\r\n            this._clearSortArrows();\r\n        }\r\n\r\n        let lastScrollTop = p.table ? p.table.scrollTop : NaN,\r\n            lastScrollLeft = p.table ? ScrollHelper.scrollLeftNormalized(p.table) : NaN;\r\n\r\n        this._renderSkeletonBase()\r\n            ._renderSkeletonBody()\r\n            .tableWidthChanged(true, false) // Take this chance to calculate required column widths\r\n            ._renderSkeletonHeaderCells();\r\n            \r\n        if (!o.virtualTable) {\r\n            let rows = p.filteredRows || p.rows;\r\n            rowCount = rows.length;\r\n            renderedRows = this.renderRows(0, rowCount - 1);\r\n            p.$tbody.html('').append(renderedRows);\r\n        }\r\n\r\n        this._updateLastCellWidthFromScrollbar(true);\r\n\r\n        this._updateTableWidth(true);\r\n\r\n        // Show sort arrows\r\n        for (let i = 0; i < p.rows.sortColumn.length; i++) {\r\n            this._showSortArrow(p.rows.sortColumn[i].column, p.rows.sortColumn[i].descending);\r\n        }\r\n        if (o.adjustColumnWidthForSortArrow && p.rows.sortColumn.length) {\r\n            this.tableWidthChanged(true);\r\n        } else if (!o.virtualTable) {\r\n            this.tableWidthChanged();\r\n        }\r\n\r\n        if (!isNaN(lastScrollTop))\r\n          p.table.scrollTop = lastScrollTop;\r\n\r\n        if (!isNaN(lastScrollLeft)) {\r\n          ScrollHelper.scrollLeftNormalized(p.table, lastScrollLeft);\r\n          ScrollHelper.scrollLeftNormalized(p.header, lastScrollLeft);\r\n        }\r\n\r\n        this.trigger('renderskeleton');\r\n\r\n        if (o.virtualTable) {\r\n            p.$table.on('scroll', this._onVirtualTableScrolled.bind(this));\r\n            this.render();\r\n        }\r\n\r\n    } else if (o.virtualTable) {\r\n        rowCount = (p.filteredRows || p.rows).length;\r\n        let scrollTop = p.table.scrollTop;\r\n        let firstVisible = Math.floor((scrollTop - p.virtualRowHeightFirst) / p.virtualRowHeight) + 1 - o.rowsBufferSize;\r\n        let lastVisible = Math.ceil(((scrollTop - p.virtualRowHeightFirst + p.visibleHeight) / p.virtualRowHeight)) + o.rowsBufferSize;\r\n        if (firstVisible < 0) firstVisible = 0;\r\n        if (lastVisible >= rowCount) {\r\n            lastVisible = rowCount - 1;\r\n        }\r\n\r\n        let oldFirstVisible = -1, oldLastVisible = -1;\r\n        let tbodyChildNodes = p.tbody.childNodes;\r\n        if (tbodyChildNodes.length) {\r\n            oldFirstVisible = tbodyChildNodes[0]['rowIndex'];\r\n            oldLastVisible = tbodyChildNodes[tbodyChildNodes.length - 1]['rowIndex'];\r\n        }\r\n\r\n        let countToRemove;\r\n\r\n        if (oldFirstVisible !== -1 && oldFirstVisible < firstVisible) {\r\n            countToRemove = Math.min(oldLastVisible + 1, firstVisible) - oldFirstVisible;\r\n            for (let i = 0; i < countToRemove; i++) {\r\n                this.trigger('rowdestroy', tbodyChildNodes[0]);\r\n                this._unbindCellEventsForRow(tbodyChildNodes[0]);\r\n                p.tbody.removeChild(tbodyChildNodes[0]);\r\n            }\r\n            oldFirstVisible += countToRemove;\r\n            if (oldFirstVisible > oldLastVisible) {\r\n                oldFirstVisible = oldLastVisible = -1;\r\n            }\r\n        } else if (oldLastVisible !== -1 && oldLastVisible > lastVisible) {\r\n            countToRemove = oldLastVisible - Math.max(oldFirstVisible - 1, lastVisible);\r\n            for (let i = 0; i < countToRemove; i++) {\r\n                this.trigger('rowdestroy', tbodyChildNodes[tbodyChildNodes.length - 1]);\r\n                this._unbindCellEventsForRow(tbodyChildNodes[tbodyChildNodes.length - 1]);\r\n                p.tbody.removeChild(tbodyChildNodes[tbodyChildNodes.length - 1]);\r\n            }\r\n            if (oldLastVisible < oldFirstVisible) {\r\n                oldFirstVisible = oldLastVisible = -1;\r\n            }\r\n        }\r\n\r\n        if (firstVisible < oldFirstVisible) {\r\n            renderedRows = this.renderRows(firstVisible, Math.min(lastVisible, oldFirstVisible - 1));\r\n            p.$tbody.prepend(renderedRows);\r\n        }\r\n        if (lastVisible > oldLastVisible || oldLastVisible === -1) {\r\n            renderedRows = this.renderRows(oldLastVisible === -1 ? firstVisible : oldLastVisible + 1, lastVisible);\r\n            p.$tbody.append(renderedRows);\r\n        }\r\n    }\r\n    this.trigger('render');\r\n    return this;\r\n};\r\n\r\n/**\r\n * Forces a full render of the table\r\n * @public\r\n * @expose\r\n * @param {Boolean=true} render - Should render now?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.clearAndRender = function (render) {\r\n    let p = this.p;\r\n\r\n    p.tableSkeletonNeedsRendering = true;\r\n\r\n    if (render === undefined || render) {\r\n        this.render();\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Render rows\r\n * @private\r\n * @param {Number} first first row to render\r\n * @param {Number} last last row to render\r\n * @returns {DocumentFragment} fragment containing all rendered rows\r\n */\r\nDGTable.prototype.renderRows = function (first, last) {\r\n    const o = this.o, p = this.p;\r\n        \r\n    let tableClassName = o.tableClassName,\r\n        rowClassName = tableClassName + '-row',\r\n        cellClassName = tableClassName + '-cell',\r\n        rows = p.filteredRows || p.rows,\r\n        isDataFiltered = !!p.filteredRows,\r\n        allowCellPreview = o.allowCellPreview,\r\n        visibleColumns = p.visibleColumns,\r\n        isVirtual = o.virtualTable,\r\n        virtualRowHeightFirst = p.virtualRowHeightFirst,\r\n        virtualRowHeight = p.virtualRowHeight,\r\n        top,\r\n        physicalRowIndex;\r\n\r\n    let colCount = visibleColumns.length;\r\n    for (let colIndex = 0, column; colIndex < colCount; colIndex++) {\r\n        column = visibleColumns[colIndex];\r\n        column._finalWidth = (column.actualWidthConsideringScrollbarWidth || column.actualWidth);\r\n    }\r\n\r\n    let bodyFragment = document.createDocumentFragment();\r\n\r\n    let isRtl = this._isTableRtl(),\r\n        virtualRowXAttr = isRtl ? 'right' : 'left';\r\n\r\n    for (let i = first, rowCount = rows.length;\r\n         i < rowCount && i <= last;\r\n         i++) {\r\n\r\n        let rowData = rows[i];\r\n        physicalRowIndex = isDataFiltered ? rowData['__i'] : i;\r\n\r\n        let row = createElement('div');\r\n        row.className = rowClassName;\r\n        row['rowIndex'] = i;\r\n        row['physicalRowIndex'] = physicalRowIndex;\r\n\r\n        for (let colIndex = 0; colIndex < colCount; colIndex++) {\r\n            let column = visibleColumns[colIndex];\r\n            let cell = createElement('div');\r\n            cell['columnName'] = column.name;\r\n            cell.setAttribute('data-column', column.name);\r\n            cell.className = cellClassName;\r\n            cell.style.width = column._finalWidth + 'px';\r\n            if (column.cellClasses) cell.className += ' ' + column.cellClasses;\r\n            if (allowCellPreview) {\r\n                p._bindCellHoverIn(cell);\r\n            }\r\n            \r\n            let cellInner = cell.appendChild(createElement('div'));\r\n            cellInner.innerHTML = this._getHtmlForCell(rowData, column);\r\n            \r\n            row.appendChild(cell);\r\n        }\r\n\r\n        if (isVirtual) {\r\n            top = i > 0 ? virtualRowHeightFirst + (i - 1) * virtualRowHeight : 0;\r\n            row.style.position = 'absolute';\r\n            row.style[virtualRowXAttr] = 0;\r\n            row.style.top = top + 'px';\r\n        }\r\n\r\n        bodyFragment.appendChild(row);\r\n\r\n        this.trigger('rowcreate', i, physicalRowIndex, row, rowData);\r\n    }\r\n\r\n    return bodyFragment;\r\n};\r\n\r\n/**\r\n * Calculate virtual table height for scrollbar\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._calculateVirtualHeight = function () {\r\n    let p = this.p;\r\n\r\n    if (p.tbody) {\r\n        let rowCount = (p.filteredRows || p.rows).length;\r\n        let height = p.virtualRowHeight * rowCount;\r\n        if (rowCount) {\r\n            height += (p.virtualRowHeightFirst - p.virtualRowHeight);\r\n            height += (p.virtualRowHeightLast - p.virtualRowHeight);\r\n        }\r\n        // At least 1 pixel - to show scrollers correctly.\r\n        if (height < 1) {\r\n            height = 1;\r\n        }\r\n        p.tbody.style.height = height + 'px';\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculate the size required for the table body width (which is the row's width)\r\n * @private\r\n * @returns {Number} calculated width\r\n */\r\nDGTable.prototype._calculateTbodyWidth = function () {\r\n    const p = this.p;\r\n        \r\n    let tableClassName = this.o.tableClassName,\r\n        rowClassName = tableClassName + '-row',\r\n        cellClassName = tableClassName + '-cell',\r\n        visibleColumns = p.visibleColumns,\r\n        colCount = visibleColumns.length,\r\n        cell,\r\n        cellInner,\r\n        colIndex,\r\n        column;\r\n\r\n    let $row = $('<div>').addClass(rowClassName).css('float', 'left');\r\n    let sumActualWidth = 0;\r\n\r\n    for (colIndex = 0; colIndex < colCount; colIndex++) {\r\n        column = visibleColumns[colIndex];\r\n        cell = createElement('div');\r\n        cell.className = cellClassName;\r\n        cell.style.width = column.actualWidth + 'px';\r\n        if (column.cellClasses) cell.className += ' ' + column.cellClasses;\r\n        cellInner = cell.appendChild(createElement('div'));\r\n        $row.append(cell);\r\n        sumActualWidth += column.actualWidth;\r\n    }\r\n\r\n    let $thisWrapper = $('<div>')\r\n        .addClass(this.el.className)\r\n        .css({ 'z-index': -1, 'position': 'absolute', left: '0', top: '-9999px', 'float': 'left', width: '1px', overflow: 'hidden' })\r\n        .append(\r\n            $('<div>').addClass(tableClassName).append(\r\n                $('<div>').addClass(tableClassName + '-body').css('width', sumActualWidth + 10000).append(\r\n                    $row,\r\n                ),\r\n            ),\r\n        );\r\n\r\n    $thisWrapper.appendTo(document.body);\r\n\r\n    let fractionTest = $('<div style=\"border:1.5px solid #000;width:0;height:0;position:absolute;left:0;top:-9999px\">').appendTo(document.body);\r\n    let hasFractions = parseFloat(fractionTest.css('border-width'));\r\n    hasFractions = Math.round(hasFractions) != hasFractions;\r\n    fractionTest.remove();\r\n\r\n    let width = CssUtil.outerWidth($row);\r\n    width -= p.scrollbarWidth || 0;\r\n\r\n    if (hasFractions) {\r\n        width++;\r\n    }\r\n\r\n    $thisWrapper.remove();\r\n    return width;\r\n};\r\n\r\n/**\r\n * Sets the columns of the table\r\n * @public\r\n * @expose\r\n * @param {COLUMN_OPTIONS[]} columns - Column definitions array\r\n * @param {Boolean=true} render - Should render now?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setColumns = function (columns, render) {\r\n    const p = this.p;\r\n        \r\n    columns = columns || [];\r\n\r\n    let normalizedCols = new ColumnCollection();\r\n    for (let i = 0, order = 0; i < columns.length; i++) {\r\n\r\n        let columnData = columns[i];\r\n        let normalizedColumn = this._initColumnFromData(columnData);\r\n\r\n        if (columnData.order !== undefined) {\r\n            if (columnData.order > order) {\r\n                order = columnData.order + 1;\r\n            }\r\n            normalizedColumn.order = columnData.order;\r\n        } else {\r\n            normalizedColumn.order = order++;\r\n        }\r\n\r\n        normalizedCols.push(normalizedColumn);\r\n    }\r\n    normalizedCols.normalizeOrder();\r\n\r\n    p.columns = normalizedCols;\r\n    p.visibleColumns = normalizedCols.getVisibleColumns();\r\n    \r\n    this._ensureVisibleColumns().clearAndRender(render);\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Add a column to the table\r\n * @public\r\n * @expose\r\n * @param {COLUMN_OPTIONS} columnData column properties\r\n * @param {String|Number} [before=-1] column name or order to be inserted before\r\n * @param {Boolean=true} render - Should render now?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.addColumn = function (columnData, before, render) {\r\n    const p = this.p;\r\n    let columns = p.columns;\r\n\r\n    if (columnData && !columns.get(columnData.name)) {\r\n        let beforeColumn = null;\r\n        if (before !== undefined) {\r\n            beforeColumn = columns.get(before) || columns.getByOrder(before);\r\n        }\r\n\r\n        let column = this._initColumnFromData(columnData);\r\n        column.order = beforeColumn ? beforeColumn.order : (columns.getMaxOrder() + 1);\r\n\r\n        for (let i = columns.getMaxOrder(), to = column.order; i >= to ; i--) {\r\n            let col = columns.getByOrder(i);\r\n            if (col) {\r\n                col.order++;\r\n            }\r\n        }\r\n\r\n        columns.push(column);\r\n        columns.normalizeOrder();\r\n\r\n        p.visibleColumns = columns.getVisibleColumns();\r\n        this._ensureVisibleColumns().clearAndRender(render);\r\n\r\n        this.trigger('addcolumn', column.name);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Remove a column from the table\r\n * @public\r\n * @expose\r\n * @param {String} column column name\r\n * @param {Boolean=true} render - Should render now?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.removeColumn = function (column, render) {\r\n    const p = this.p;\r\n    let columns = p.columns;\r\n\r\n    let colIdx = columns.indexOf(column);\r\n    if (colIdx > -1) {\r\n        columns.splice(colIdx, 1);\r\n        columns.normalizeOrder();\r\n\r\n        p.visibleColumns = columns.getVisibleColumns();\r\n        this._ensureVisibleColumns().clearAndRender(render);\r\n\r\n        this.trigger('removecolumn', column);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets a new cell formatter.\r\n * @public\r\n * @expose\r\n * @param {function(value: *, columnName: String, row: Object):String|null} [formatter=null] - The cell formatter. Should return an HTML.\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setCellFormatter = function (formatter) {\r\n    /**\r\n     * @private\r\n     * @field {Function} cellFormatter */\r\n    this.o.cellFormatter = formatter || function (val) {\r\n        return (typeof val === 'string') ? htmlEncode(val) : val;\r\n    };\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets a new header cell formatter.\r\n * @public\r\n * @expose\r\n * @param {function(label: String, columnName: String):String|null} [formatter=null] - The cell formatter. Should return an HTML.\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setHeaderCellFormatter = function (formatter) {\r\n    /**\r\n     * @private\r\n     * @field {Function} headerCellFormatter */\r\n    this.o.headerCellFormatter = formatter || function (val) {\r\n        return (typeof val === 'string') ? htmlEncode(val) : val;\r\n    };\r\n        \r\n    return this;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @param {function(row:Object,args:Object):Boolean|null} [filterFunc=null] - The filter function to work with filters. Default is a by-colum filter.\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setFilter = function (filterFunc) {\r\n    /** @private\r\n     * @field {Function} filter */\r\n    this.o.filter = filterFunc;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @param {Object|null} args - Options to pass to the filter function\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.filter = function (args) {\r\n    const p = this.p;\r\n    \r\n    let filterFunc = this.o.filter || ByColumnFilter;\r\n    \r\n    // Deprecated use of older by-column filter\r\n    if (typeof arguments[0] === 'string' && typeof arguments[1] === 'string') {\r\n        args = {\r\n            column: arguments[0],\r\n            keyword: arguments[1],\r\n            caseSensitive: arguments[2],\r\n        };\r\n    }\r\n    \r\n    let hadFilter = !!p.filteredRows;\r\n    if (p.filteredRows) {\r\n        p.filteredRows = null; // Allow releasing array memory now\r\n    }\r\n\r\n    // Shallow-clone the args, as the filter function may want to modify it for keeping state\r\n    p.filterArgs = args == null ? null : ((typeof args === 'object' && !Array.isArray(args)) ? $.extend({}, args) : args);\r\n    \r\n    if (p.filterArgs !== null) {\r\n        p.filteredRows = p.rows.filteredCollection(filterFunc, p.filterArgs);\r\n\r\n        if (hadFilter || p.filteredRows) {\r\n            this.clearAndRender();\r\n            this.trigger('filter', args);\r\n        }\r\n    }\r\n    else {\r\n        p.filterArgs = null;\r\n        p.filteredRows = null;\r\n        this.clearAndRender();\r\n        this.trigger('filterclear', {});\r\n    }\r\n    \r\n    return this;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.clearFilter = function () {\r\n    const p = this.p;\r\n    \r\n    if (p.filteredRows) {\r\n        p.filterArgs = null;\r\n        p.filteredRows = null;\r\n        this.clearAndRender();\r\n        this.trigger('filterclear', {});\r\n    }\r\n    \r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._refilter = function() {\r\n    const p = this.p;\r\n\r\n    if (p.filteredRows && p.filterArgs) {\r\n        let filterFunc = this.o.filter || ByColumnFilter;\r\n        p.filteredRows = p.rows.filteredCollection(filterFunc, p.filterArgs);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Set a new label to a column\r\n * @public\r\n * @expose\r\n * @param {String} column Name of the column\r\n * @param {String} label New label for the column\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setColumnLabel = function (column, label) {\r\n    const p = this.p;\r\n\r\n    let col = p.columns.get(column);\r\n    if (col) {\r\n        col.label = label === undefined ? col.name : label;\r\n\r\n        if (col.element) {\r\n            for (let i = 0; i < col.element[0].firstChild.childNodes.length; i++) {\r\n                let node = col.element[0].firstChild.childNodes[i];\r\n                if (node.nodeType === 3) {\r\n                    node.textContent = col.label;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Move a column to a new position\r\n * @public\r\n * @expose\r\n * @param {String|Number} src Name or position of the column to be moved\r\n * @param {String|Number} dest Name of the column currently in the desired position, or the position itself\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.moveColumn = function (src, dest) {\r\n    const o = this.o, p = this.p;\r\n        \r\n    let columns = p.columns,\r\n        col, destCol;\r\n\r\n    if (typeof src === 'string') {\r\n        col = columns.get(src);\r\n    } else if (typeof src === 'number') {\r\n        col = p.visibleColumns[src];\r\n    }\r\n    if (typeof dest === 'string') {\r\n        destCol = columns.get(dest);\r\n    } else if (typeof dest === 'number') {\r\n        destCol = p.visibleColumns[dest];\r\n    }\r\n\r\n    if (col && destCol && src !== dest) {\r\n        let srcOrder = col.order, destOrder = destCol.order;\r\n\r\n        p.visibleColumns = columns.moveColumn(col, destCol).getVisibleColumns();\r\n        this._ensureVisibleColumns();\r\n\r\n        if (o.virtualTable) {\r\n            this.clearAndRender()\r\n                ._updateLastCellWidthFromScrollbar(true);\r\n        } else {\r\n            let headerCell = p.$headerRow.find('>div.' + o.tableClassName + '-header-cell');\r\n            let beforePos = srcOrder < destOrder ? destOrder + 1 : destOrder,\r\n                fromPos = srcOrder;\r\n            headerCell[0].parentNode.insertBefore(headerCell[fromPos], headerCell[beforePos]);\r\n\r\n            let srcWidth = p.visibleColumns[srcOrder];\r\n            srcWidth = (srcWidth.actualWidthConsideringScrollbarWidth || srcWidth.actualWidth) + 'px';\r\n            let destWidth = p.visibleColumns[destOrder];\r\n            destWidth = (destWidth.actualWidthConsideringScrollbarWidth || destWidth.actualWidth) + 'px';\r\n\r\n            let tbodyChildren = p.$tbody[0].childNodes;\r\n            for (let i = 0, count = tbodyChildren.length; i < count; i++) {\r\n                let row = tbodyChildren[i];\r\n                if (row.nodeType !== 1) continue;\r\n                row.insertBefore(row.childNodes[fromPos], row.childNodes[beforePos]);\r\n                row.childNodes[destOrder].firstChild.style.width = destWidth;\r\n                row.childNodes[srcOrder].firstChild.style.width = srcWidth;\r\n            }\r\n        }\r\n\r\n        this.trigger('movecolumn', col.name, srcOrder, destOrder);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sort the table\r\n * @public\r\n * @expose\r\n * @param {String?} column Name of the column to sort on (or null to remove sort arrow)\r\n * @param {Boolean=} descending Sort in descending order\r\n * @param {Boolean} [add=false] Should this sort be on top of the existing sort? (For multiple column sort)\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.sort = function (column, descending, add) {\r\n    const o = this.o, p = this.p;\r\n    \r\n    let columns = p.columns,\r\n        col = columns.get(column);\r\n\r\n    let currentSort = p.rows.sortColumn;\r\n        \r\n    if (col) {\r\n\r\n        if (currentSort.length && currentSort[currentSort.length - 1].column == column) {\r\n            // Recognize current descending mode, if currently sorting by this column\r\n            descending = descending === undefined ? !currentSort[currentSort.length - 1].descending : descending;\r\n        }\r\n\r\n        if (add) { // Add the sort to current sort stack\r\n\r\n            for (let i = 0; i < currentSort.length; i++) {\r\n                if (currentSort[i].column == col.name) {\r\n                    if (i < currentSort.length - 1) {\r\n                        currentSort.length = 0;\r\n                    } else {\r\n                        currentSort.splice(currentSort.length - 1, 1);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            if ((o.sortableColumns > 0 /* allow manual sort when disabled */ && currentSort.length >= o.sortableColumns) || currentSort.length >= p.visibleColumns.length) {\r\n                currentSort.length = 0;\r\n            }\r\n\r\n        } else { // Sort only by this column\r\n            currentSort.length = 0;\r\n        }\r\n\r\n        // Default to ascending\r\n        descending = descending === undefined ? false : descending;\r\n\r\n        // Set the required column in the front of the stack\r\n        currentSort.push({\r\n            column: col.name,\r\n            comparePath: col.comparePath || col.dataPath,\r\n            descending: !!descending,\r\n        });\r\n    } else {\r\n        currentSort.length = 0;\r\n    }\r\n\r\n    this._clearSortArrows();\r\n\r\n    for (let i = 0; i < currentSort.length; i++) {\r\n        this._showSortArrow(currentSort[i].column, currentSort[i].descending);\r\n    }\r\n\r\n    if (o.adjustColumnWidthForSortArrow && !o._tableSkeletonNeedsRendering) {\r\n        this.tableWidthChanged(true);\r\n    }\r\n\r\n    if (o.virtualTable) {\r\n        while (p.tbody && p.tbody.firstChild) {\r\n            this.trigger('rowdestroy', p.tbody.firstChild);\r\n            this._unbindCellEventsForRow(p.tbody.firstChild);\r\n            p.tbody.removeChild(p.tbody.firstChild);\r\n        }\r\n    } else {\r\n        p.tableSkeletonNeedsRendering = true;\r\n    }\r\n\r\n    p.rows.sortColumn = currentSort;\r\n    \r\n    if (currentSort.length) {\r\n        p.rows.sort(!!p.filteredRows);\r\n        if (p.filteredRows) {\r\n            p.filteredRows.sort(!!p.filteredRows);\r\n        }\r\n    }\r\n\r\n    // Build output for event, with option names that will survive compilers\r\n    let sorts = [];\r\n    for (let i = 0; i < currentSort.length; i++) {\r\n        sorts.push({ 'column': currentSort[i].column, 'descending': currentSort[i].descending });\r\n    }\r\n    this.trigger('sort', sorts);\r\n    \r\n    return this;\r\n};\r\n\r\n/**\r\n * Re-sort the table using current sort specifiers\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.resort = function () {\r\n    const p = this.p;\r\n    let columns = p.columns;\r\n\r\n    let currentSort = p.rows.sortColumn;\r\n    if (currentSort.length) {\r\n        \r\n        for (let i = 0; i < currentSort.length; i++) {\r\n            if (!columns.get(currentSort[i].column)) {\r\n                currentSort.splice(i--, 1);\r\n            }\r\n        }\r\n        \r\n        p.rows.sortColumn = currentSort;\r\n        if (currentSort.length) {\r\n            p.rows.sort(!!p.filteredRows);\r\n            if (p.filteredRows) {\r\n                p.filteredRows.sort(!!p.filteredRows);\r\n            }\r\n        }\r\n\r\n        // Build output for event, with option names that will survive compilers\r\n        let sorts = [];\r\n        for (let i = 0; i < currentSort.length; i++) {\r\n            sorts.push({ 'column': currentSort[i].column, 'descending': currentSort[i].descending });\r\n        }\r\n        this.trigger('sort', sorts);\r\n    }\r\n    \r\n    \r\n    return this;\r\n};\r\n\r\n/**\r\n * Make sure there's at least one column visible\r\n * @private\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._ensureVisibleColumns = function () {\r\n    const p = this.p;\r\n\r\n    if (p.visibleColumns.length === 0 && p.columns.length) {\r\n        p.columns[0].visible = true;\r\n        p.visibleColumns.push(p.columns[0]);\r\n        this.trigger('showcolumn', p.columns[0].name);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Show or hide a column\r\n * @public\r\n * @expose\r\n * @param {String} column Unique column name\r\n * @param {Boolean} visible New visibility mode for the column\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setColumnVisible = function (column, visible) {\r\n    const p = this.p;\r\n\r\n    let col = p.columns.get(column);\r\n\r\n    //noinspection PointlessBooleanExpressionJS\r\n    visible = !!visible;\r\n\r\n    if (col && !!col.visible != visible) {\r\n        col.visible = visible;\r\n        p.visibleColumns = p.columns.getVisibleColumns();\r\n        this.trigger(visible ? 'showcolumn' : 'hidecolumn', column);\r\n        this._ensureVisibleColumns();\r\n        this.clearAndRender();\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Get the visibility mode of a column\r\n * @public\r\n * @expose\r\n * @returns {Boolean} true if visible\r\n */\r\nDGTable.prototype.isColumnVisible = function (column) {\r\n    const p = this.p;\r\n    let col = p.columns.get(column);\r\n    if (col) {\r\n        return col.visible;\r\n    }\r\n    return false;\r\n};\r\n\r\n/**\r\n * Globally set the minimum column width\r\n * @public\r\n * @expose\r\n * @param {Number} minColumnWidth Minimum column width\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setMinColumnWidth = function (minColumnWidth) {\r\n    let o = this.o;\r\n    minColumnWidth = Math.max(minColumnWidth, 0);\r\n    if (o.minColumnWidth != minColumnWidth) {\r\n        o.minColumnWidth = minColumnWidth;\r\n        this.tableWidthChanged(true);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Get the current minimum column width\r\n * @public\r\n * @expose\r\n * @returns {Number} Minimum column width\r\n */\r\nDGTable.prototype.getMinColumnWidth = function () {\r\n    return this.o.minColumnWidth;\r\n};\r\n\r\n/**\r\n * Set the limit on concurrent columns sorted\r\n * @public\r\n * @expose\r\n * @param {Number} sortableColumns How many sortable columns to allow?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setSortableColumns = function (sortableColumns) {\r\n    const p = this.p, o = this.o;\r\n    if (o.sortableColumns != sortableColumns) {\r\n        o.sortableColumns = sortableColumns;\r\n        if (p.$table) {\r\n            let headerCell = p.$headerRow.find('>div.' + o.tableClassName + '-header-cell');\r\n            for (let i = 0; i < headerCell.length; i++) {\r\n                $(headerCell[0])[(o.sortableColumns > 0 && p.visibleColumns[i].sortable) ? 'addClass' : 'removeClass']('sortable');\r\n            }\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Get the limit on concurrent columns sorted\r\n * @public\r\n * @expose\r\n * @returns {Number} How many sortable columns are allowed?\r\n */\r\nDGTable.prototype.getSortableColumns = function () {\r\n    return this.o.sortableColumns;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @param {Boolean?} movableColumns=true are the columns movable?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setMovableColumns = function (movableColumns) {\r\n    let o = this.o;\r\n    //noinspection PointlessBooleanExpressionJS\r\n    movableColumns = movableColumns === undefined ? true : !!movableColumns;\r\n    if (o.movableColumns != movableColumns) {\r\n        o.movableColumns = movableColumns;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @returns {Boolean} are the columns movable?\r\n */\r\nDGTable.prototype.getMovableColumns = function () {\r\n    return this.o.movableColumns;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @param {Boolean} resizableColumns=true are the columns resizable?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setResizableColumns = function (resizableColumns) {\r\n    let o = this.o;\r\n    //noinspection PointlessBooleanExpressionJS\r\n    resizableColumns = resizableColumns === undefined ? true : !!resizableColumns;\r\n    if (o.resizableColumns != resizableColumns) {\r\n        o.resizableColumns = resizableColumns;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @returns {Boolean} are the columns resizable?\r\n */\r\nDGTable.prototype.getResizableColumns = function () {\r\n    return this.o.resizableColumns;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @param {{function(string,boolean):{function(a:*,b:*):boolean}}} comparatorCallback a callback function that returns the comparator for a specific column\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setComparatorCallback = function (comparatorCallback) {\r\n    let o = this.o;\r\n    if (o.onComparatorRequired != comparatorCallback) {\r\n        o.onComparatorRequired = comparatorCallback;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Set a new width to a column\r\n * @public\r\n * @expose\r\n * @param {String} column name of the column to resize\r\n * @param {Number|String} width new column as pixels, or relative size (0.5, 50%)\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setColumnWidth = function (column, width) {\r\n\r\n    const p = this.p;\r\n\r\n    let col = p.columns.get(column);\r\n\r\n    let parsedWidth = this._parseColumnWidth(width, col.ignoreMin ? 0 : this.o.minColumnWidth);\r\n\r\n    if (col) {\r\n        let oldWidth = this._serializeColumnWidth(col);\r\n\r\n        col.width = parsedWidth.width;\r\n        col.widthMode = parsedWidth.mode;\r\n\r\n        let newWidth = this._serializeColumnWidth(col);\r\n\r\n        if (oldWidth != newWidth) {\r\n            this.tableWidthChanged(true); // Calculate actual sizes\r\n        }\r\n\r\n        this.trigger('columnwidth', col.name, oldWidth, newWidth);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @param {String} column name of the column\r\n * @returns {String|null} the serialized width of the specified column, or null if column not found\r\n */\r\nDGTable.prototype.getColumnWidth = function (column) {\r\n    const p = this.p;\r\n\r\n    let col = p.columns.get(column);\r\n    if (col) {\r\n        return this._serializeColumnWidth(col);\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @param {String} column name of the column\r\n * @returns {SERIALIZED_COLUMN|null} configuration for all columns\r\n */\r\nDGTable.prototype.getColumnConfig = function (column) {\r\n    const p = this.p;\r\n    let col = p.columns.get(column);\r\n    if (col) {\r\n        return {\r\n            'order': col.order,\r\n            'width': this._serializeColumnWidth(col),\r\n            'visible': col.visible,\r\n            'label': col.label,\r\n        };\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns a config object for the columns, to allow saving configurations for next time...\r\n * @public\r\n * @expose\r\n * @returns {Object} configuration for all columns\r\n */\r\nDGTable.prototype.getColumnsConfig = function () {\r\n    const p = this.p;\r\n\r\n    let config = {};\r\n    for (let i = 0; i < p.columns.length; i++) {\r\n        config[p.columns[i].name] = this.getColumnConfig(p.columns[i].name);\r\n    }\r\n    return config;\r\n};\r\n\r\n/**\r\n * Returns an array of the currently sorted columns\r\n * @public\r\n * @expose\r\n * @returns {Array.<SERIALIZED_COLUMN_SORT>} configuration for all columns\r\n */\r\nDGTable.prototype.getSortedColumns = function () {\r\n    const p = this.p;\r\n\r\n    let sorted = [];\r\n    for (let i = 0; i < p.rows.sortColumn.length; i++) {\r\n        let sort = p.rows.sortColumn[i];\r\n        sorted.push({ column: sort.column, descending: sort.descending });\r\n    }\r\n    return sorted;\r\n};\r\n\r\n/**\r\n * Returns the HTML string for a specific cell. Can be used externally for special cases (i.e. when setting a fresh HTML in the cell preview through the callback).\r\n * @public\r\n * @expose\r\n * @param {Number} row - index of the row\r\n * @param {String} columnName - name of the column\r\n * @returns {String} HTML string for the specified cell\r\n */\r\nDGTable.prototype.getHtmlForCell = function (row, columnName) {\r\n    const p = this.p;\r\n\r\n    if (row < 0 || row > p.rows.length - 1) return null;\r\n    let column = p.columns.get(columnName);\r\n    if (!column) return null;\r\n    let rowData = p.rows[row];\r\n\r\n    return this._getHtmlForCell(rowData, column);\r\n};\r\n\r\n/**\r\n * Returns the HTML string for a specific cell. Can be used externally for special cases (i.e. when setting a fresh HTML in the cell preview through the callback).\r\n * @public\r\n * @expose\r\n * @param {Object} rowData - row data\r\n * @param {Object} column - column data\r\n * @returns {String} HTML string for the specified cell\r\n */\r\nDGTable.prototype._getHtmlForCell = function (rowData, column) {\r\n    let dataPath = column.dataPath;\r\n    let colValue = rowData[dataPath[0]];\r\n    for (let dataPathIndex = 1; dataPathIndex < dataPath.length; dataPathIndex++) {\r\n        if (colValue == null) break;\r\n        colValue = colValue && colValue[dataPath[dataPathIndex]];\r\n    }\r\n\r\n    let content = this.o.cellFormatter(colValue, column.name, rowData);\r\n    if (content === undefined) {\r\n        content = '';\r\n    }\r\n    \r\n    return content;\r\n};\r\n\r\n/**\r\n * Returns the y pos of a row by index\r\n * @public\r\n * @expose\r\n * @param {Number} rowIndex - index of the row\r\n * @returns {Number|null} Y pos\r\n */\r\nDGTable.prototype.getRowYPos = function (rowIndex) {\r\n    const p = this.p;\r\n    \r\n    if (this.o.virtualTable) {\r\n        return rowIndex > 0 ? p.virtualRowHeightFirst + (rowIndex - 1) * p.virtualRowHeight : 0;\r\n    } else {\r\n        let row = p.tbody.childNodes[rowIndex];\r\n        return row ? row.offsetTop : null;\r\n    }\r\n};\r\n\r\n/**\r\n * Returns the row data for a specific row\r\n * @public\r\n * @expose\r\n * @param {Number} row index of the row\r\n * @returns {Object} Row data\r\n */\r\nDGTable.prototype.getDataForRow = function (row) {\r\n    const p = this.p;\r\n\r\n    if (row < 0 || row > p.rows.length - 1) return null;\r\n    return p.rows[row];\r\n};\r\n\r\n/**\r\n * Gets the number of rows\r\n * @public\r\n * @expose\r\n * @returns {Number} Row count\r\n */\r\nDGTable.prototype.getRowCount = function () {\r\n    const p = this.p;\r\n    return p.rows ? p.rows.length : 0;\r\n};\r\n\r\n/**\r\n * Returns the physical row index for specific row\r\n * @public\r\n * @expose\r\n * @param {Object} rowData - Row data to find\r\n * @returns {Number} Row index\r\n */\r\nDGTable.prototype.getIndexForRow = function (rowData) {\r\n    const p = this.p;\r\n    return p.rows.indexOf(rowData);\r\n};\r\n\r\n/**\r\n * Gets the number of filtered rows\r\n * @public\r\n * @expose\r\n * @returns {Number} Filtered row count\r\n */\r\nDGTable.prototype.getFilteredRowCount = function () {\r\n    const p = this.p;\r\n    return (p.filteredRows || p.rows).length;\r\n};\r\n\r\n/**\r\n * Returns the filtered row index for specific row\r\n * @public\r\n * @expose\r\n * @param {Object} rowData - Row data to find\r\n * @returns {Number} Row index\r\n */\r\nDGTable.prototype.getIndexForFilteredRow = function (rowData) {\r\n    const p = this.p;\r\n    return (p.filteredRows || p.rows).indexOf(rowData);\r\n};\r\n\r\n/**\r\n * Returns the row data for a specific row\r\n * @public\r\n * @expose\r\n * @param {Number} row index of the filtered row\r\n * @returns {Object} Row data\r\n */\r\nDGTable.prototype.getDataForFilteredRow = function (row) {\r\n    const p = this.p;\r\n    if (row < 0 || row > (p.filteredRows || p.rows).length - 1) return null;\r\n    return (p.filteredRows || p.rows)[row];\r\n};\r\n\r\n/**\r\n * Returns DOM element of the header row\r\n * @public\r\n * @expose\r\n * @returns {Element} Row element\r\n */\r\nDGTable.prototype.getHeaderRowElement = function () {\r\n    return this.p.headerRow;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {Element} el\r\n * @returns {Number} width\r\n */\r\nDGTable.prototype._horizontalPadding = function(el) {\r\n    return ((parseFloat($.css(el, 'padding-left')) || 0) +\r\n    (parseFloat($.css(el, 'padding-right')) || 0));\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {Element} el\r\n * @returns {Number} width\r\n */\r\nDGTable.prototype._horizontalBorderWidth = function(el) {\r\n    return ((parseFloat($.css(el, 'border-left')) || 0) +\r\n    (parseFloat($.css(el, 'border-right')) || 0));\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {Number} width\r\n */\r\nDGTable.prototype._calculateWidthAvailableForColumns = function() {\r\n    const o = this.o, p = this.p;\r\n\r\n    // Changing display mode briefly, to prevent taking in account the  parent's scrollbar width when we are the cause for it\r\n    let oldDisplay, lastScrollTop, lastScrollLeft;\r\n    if (p.$table) {\r\n        lastScrollTop = p.table ? p.table.scrollTop : 0;\r\n        lastScrollLeft = p.table ? p.table.scrollLeft : 0;\r\n\r\n        if (o.virtualTable) {\r\n            oldDisplay = p.$table[0].style.display;\r\n            p.$table[0].style.display = 'none';\r\n        }\r\n    }\r\n\r\n    let detectedWidth = CssUtil.width(this.$el);\r\n\r\n    if (p.$table) {\r\n        if (o.virtualTable) {\r\n            p.$table[0].style.display = oldDisplay;\r\n        }\r\n\r\n        p.table.scrollTop = lastScrollTop;\r\n        p.table.scrollLeft = lastScrollLeft;\r\n        p.header.scrollLeft = lastScrollLeft;\r\n    }\r\n\r\n    let tableClassName = o.tableClassName;\r\n\r\n    let $thisWrapper = $('<div>').addClass(this.el.className).css({ 'z-index': -1, 'position': 'absolute', left: '0', top: '-9999px' });\r\n    let $header = $('<div>').addClass(tableClassName + '-header').appendTo($thisWrapper);\r\n    let $headerRow = $('<div>').addClass(tableClassName + '-header-row').appendTo($header);\r\n    for (let i = 0; i < p.visibleColumns.length; i++) {\r\n        $headerRow.append($('<div><div></div></div>').addClass(tableClassName + '-header-cell').addClass(p.visibleColumns[i].cellClasses || ''));\r\n    }\r\n    $thisWrapper.appendTo(document.body);\r\n\r\n    detectedWidth -= this._horizontalBorderWidth($headerRow[0]);\r\n\r\n    let $cells = $headerRow.find('>div.' + tableClassName + '-header-cell');\r\n    for (let i = 0; i < $cells.length; i++) {\r\n        let $cell = $($cells[i]);\r\n\r\n        let isBoxing = $cell.css('boxSizing') === 'border-box';\r\n        if (!isBoxing) {\r\n            detectedWidth -=\r\n                (parseFloat($cell.css('border-right-width')) || 0) +\r\n                (parseFloat($cell.css('border-left-width')) || 0) +\r\n                (this._horizontalPadding($cell[0])); // CELL's padding\r\n        }\r\n    }\r\n\r\n    if ($thisWrapper) {\r\n        $thisWrapper.remove();\r\n    }\r\n\r\n    return Math.max(0, detectedWidth);\r\n};\r\n\r\n/**\r\n * Notify the table that its width has changed\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.tableWidthChanged = (function () {\r\n\r\n    let getTextWidth = function(text) {\r\n        let tableClassName = this.o.tableClassName;\r\n\r\n        let $cell, $tableWrapper = $('<div>').addClass(this.$el).append(\r\n            $('<div>').addClass(tableClassName + '-header').append(\r\n                $('<div>').addClass(tableClassName + '-header-row').append(\r\n                    $cell = $('<div>').addClass(tableClassName + '-header-cell').append(\r\n                        $('<div>').text(text),\r\n                    ),\r\n                ),\r\n            ),\r\n        ).css({ 'position': 'absolute', top: '-9999px', 'visibility': 'hidden' });\r\n        $tableWrapper.appendTo(document.body);\r\n\r\n        let width = CssUtil.width($cell);\r\n\r\n        $tableWrapper.remove();\r\n\r\n        return width;\r\n    };\r\n\r\n    let lastDetectedWidth = null;\r\n\r\n    /**\r\n     * @public\r\n     * @expose\r\n     * @param {Boolean} [forceUpdate=false]\r\n     * @param {Boolean} [renderColumns=true]\r\n     * @returns {DGTable} self\r\n     */\r\n    return function(forceUpdate, renderColumns) {\r\n\r\n        let that = this,\r\n            o = that.o,\r\n            p = that.p,\r\n            detectedWidth = this._calculateWidthAvailableForColumns(),\r\n            sizeLeft = detectedWidth,\r\n            relatives = 0;\r\n\r\n        renderColumns = renderColumns === undefined || renderColumns;\r\n\r\n        let tableWidthBeforeCalculations = 0;\r\n\r\n        if (!p.tbody) {\r\n            renderColumns = false;\r\n        }\r\n\r\n        if (renderColumns) {\r\n            tableWidthBeforeCalculations = parseFloat(p.tbody.style.minWidth) || 0;\r\n        }\r\n\r\n        if (sizeLeft != lastDetectedWidth || forceUpdate) {\r\n            lastDetectedWidth = detectedWidth;\r\n\r\n            let absWidthTotal = 0, changedColumnIndexes = [], totalRelativePercentage = 0;\r\n\r\n            for (let i = 0; i < p.columns.length; i++) {\r\n                p.columns[i].actualWidthConsideringScrollbarWidth = null;\r\n            }\r\n\r\n            for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                let col = p.visibleColumns[i];\r\n                if (col.widthMode === ColumnWidthMode.ABSOLUTE) {\r\n                    let width = col.width;\r\n                    width += col.arrowProposedWidth || 0; // Sort-arrow width\r\n                    if (!col.ignoreMin && width < o.minColumnWidth) {\r\n                        width = o.minColumnWidth;\r\n                    }\r\n                    sizeLeft -= width;\r\n                    absWidthTotal += width;\r\n\r\n                    // Update actualWidth\r\n                    if (width !== col.actualWidth) {\r\n                        col.actualWidth = width;\r\n                        changedColumnIndexes.push(i);\r\n                    }\r\n                } else if (col.widthMode === ColumnWidthMode.AUTO) {\r\n                    let width = getTextWidth.call(this, col.label) + 20;\r\n                    width += col.arrowProposedWidth || 0; // Sort-arrow width\r\n                    if (!col.ignoreMin && width < o.minColumnWidth) {\r\n                        width = o.minColumnWidth;\r\n                    }\r\n                    sizeLeft -= width;\r\n                    absWidthTotal += width;\r\n\r\n                    // Update actualWidth\r\n                    if (width !== col.actualWidth) {\r\n                        col.actualWidth = width;\r\n                        if (!o.convertColumnWidthsToRelative) {\r\n                            changedColumnIndexes.push(i);\r\n                        }\r\n                    }\r\n                } else if (col.widthMode === ColumnWidthMode.RELATIVE) {\r\n                    totalRelativePercentage += col.width;\r\n                    relatives++;\r\n                }\r\n            }\r\n\r\n            // Normalize relative sizes if needed\r\n            if (o.convertColumnWidthsToRelative) {\r\n                for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                    let col = p.visibleColumns[i];\r\n                    if (col.widthMode === ColumnWidthMode.AUTO) {\r\n                        col.widthMode = ColumnWidthMode.RELATIVE;\r\n                        sizeLeft += col.actualWidth;\r\n                        col.width = col.actualWidth / absWidthTotal;\r\n                        totalRelativePercentage += col.width;\r\n                        relatives++;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Normalize relative sizes if needed\r\n            if (relatives && ((totalRelativePercentage < 1 && o.relativeWidthGrowsToFillWidth) ||\r\n                (totalRelativePercentage > 1 && o.relativeWidthShrinksToFillWidth))) {\r\n                for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                    let col = p.visibleColumns[i];\r\n                    if (col.widthMode === ColumnWidthMode.RELATIVE) {\r\n                        col.width /= totalRelativePercentage;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let sizeLeftForRelative = Math.max(0, sizeLeft); // Use this as the space to take the relative widths out of\r\n            if (sizeLeftForRelative === 0) {\r\n                sizeLeftForRelative = p.table.clientWidth;\r\n            }\r\n\r\n            let minColumnWidthRelative = (o.minColumnWidth / sizeLeftForRelative);\r\n            if (isNaN(minColumnWidthRelative)) {\r\n                minColumnWidthRelative = 0;\r\n            }\r\n            if (minColumnWidthRelative > 0) {\r\n                let extraRelative = 0, delta;\r\n\r\n                // First pass - make sure they are all constrained to the minimum width\r\n                for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                    let col = p.visibleColumns[i];\r\n                    if (col.widthMode === ColumnWidthMode.RELATIVE) {\r\n                        if (!col.ignoreMin && col.width < minColumnWidthRelative) {\r\n                            extraRelative += minColumnWidthRelative - col.width;\r\n                            col.width = minColumnWidthRelative;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Second pass - try to take the extra width out of the other columns to compensate\r\n                for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                    let col = p.visibleColumns[i];\r\n                    if (col.widthMode === ColumnWidthMode.RELATIVE) {\r\n                        if (!col.ignoreMin && col.width > minColumnWidthRelative) {\r\n                            if (extraRelative > 0) {\r\n                                delta = Math.min(extraRelative, col.width - minColumnWidthRelative);\r\n                                col.width -= delta;\r\n                                extraRelative -= delta;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // Try to fill width\r\n            if (o.autoFillTableWidth && sizeLeft > 0) {\r\n                let nonResizableTotal = 0;\r\n                let sizeLeftToFill = sizeLeft;\r\n                \r\n                for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                    let col = p.visibleColumns[i];\r\n                    if (!col.resizable && col.widthMode === ColumnWidthMode.ABSOLUTE)\r\n                        nonResizableTotal += col.width;\r\n                    \r\n                    if (col.widthMode === ColumnWidthMode.RELATIVE)\r\n                        sizeLeftToFill -= Math.round(sizeLeftForRelative * col.width);\r\n                }\r\n                \r\n                let conv = ((detectedWidth - nonResizableTotal) / (detectedWidth - sizeLeftToFill - nonResizableTotal)) || NaN;\r\n                for (let i = 0; i < p.visibleColumns.length && sizeLeftToFill > 0; i++) {\r\n                    let col = p.visibleColumns[i];\r\n                    if (!col.resizable && col.widthMode === ColumnWidthMode.ABSOLUTE)\r\n                        continue;\r\n                    \r\n                    if (col.widthMode === ColumnWidthMode.RELATIVE) {\r\n                        col.width *= conv;\r\n                    } else {\r\n                        let width = col.actualWidth * conv;\r\n                        if (col.actualWidth !== width) {\r\n                            col.actualWidth = width;\r\n                            if (changedColumnIndexes.indexOf(i) === -1)\r\n                                changedColumnIndexes.push(i);\r\n                        }\r\n                    } \r\n                }\r\n            }\r\n            \r\n            // Materialize relative sizes\r\n            for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                let col = p.visibleColumns[i];\r\n                if (col.widthMode === ColumnWidthMode.RELATIVE) {\r\n                    let width = Math.round(sizeLeftForRelative * col.width);\r\n                    sizeLeft -= width;\r\n                    relatives--;\r\n\r\n                    // Take care of rounding errors\r\n                    if (relatives === 0 && sizeLeft === 1) { // Take care of rounding errors\r\n                        width++;\r\n                        sizeLeft--;\r\n                    }\r\n                    if (sizeLeft === -1) {\r\n                        width--;\r\n                        sizeLeft++;\r\n                    }\r\n\r\n                    // Update actualWidth\r\n                    if (width !== col.actualWidth) {\r\n                        col.actualWidth = width;\r\n                        changedColumnIndexes.push(i);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (p.visibleColumns.length) {\r\n                // (There should always be at least 1 column visible, but just in case)\r\n                p.visibleColumns[p.visibleColumns.length - 1].actualWidthConsideringScrollbarWidth =\r\n                    p.visibleColumns[p.visibleColumns.length - 1].actualWidth - (p.scrollbarWidth || 0);\r\n            }\r\n\r\n            if (renderColumns) {\r\n                let tableWidth = this._calculateTbodyWidth();\r\n\r\n                if (tableWidthBeforeCalculations < tableWidth) {\r\n                    this._updateTableWidth(false);\r\n                }\r\n\r\n                for (let i = 0; i < changedColumnIndexes.length; i++) {\r\n                    this._resizeColumnElements(changedColumnIndexes[i]);\r\n                }\r\n\r\n                if (tableWidthBeforeCalculations > tableWidth) {\r\n                    this._updateTableWidth(false);\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n})();\r\n\r\n/**\r\n * Notify the table that its height has changed\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.tableHeightChanged = function () {\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p;\r\n\r\n    if (!p.$table) {\r\n        return that;\r\n    }\r\n\r\n    let height = CssUtil.innerHeight(that.$el)\r\n        - (parseFloat(p.$table.css('border-top-width')) || 0) // Subtract top border of inner element\r\n        - (parseFloat(p.$table.css('border-bottom-width')) || 0); // Subtract bottom border of inner element\r\n\r\n    if (height != o.height) {\r\n\r\n        o.height = height;\r\n\r\n        if (p.tbody) {\r\n            // At least 1 pixel - to show scrollers correctly.\r\n            p.tbody.style.height = Math.max(o.height - CssUtil.outerHeight(p.$headerRow), 1) + 'px';\r\n        }\r\n\r\n        if (o.virtualTable) {\r\n            that.clearAndRender();\r\n        }\r\n    }\r\n\r\n    return that;\r\n};\r\n\r\n/**\r\n * Add rows to the table\r\n * @public\r\n * @expose\r\n * @param {Object[]} data - array of rows to add to the table\r\n * @param {Number} [at=-1] - where to add the rows at\r\n * @param {Boolean} [resort=false] - should resort all rows?\r\n * @param {Boolean} [render=true]\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.addRows = function (data, at, resort, render) {\r\n    let that = this,\r\n        p = that.p;\r\n        \r\n    if (typeof at === 'boolean') {\r\n        render = resort;\r\n        resort = at;\r\n        at = -1;\r\n    }\r\n    \r\n    if (typeof at !== 'number')\r\n        at = -1;\r\n    \r\n    if (at < 0 || at > p.rows.length)\r\n        at = p.rows.length;\r\n    \r\n    render = (render === undefined) ? true : !!render;\r\n\r\n    if (data) {\r\n        p.rows.add(data, at);\r\n        \r\n        if (p.filteredRows || (resort && p.rows.sortColumn.length)) {\r\n            \r\n            if (resort && p.rows.sortColumn.length) {\r\n                this.resort();\r\n            } else {\r\n                this._refilter();\r\n            }\r\n            \r\n            p.tableSkeletonNeedsRendering = true;\r\n            \r\n            if (render) {\r\n                // Render the skeleton with all rows from scratch\r\n                this.render();\r\n            }\r\n            \r\n        } else if (render) {\r\n            let childNodes = p.tbody.childNodes;\r\n            \r\n            if (that.o.virtualTable) {\r\n                \r\n                while (p.tbody.firstChild) {\r\n                    this.trigger('rowdestroy', p.tbody.firstChild);\r\n                    this._unbindCellEventsForRow(p.tbody.firstChild);\r\n                    p.tbody.removeChild(p.tbody.firstChild);\r\n                }\r\n\r\n                this._calculateVirtualHeight() // Calculate virtual height\r\n                    ._updateLastCellWidthFromScrollbar() // Detect vertical scrollbar height\r\n                    .render()\r\n                    ._updateTableWidth(false); // Update table width to suit the required width considering vertical scrollbar\r\n                \r\n            } else if (p.$tbody) {\r\n                \r\n                let firstRow = at,\r\n                    lastRow = at + data.length - 1;\r\n                \r\n                let renderedRows = that.renderRows(firstRow, lastRow);\r\n                p.tbody.insertBefore(renderedRows, childNodes[at] || null);\r\n                \r\n                for (let i = lastRow + 1; i < childNodes.length; i++) {\r\n                    let row = childNodes[i];\r\n                    row['rowIndex'] += data.length;\r\n                    row['physicalRowIndex'] += data.length;\r\n                }\r\n                               \r\n                this.render()\r\n                    ._updateLastCellWidthFromScrollbar() // Detect vertical scrollbar height, and update existing last cells\r\n                    ._updateTableWidth(true); // Update table width to suit the required width considering vertical scrollbar\r\n\r\n            }\r\n        }\r\n\r\n        this.trigger('addrows', data.length, false);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a row from the table\r\n * @public\r\n * @expose\r\n * @param {Number} physicalRowIndex - index\r\n * @param {Number} count - how many rows to remove\r\n * @param {Boolean=true} render\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.removeRows = function (physicalRowIndex, count, render) {\r\n    let that = this,\r\n        p = that.p;\r\n        \r\n    if (typeof count !== 'number' || count <= 0) return this;\r\n\r\n    if (physicalRowIndex < 0 || physicalRowIndex > p.rows.length - 1) return this;\r\n\r\n    p.rows.splice(physicalRowIndex, count);\r\n    render = (render === undefined) ? true : !!render;\r\n    \r\n    if (p.filteredRows) {\r\n        \r\n        this._refilter();\r\n        \r\n        p.tableSkeletonNeedsRendering = true;\r\n        \r\n        if (render) {\r\n            // Render the skeleton with all rows from scratch\r\n            this.render();\r\n        }\r\n        \r\n    } else if (render) {\r\n        \r\n        let childNodes = p.tbody.childNodes;\r\n        \r\n        if (this.o.virtualTable) {\r\n                \r\n            while (p.tbody.firstChild) {\r\n                this.trigger('rowdestroy', p.tbody.firstChild);\r\n                this._unbindCellEventsForRow(p.tbody.firstChild);\r\n                p.tbody.removeChild(p.tbody.firstChild);\r\n            }\r\n            \r\n            this._calculateVirtualHeight()\r\n                ._updateLastCellWidthFromScrollbar()\r\n                .render()\r\n                ._updateTableWidth(false); // Update table width to suit the required width considering vertical scrollbar\r\n                \r\n                \r\n        } else {\r\n            \r\n            let countRemoved = 0, lastRowIndex = physicalRowIndex + count - 1;\r\n            \r\n            for (let i = 0; i < childNodes.length; i++) {\r\n                let row = childNodes[i];\r\n                let index = row['physicalRowIndex'];\r\n                \r\n                if (index >= physicalRowIndex) {\r\n                    if (index <= lastRowIndex) {\r\n                        this.trigger('rowdestroy', row);\r\n                        this._unbindCellEventsForRow(row);\r\n                        p.tbody.removeChild(row);\r\n                        i--;\r\n                    } else {\r\n                        row['physicalRowIndex'] -= count;\r\n                    }\r\n                } else {\r\n                    row['rowIndex'] = i;\r\n                }\r\n            }\r\n                        \r\n            this.render()\r\n                ._updateLastCellWidthFromScrollbar()\r\n                ._updateTableWidth(true); // Update table width to suit the required width considering vertical scrollbar\r\n                \r\n        }\r\n    }\r\n    \r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a row from the table\r\n * @public\r\n * @expose\r\n * @param {Number} physicalRowIndex - index\r\n * @param {Boolean=true} render\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.removeRow = function (physicalRowIndex, render) {\r\n    return this.removeRows(physicalRowIndex, 1, render);\r\n};\r\n\r\n/**\r\n * Refreshes the row specified\r\n * @public\r\n * @expose\r\n * @param {Number} physicalRowIndex index\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.refreshRow = function(physicalRowIndex) {\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    if (physicalRowIndex < 0 || physicalRowIndex > p.rows.length - 1) return this;\r\n\r\n    // Find out if the row is in the rendered dataset\r\n    let rowIndex = -1;\r\n    if (p.filteredRows && (rowIndex = p.filteredRows.indexOf(p.rows[physicalRowIndex])) === -1) return this;\r\n\r\n    if (rowIndex === -1) {\r\n        rowIndex = physicalRowIndex;\r\n    }\r\n\r\n    let childNodes = p.tbody.childNodes;\r\n\r\n    if (this.o.virtualTable) {\r\n        // Now make sure that the row actually rendered, as this is a virtual table\r\n        let isRowVisible = false;\r\n        let i = 0;\r\n        \r\n        for (; i < childNodes.length; i++) {\r\n            if (childNodes[i]['physicalRowIndex'] === physicalRowIndex) {\r\n                isRowVisible = true;\r\n                this.trigger('rowdestroy', childNodes[i]);\r\n                this._unbindCellEventsForRow(childNodes[i]);\r\n                p.tbody.removeChild(childNodes[i]);\r\n                break;\r\n            }\r\n        }\r\n        \r\n        if (isRowVisible) {\r\n            let renderedRow = this.renderRows(rowIndex, rowIndex);\r\n            p.tbody.insertBefore(renderedRow, childNodes[i] || null);\r\n        }\r\n    } else {\r\n        this.trigger('rowdestroy', childNodes[rowIndex]);\r\n        this._unbindCellEventsForRow(childNodes[rowIndex]);\r\n        p.tbody.removeChild(childNodes[rowIndex]);\r\n        let renderedRow = this.renderRows(rowIndex, rowIndex);\r\n        p.tbody.insertBefore(renderedRow, childNodes[rowIndex] || null);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Get the DOM element for the specified row, if it exists\r\n * @public\r\n * @expose\r\n * @param {Number} physicalRowIndex index\r\n * @returns {Element?} row or null\r\n */\r\nDGTable.prototype.getRowElement = function(physicalRowIndex) {\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    if (physicalRowIndex < 0 || physicalRowIndex > p.rows.length - 1) return null;\r\n\r\n    // Find out if the row is in the rendered dataset\r\n    let rowIndex = -1;\r\n    if (p.filteredRows && (rowIndex = p.filteredRows.indexOf(p.rows[physicalRowIndex])) === -1) return this;\r\n\r\n    if (rowIndex === -1) {\r\n        rowIndex = physicalRowIndex;\r\n    }\r\n\r\n    let childNodes = p.tbody.childNodes;\r\n\r\n    if (this.o.virtualTable) {\r\n        // Now make sure that the row actually rendered, as this is a virtual table\r\n        for (let i = 0; i < childNodes.length; i++) {\r\n            if (childNodes[i]['physicalRowIndex'] === physicalRowIndex) {\r\n                return childNodes[i];\r\n            }\r\n        }\r\n    } else {\r\n        return childNodes[rowIndex];\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Refreshes all virtual rows\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.refreshAllVirtualRows = function () {\r\n\r\n    const p = this.p;\r\n\r\n    if (this.o.virtualTable) {\r\n        // Now make sure that the row actually rendered, as this is a virtual table\r\n        let rowsToRender = [];\r\n        let childNodes = p.tbody.childNodes;\r\n        \r\n        for (let i = 0, rowCount = childNodes.length; i < rowCount; i++) {\r\n            rowsToRender.push(childNodes[i]['physicalRowIndex']);\r\n            this.trigger('rowdestroy', childNodes[i]);\r\n            this._unbindCellEventsForRow(childNodes[i]);\r\n            p.tbody.removeChild(childNodes[i]);\r\n            i--;\r\n            rowCount--;\r\n        }\r\n        \r\n        for (let i = 0; i < rowsToRender.length; i++) {\r\n            let renderedRow = this.renderRows(rowsToRender[i], rowsToRender[i]);\r\n            p.tbody.appendChild(renderedRow);\r\n        }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Replace the whole dataset\r\n * @public\r\n * @expose\r\n * @param {Object[]} data array of rows to add to the table\r\n * @param {Boolean} [resort=false] should resort all rows?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setRows = function (data, resort) {\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    // this.scrollTop = this.$el.find('.table').scrollTop();\r\n    p.rows.reset(data);\r\n\r\n    if (resort && p.rows.sortColumn.length) {\r\n        this.resort();\r\n    } else {\r\n        this._refilter();\r\n    }\r\n\r\n    this.clearAndRender().trigger('addrows', data.length, true);\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Creates a URL representing the data in the specified element.\r\n * This uses the Blob or BlobBuilder of the modern browsers.\r\n * The url can be used for a Web Worker.\r\n * @public\r\n * @expose\r\n * @param {string} id Id of the element containing your data\r\n * @returns {String|null} the url, or null if not supported\r\n */\r\nDGTable.prototype.getUrlForElementContent = function (id) {\r\n    let blob,\r\n        el = document.getElementById(id);\r\n    if (el) {\r\n        let data = el.textContent;\r\n        if (typeof Blob === 'function') {\r\n            blob = new Blob([data]);\r\n        } else {\r\n            let BlobBuilder = global.BlobBuilder || global.WebKitBlobBuilder || global.MozBlobBuilder || global.MSBlobBuilder;\r\n            if (!BlobBuilder) {\r\n                return null;\r\n            }\r\n            let builder = new BlobBuilder();\r\n            builder.append(data);\r\n            blob = builder.getBlob();\r\n        }\r\n        return (global.URL || global.webkitURL).createObjectURL(blob);\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @returns {Boolean} A value indicating whether Web Workers are supported\r\n */\r\nDGTable.prototype.isWorkerSupported = function() {\r\n    return global['Worker'] instanceof Function;\r\n};\r\n\r\n/**\r\n * Creates a Web Worker for updating the table.\r\n * @public\r\n * @expose\r\n * @param {string} url Url to the script for the Web Worker\r\n * @param {Boolean=true} start if true, starts the Worker immediately\r\n * @returns {Worker?} the Web Worker, or null if not supported\r\n */\r\nDGTable.prototype.createWebWorker = function (url, start, resort) {\r\n    if (this.isWorkerSupported()) {\r\n        let that = this,\r\n            p = that.p;\r\n\r\n        let worker = new Worker(url);\r\n        let listener = function (evt) {\r\n            if (evt.data.append) {\r\n                that.addRows(evt.data.rows, resort);\r\n            } else {\r\n                that.setRows(evt.data.rows, resort);\r\n            }\r\n        };\r\n        worker.addEventListener('message', listener, false);\r\n        if (!p.workerListeners) {\r\n            p.workerListeners = [];\r\n        }\r\n        p.workerListeners.push({ worker: worker, listener: listener });\r\n        if (start || start === undefined) {\r\n            worker.postMessage(null);\r\n        }\r\n        return worker;\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Unbinds a Web Worker from the table, stopping updates.\r\n * @public\r\n * @expose\r\n * @param {Worker} worker the Web Worker\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.unbindWebWorker = function (worker) {\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    if (p.workerListeners) {\r\n        for (let j = 0; j < p.workerListeners.length; j++) {\r\n            if (p.workerListeners[j].worker == worker) {\r\n                worker.removeEventListener('message', p.workerListeners[j].listener, false);\r\n                p.workerListeners.splice(j, 1);\r\n                j--;\r\n            }\r\n        }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * A synonym for hideCellPreview()\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.abortCellPreview = function() {\r\n    this.hideCellPreview();\r\n    return this;\r\n};\r\n\r\n/**\r\n * Cancel a resize in progress\r\n * @expose\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.cancelColumnResize = function() {\r\n    const p = this.p;\r\n\r\n    if (p.$resizer) {\r\n        p.$resizer.remove();\r\n        p.$resizer = null;\r\n        $(document).off('mousemove.dgtable', p.onMouseMoveResizeAreaBound)\r\n            .off('mouseup.dgtable', p.onEndDragColumnHeaderBound);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * @param {jQuery_Event} event\r\n */\r\nDGTable.prototype._onVirtualTableScrolled = function (_event) {\r\n    this.render();\r\n};\r\n\r\n/**\r\n * @param {jQuery_Event} event\r\n */\r\nDGTable.prototype._onTableScrolledHorizontally = function (_event) {\r\n    const p = this.p;\r\n\r\n    p.header.scrollLeft = p.table.scrollLeft;\r\n};\r\n\r\n/**previousElementSibling\r\n * Reverse-calculate the column to resize from mouse position\r\n * @private\r\n * @param {jQuery_Event} e jQuery mouse event\r\n * @returns {String} name of the column which the mouse is over, or null if the mouse is not in resize position\r\n */\r\nDGTable.prototype._getColumnByResizePosition = function (e) {\r\n\r\n    let that = this,\r\n        o = that.o,\r\n        rtl = this._isTableRtl();\r\n\r\n    let $headerCell = $(e.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName),\r\n        headerCell = $headerCell[0];\r\n    if (headerCell['__cell']) {\r\n        headerCell = headerCell['__cell'];\r\n        $headerCell = $(headerCell);\r\n    }\r\n\r\n    let previousElementSibling = $headerCell[0].previousSibling;\r\n    while (previousElementSibling && previousElementSibling.nodeType != 1) {\r\n        previousElementSibling = previousElementSibling.previousSibling;\r\n    }\r\n\r\n    let firstCol = !previousElementSibling;\r\n\r\n    let mouseX = ((e.pageX != null ? e.pageX : e.originalEvent.pageX) || e.originalEvent.clientX) - $headerCell.offset().left;\r\n\r\n    if (rtl) {\r\n        if (!firstCol && CssUtil.outerWidth($headerCell) - mouseX <= o.resizeAreaWidth / 2) {\r\n            return previousElementSibling['columnName'];\r\n        } else if (mouseX <= o.resizeAreaWidth / 2) {\r\n            return headerCell['columnName'];\r\n        }\r\n    } else {\r\n        if (!firstCol && mouseX <= o.resizeAreaWidth / 2) {\r\n            return previousElementSibling['columnName'];\r\n        } else if (CssUtil.outerWidth($headerCell) - mouseX <= o.resizeAreaWidth / 2) {\r\n            return headerCell['columnName'];\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * @param {jQuery_Event} event\r\n */\r\nDGTable.prototype._onTouchStartColumnHeader = function (event) {\r\n    const p = this.p;\r\n\r\n    if (p.currentTouchId) return;\r\n\r\n    let startTouch = event.originalEvent.changedTouches[0];\r\n    p.currentTouchId = startTouch.identifier;\r\n\r\n    let $eventTarget = $(event.currentTarget);\r\n\r\n    let startPos = { x: startTouch.pageX, y: startTouch.pageY },\r\n        currentPos = startPos,\r\n        distanceTreshold = 9;\r\n        \r\n    let tapAndHoldTimeout;\r\n\r\n    let unbind = function () {\r\n        p.currentTouchId = null;\r\n        $eventTarget.off('touchend').off('touchcancel');\r\n        clearTimeout(tapAndHoldTimeout);\r\n    };\r\n\r\n    let fakeEvent = function (name) {\r\n        let fakeEvent = $.Event(name);\r\n        let extendObjects = Array.prototype.slice.call(arguments, 1);\r\n        $.each(['target', 'clientX', 'clientY', 'offsetX', 'offsetY', 'screenX', 'screenY', 'pageX', 'pageY', 'which'],\r\n            function () {\r\n                fakeEvent[this] = event[this];\r\n                for (let i = 0; i < extendObjects.length; i++) {\r\n                    if (extendObjects[i][this] != null) {\r\n                        fakeEvent[this] = extendObjects[i][this];\r\n                    }\r\n                }\r\n            });\r\n        return fakeEvent;\r\n    };\r\n\r\n    $eventTarget.trigger(fakeEvent('mousedown', event.originalEvent.changedTouches[0], { 'which': 1 }));\r\n\r\n    tapAndHoldTimeout = setTimeout(() => {\r\n        unbind();\r\n\r\n        // Prevent simulated mouse events after touchend\r\n        $eventTarget\r\n            .one('touchend', (event) => {\r\n                event.preventDefault();\r\n                $eventTarget.off('touchend').off('touchcancel');\r\n            })\r\n            .one('touchcancel', (_event) => {\r\n                $eventTarget.off('touchend').off('touchcancel');\r\n            });\r\n\r\n        let distanceTravelled = Math.sqrt(Math.pow(Math.abs(currentPos.x - startPos.x), 2) + Math.pow(Math.abs(currentPos.y - startPos.y), 2));\r\n\r\n        if (distanceTravelled < distanceTreshold) {\r\n            this.cancelColumnResize();\r\n            $eventTarget.trigger(fakeEvent('mouseup', event.originalEvent.changedTouches[0], { 'which': 3 }));\r\n        }\r\n\r\n    }, 500);\r\n\r\n    $eventTarget\r\n        .on('touchend', (event) => {\r\n            let touch = find(event.originalEvent.changedTouches, (touch) => touch.identifier === p.currentTouchId);\r\n            if (!touch) return;\r\n\r\n            unbind();\r\n\r\n            event.preventDefault(); // Prevent simulated mouse events\r\n\r\n            currentPos = { x: touch.pageX, y: touch.pageY };\r\n            let distanceTravelled = Math.sqrt(Math.pow(Math.abs(currentPos.x - startPos.x), 2) + Math.pow(Math.abs(currentPos.y - startPos.y), 2));\r\n\r\n            if (distanceTravelled < distanceTreshold || p.$resizer) {\r\n                $eventTarget.trigger(fakeEvent('mouseup', touch, { 'which': 1 }));\r\n                $eventTarget.trigger(fakeEvent('click', touch, { 'which': 1 }));\r\n            }\r\n\r\n        })\r\n        .on('touchcancel', () => {\r\n            unbind();\r\n        })\r\n        .on('touchmove', (event) => {\r\n            let touch = find(event.originalEvent.changedTouches, (touch) => touch.identifier === p.currentTouchId);\r\n            if (!touch) return;\r\n\r\n            // Keep track of current position, so we know if we need to cancel the tap-and-hold\r\n            currentPos = { x: touch.pageX, y: touch.pageY };\r\n\r\n            if (p.$resizer) {\r\n                event.preventDefault();\r\n\r\n                $eventTarget.trigger(fakeEvent('mousemove', touch));\r\n            }\r\n        });\r\n};\r\n\r\n/**\r\n * @param {jQuery_Event} e event\r\n */\r\nDGTable.prototype._onMouseDownColumnHeader = function (event) {\r\n    if (event.which !== 1) return this; // Only treat left-clicks\r\n\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p,\r\n        col = this._getColumnByResizePosition(event);\r\n\r\n    if (col) {\r\n        let column = p.columns.get(col);\r\n        if (!o.resizableColumns || !column || !column.resizable) {\r\n            return false;\r\n        }\r\n\r\n        let rtl = this._isTableRtl();\r\n\r\n        if (p.$resizer) {\r\n            $(p.$resizer).remove();\r\n        }\r\n        p.$resizer = $('<div></div>')\r\n            .addClass(o.resizerClassName)\r\n            .css({\r\n                'position': 'absolute',\r\n                'display': 'block',\r\n                'z-index': -1,\r\n                'visibility': 'hidden',\r\n                'width': '2px',\r\n                'background': '#000',\r\n                'opacity': 0.7,\r\n            })\r\n            .appendTo(this.$el);\r\n\r\n        let selectedHeaderCell = column.element,\r\n            commonAncestor = p.$resizer.parent();\r\n\r\n        let posCol = selectedHeaderCell.offset(),\r\n            posRelative = commonAncestor.offset();\r\n        if (ieVersion === 8) {\r\n            posCol = selectedHeaderCell.offset(); // IE8 bug, first time it receives zeros...\r\n        }\r\n        posRelative.left += parseFloat(commonAncestor.css('border-left-width')) || 0;\r\n        posRelative.top += parseFloat(commonAncestor.css('border-top-width')) || 0;\r\n        posCol.left -= posRelative.left;\r\n        posCol.top -= posRelative.top;\r\n        posCol.top -= parseFloat(selectedHeaderCell.css('border-top-width')) || 0;\r\n        let resizerWidth = CssUtil.outerWidth(p.$resizer);\r\n        if (rtl) {\r\n            posCol.left -= Math.ceil((parseFloat(selectedHeaderCell.css('border-left-width')) || 0) / 2);\r\n            posCol.left -= Math.ceil(resizerWidth / 2);\r\n        } else {\r\n            posCol.left += CssUtil.outerWidth(selectedHeaderCell);\r\n            posCol.left += Math.ceil((parseFloat(selectedHeaderCell.css('border-right-width')) || 0) / 2);\r\n            posCol.left -= Math.ceil(resizerWidth / 2);\r\n        }\r\n\r\n        p.$resizer\r\n            .css({\r\n                'z-index': '10',\r\n                'visibility': 'visible',\r\n                'left': posCol.left,\r\n                'top': posCol.top,\r\n                'height': CssUtil.height(this.$el),\r\n            })[0]['columnName'] = selectedHeaderCell[0]['columnName'];\r\n            \r\n        try { p.$resizer[0].style.zIndex = ''; }\r\n        catch (ignored) { /* we're ok with this */ }\r\n\r\n        $(document).on('mousemove.dgtable', p.onMouseMoveResizeAreaBound);\r\n        $(document).on('mouseup.dgtable', p.onEndDragColumnHeaderBound);\r\n\r\n        event.preventDefault();\r\n    }\r\n};\r\n\r\n/**\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onMouseMoveColumnHeader = function (event) {\r\n\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p;\r\n\r\n    if (o.resizableColumns) {\r\n        let col = this._getColumnByResizePosition(event);\r\n        let headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName)[0];\r\n        if (!col || !p.columns.get(col).resizable) {\r\n            headerCell.style.cursor = '';\r\n        } else {\r\n            headerCell.style.cursor = 'e-resize';\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * @param {jQuery_Event} event\r\n */\r\nDGTable.prototype._onMouseUpColumnHeader = function (event) {\r\n    if (event.which === 3) {\r\n        let o = this.o;\r\n        let $headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName);\r\n        let bounds = $headerCell.offset();\r\n        bounds['width'] = CssUtil.outerWidth($headerCell);\r\n        bounds['height'] = CssUtil.outerHeight($headerCell);\r\n        this.trigger('headercontextmenu', $headerCell[0]['columnName'], event.pageX, event.pageY, bounds);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onMouseLeaveColumnHeader = function (event) {\r\n    let o = this.o;\r\n    let headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName)[0];\r\n    headerCell.style.cursor = '';\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onClickColumnHeader = function (event) {\r\n    if (!this._getColumnByResizePosition(event)) {\r\n\r\n        let that = this,\r\n            o = that.o,\r\n            p = that.p;\r\n\r\n        let headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName)[0];\r\n        if (o.sortableColumns) {\r\n            let column = p.columns.get(headerCell['columnName']);\r\n            if (column && column.sortable) {\r\n                this.sort(headerCell['columnName'], undefined, true).render();\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onStartDragColumnHeader = function (event) {\r\n\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p;\r\n\r\n    if (o.movableColumns) {\r\n\r\n        let $headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName);\r\n        let column = p.columns.get($headerCell[0]['columnName']);\r\n        if (column && column.movable) {\r\n            $headerCell[0].style.opacity = 0.35;\r\n            p.dragId = Math.random() * 0x9999999; // Recognize this ID on drop\r\n            event.originalEvent.dataTransfer.setData('text', JSON.stringify({ dragId: p.dragId, column: column.name }));\r\n        } else {\r\n            event.preventDefault();\r\n        }\r\n\r\n    } else {\r\n\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {MouseEvent} event event\r\n */\r\nDGTable.prototype._onMouseMoveResizeArea = function (event) {\r\n\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    let column = p.columns.get(p.$resizer[0]['columnName']);\r\n    let rtl = this._isTableRtl();\r\n\r\n    let selectedHeaderCell = column.element,\r\n        commonAncestor = p.$resizer.parent();\r\n    let posCol = selectedHeaderCell.offset(), posRelative = commonAncestor.offset();\r\n    posRelative.left += parseFloat(commonAncestor.css('border-left-width')) || 0;\r\n    posCol.left -= posRelative.left;\r\n    let resizerWidth = CssUtil.outerWidth(p.$resizer);\r\n    \r\n    let isBoxing = selectedHeaderCell.css('box-sizing') === 'border-box';\r\n    \r\n    let actualX = event.pageX - posRelative.left;\r\n    let minX = posCol.left;\r\n\r\n    minX -= Math.ceil(resizerWidth / 2);\r\n\r\n    if (rtl) {\r\n        minX += CssUtil.outerWidth(selectedHeaderCell);\r\n        minX -= column.ignoreMin ? 0 : this.o.minColumnWidth;\r\n\r\n        if (!isBoxing) {\r\n            minX -= Math.ceil((parseFloat(selectedHeaderCell.css('border-left-width')) || 0) / 2);\r\n            minX -= this._horizontalPadding(selectedHeaderCell[0]);\r\n        }\r\n\r\n        if (actualX > minX) {\r\n            actualX = minX;\r\n        }\r\n    } else {\r\n        minX += column.ignoreMin ? 0 : this.o.minColumnWidth;\r\n        \r\n        if (!isBoxing) {\r\n            minX += Math.ceil((parseFloat(selectedHeaderCell.css('border-right-width')) || 0) / 2);\r\n            minX += this._horizontalPadding(selectedHeaderCell[0]);\r\n        }\r\n\r\n        if (actualX < minX) {\r\n            actualX = minX;\r\n        }\r\n    }\r\n\r\n    p.$resizer.css('left', actualX + 'px');\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {Event} event event\r\n */\r\nDGTable.prototype._onEndDragColumnHeader = function (event) {\r\n\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p;\r\n\r\n    if (!p.$resizer) {\r\n        event.target.style.opacity = null;\r\n    } else {\r\n        $(document).off('mousemove.dgtable', p.onMouseMoveResizeAreaBound)\r\n            .off('mouseup.dgtable', p.onEndDragColumnHeaderBound);\r\n\r\n        let column = p.columns.get(p.$resizer[0]['columnName']);\r\n        let rtl = this._isTableRtl();\r\n\r\n        let selectedHeaderCell = column.element,\r\n            commonAncestor = p.$resizer.parent();\r\n        let posCol = selectedHeaderCell.offset(), posRelative = commonAncestor.offset();\r\n        posRelative.left += parseFloat(commonAncestor.css('border-left-width')) || 0;\r\n        posCol.left -= posRelative.left;\r\n        let resizerWidth = CssUtil.outerWidth(p.$resizer);\r\n        \r\n        let isBoxing = selectedHeaderCell.css('box-sizing') === 'border-box';\r\n\r\n        let actualX = event.pageX - posRelative.left;\r\n        let baseX = posCol.left, minX = posCol.left;\r\n        let width = 0;\r\n\r\n        baseX -= Math.ceil(resizerWidth / 2);\r\n\r\n        if (rtl) {\r\n\r\n            if (!isBoxing) {\r\n                actualX += this._horizontalPadding(selectedHeaderCell[0]);\r\n                actualX += parseFloat(selectedHeaderCell.css('border-left-width')) || 0;\r\n                actualX += parseFloat(selectedHeaderCell.css('border-right-width')) || 0;\r\n            }\r\n\r\n            baseX += CssUtil.outerWidth(selectedHeaderCell);\r\n            \r\n            minX = baseX - (column.ignoreMin ? 0 : this.o.minColumnWidth);\r\n            if (actualX > minX) {\r\n                actualX = minX;\r\n            }\r\n\r\n            width = baseX - actualX;\r\n        } else {\r\n\r\n            if (!isBoxing) {\r\n                actualX -= this._horizontalPadding(selectedHeaderCell[0]);\r\n                actualX -= parseFloat(selectedHeaderCell.css('border-left-width')) || 0;\r\n                actualX -= parseFloat(selectedHeaderCell.css('border-right-width')) || 0;\r\n            }\r\n\r\n            minX = baseX + (column.ignoreMin ? 0 : this.o.minColumnWidth);\r\n            if (actualX < minX) {\r\n                actualX = minX;\r\n            }\r\n\r\n            width = actualX - baseX;\r\n        }\r\n        \r\n        p.$resizer.remove();\r\n        p.$resizer = null;\r\n\r\n        let sizeToSet = width;\r\n\r\n        if (column.widthMode === ColumnWidthMode.RELATIVE) {\r\n            let detectedWidth = this._calculateWidthAvailableForColumns();\r\n\r\n            let sizeLeft = detectedWidth;\r\n            //sizeLeft -= p.table.offsetWidth - p.table.clientWidth;\r\n\r\n            let totalRelativePercentage = 0;\r\n            let relatives = 0;\r\n\r\n            for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                let col = p.visibleColumns[i];\r\n                if (col.name === column.name) continue;\r\n\r\n                if (col.widthMode == ColumnWidthMode.RELATIVE) {\r\n                    totalRelativePercentage += col.width;\r\n                    relatives++;\r\n                } else {\r\n                    sizeLeft -= col.actualWidth;\r\n                }\r\n            }\r\n\r\n            sizeLeft = Math.max(1, sizeLeft);\r\n            sizeToSet = width / sizeLeft;\r\n\r\n            if (relatives > 0) {\r\n                // When there's more than one relative overall,\r\n                //   we can do relative enlarging/shrinking.\r\n                // Otherwise, we can end up having a 0 width.\r\n\r\n                let unNormalizedSizeToSet = sizeToSet / ((1 - sizeToSet) / totalRelativePercentage);\r\n\r\n                totalRelativePercentage += sizeToSet;\r\n\r\n                // Account for relative widths scaling later\r\n                if ((totalRelativePercentage < 1 && o.relativeWidthGrowsToFillWidth) ||\r\n                    (totalRelativePercentage > 1 && o.relativeWidthShrinksToFillWidth)) {\r\n                    sizeToSet = unNormalizedSizeToSet;\r\n                }\r\n            }\r\n            \r\n            sizeToSet *= 100;\r\n            sizeToSet += '%';\r\n        }\r\n\r\n        this.setColumnWidth(column.name, sizeToSet);\r\n    }\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onDragEnterColumnHeader = function (event) {\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p;\r\n\r\n    if (o.movableColumns) {\r\n        let dataTransferred = event.originalEvent.dataTransfer.getData('text');\r\n        if (dataTransferred) {\r\n            dataTransferred = JSON.parse(dataTransferred);\r\n        }\r\n        else {\r\n            dataTransferred = null; // WebKit does not provide the dataTransfer on dragenter?..\r\n        }\r\n\r\n        let $headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName);\r\n        if (!dataTransferred ||\r\n            (p.dragId == dataTransferred.dragId && $headerCell['columnName'] !== dataTransferred.column)) {\r\n\r\n            let column = p.columns.get($headerCell[0]['columnName']);\r\n            if (column && (column.movable || column != p.visibleColumns[0])) {\r\n                $($headerCell).addClass('drag-over');\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onDragOverColumnHeader = function (event) {\r\n    event.preventDefault();\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onDragLeaveColumnHeader = function (event) {\r\n    let o = this.o;\r\n    let $headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName);\r\n    if ( !$($headerCell[0].firstChild)\r\n            .has(event.originalEvent.relatedTarget).length ) {\r\n        $headerCell.removeClass('drag-over');\r\n    }\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onDropColumnHeader = function (event) {\r\n    event.preventDefault();\r\n\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p;\r\n\r\n    let dataTransferred = JSON.parse(event.originalEvent.dataTransfer.getData('text'));\r\n    let $headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName);\r\n    if (o.movableColumns && dataTransferred.dragId == p.dragId) {\r\n        let srcColName = dataTransferred.column,\r\n            destColName = $headerCell[0]['columnName'],\r\n            srcCol = p.columns.get(srcColName),\r\n            destCol = p.columns.get(destColName);\r\n        if (srcCol && destCol && srcCol.movable && (destCol.movable || destCol != p.visibleColumns[0])) {\r\n            this.moveColumn(srcColName, destColName);\r\n        }\r\n    }\r\n    $($headerCell).removeClass('drag-over');\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._clearSortArrows = function () {\r\n\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    if (p.$table) {\r\n        let tableClassName = this.o.tableClassName;\r\n        let sortedColumns = p.$headerRow.find('>div.' + tableClassName + '-header-cell.sorted');\r\n        let arrows = sortedColumns.find('>div>.sort-arrow');\r\n        for (let arrow of arrows) {\r\n            let col = p.columns.get(arrow.parentNode.parentNode['columnName']);\r\n            if (col) {\r\n                col.arrowProposedWidth = 0;\r\n            }\r\n        }\r\n        arrows.remove();\r\n        sortedColumns.removeClass('sorted').removeClass('desc');\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {String} column the name of the sort column\r\n * @param {Boolean} descending table is sorted descending\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._showSortArrow = function (column, descending) {\r\n\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    let col = p.columns.get(column);\r\n    if (!col) return false;\r\n    \r\n    let arrow = createElement('span');\r\n    arrow.className = 'sort-arrow';\r\n\r\n    if (col.element) {\r\n        col.element.addClass(descending ? 'sorted desc' : 'sorted');\r\n        col.element[0].firstChild.insertBefore(arrow, col.element[0].firstChild.firstChild);\r\n    }\r\n\r\n    if (col.widthMode != ColumnWidthMode.RELATIVE && this.o.adjustColumnWidthForSortArrow) {\r\n        col.arrowProposedWidth = arrow.scrollWidth + (parseFloat($(arrow).css('margin-right')) || 0) + (parseFloat($(arrow).css('margin-left')) || 0);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {Number} cellIndex index of the column in the DOM\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._resizeColumnElements = function (cellIndex) {\r\n\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    let headerCells = p.$headerRow.find('div.' + this.o.tableClassName + '-header-cell');\r\n    let col = p.columns.get(headerCells[cellIndex]['columnName']);\r\n\r\n    if (col) {\r\n        headerCells[cellIndex].style.width = (col.actualWidthConsideringScrollbarWidth || col.actualWidth) + 'px';\r\n\r\n        let width = (col.actualWidthConsideringScrollbarWidth || col.actualWidth) + 'px';\r\n        let tbodyChildren = p.$tbody[0].childNodes;\r\n        for (let i = 0, count = tbodyChildren.length; i < count; i++) {\r\n            let headerRow = tbodyChildren[i];\r\n            if (headerRow.nodeType !== 1) continue;\r\n            headerRow.childNodes[cellIndex].style.width = width;\r\n        }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * @returns {DGTable} self\r\n * */\r\nDGTable.prototype._destroyHeaderCells = function() {\r\n\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p;\r\n\r\n    if (p.$headerRow) {\r\n        this.trigger('headerrowdestroy', p.headerRow);\r\n        p.$headerRow.find('div.' + o.tableClassName + '-header-cell').remove();\r\n        p.$headerRow = null;\r\n        p.headerRow = null;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._renderSkeletonBase = function () {\r\n    let that = this,\r\n        p = that.p,\r\n        o = that.o;\r\n    \r\n    // Clean up old elements\r\n    \r\n    if (p.$table && o.virtualTable) {\r\n        p.$table.remove();\r\n        if (p.$tbody) {\r\n            let rows = p.$tbody[0].childNodes;\r\n            for (let i = 0, len = rows.length; i < len; i++) {\r\n                that.trigger('rowdestroy', rows[i]);\r\n                that._unbindCellEventsForRow(rows[i]);\r\n            }\r\n        }\r\n        p.$table = p.table = p.$tbody = p.tbody = null;\r\n    }\r\n    \r\n    that._destroyHeaderCells();\r\n    p.currentTouchId = null;\r\n    if (p.$header) {\r\n        p.$header.remove();\r\n    }    \r\n\r\n    // Create new base elements\r\n    let tableClassName = o.tableClassName,\r\n        headerCellClassName = tableClassName + '-header-cell',\r\n        header = createElement('div'),\r\n        $header = $(header),\r\n        headerRow = createElement('div'),\r\n        $headerRow = $(headerRow);\r\n\r\n    header.className = tableClassName + '-header';\r\n    headerRow.className = tableClassName + '-header-row';\r\n    \r\n    p.$header = $header;\r\n    p.header = header;\r\n    p.$headerRow = $headerRow;\r\n    p.headerRow = headerRow;\r\n    $headerRow.appendTo(p.$header);\r\n    $header.prependTo(this.$el);\r\n    \r\n    relativizeElement(that.$el);\r\n    \r\n    if (o.width == DGTable.Width.SCROLL) {\r\n        this.el.style.overflow = 'hidden';\r\n    } else {\r\n        this.el.style.overflow = '';\r\n    }\r\n    \r\n    if (!o.height && o.virtualTable) {\r\n        o.height = CssUtil.innerHeight(this.$el);\r\n    }\r\n    \r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._renderSkeletonHeaderCells = function () {\r\n    let that = this,\r\n        p = that.p,\r\n        o = that.o;\r\n        \r\n    let allowCellPreview = o.allowCellPreview,\r\n        allowHeaderCellPreview = o.allowHeaderCellPreview;\r\n\r\n    let tableClassName = o.tableClassName,\r\n        headerCellClassName = tableClassName + '-header-cell',\r\n        header = p.header,\r\n        $header = p.$header,\r\n        headerRow = p.headerRow,\r\n        $headerRow = p.$headerRow;\r\n\r\n    let ieDragDropHandler;\r\n    if (hasIeDragAndDropBug) {\r\n        ieDragDropHandler = function(evt) {\r\n            evt.preventDefault();\r\n            this.dragDrop();\r\n            return false;\r\n        };\r\n    }\r\n\r\n    let preventDefault = function (event) { event.preventDefault(); };\r\n\r\n    // Create header cells\r\n    for (let i = 0; i < p.visibleColumns.length; i++) {\r\n        let column = p.visibleColumns[i];\r\n        if (column.visible) {\r\n            let cell = createElement('div');\r\n            let $cell = $(cell);\r\n            cell.draggable = true;\r\n            cell.className = headerCellClassName;\r\n            cell.style.width = column.actualWidth + 'px';\r\n            if (o.sortableColumns && column.sortable) {\r\n                cell.className += ' sortable';\r\n            }\r\n            cell['columnName'] = column.name;\r\n            cell.setAttribute('data-column', column.name);\r\n            \r\n            let cellInside = createElement('div');\r\n            cellInside.innerHTML = o.headerCellFormatter(column.label, column.name);\r\n            cell.appendChild(cellInside);\r\n            if (allowCellPreview && allowHeaderCellPreview) {\r\n                p._bindCellHoverIn(cell);\r\n            }\r\n            headerRow.appendChild(cell);\r\n\r\n            p.visibleColumns[i].element = $cell;\r\n\r\n            $cell.on('mousedown.dgtable', that._onMouseDownColumnHeader.bind(that))\r\n                .on('mousemove.dgtable', that._onMouseMoveColumnHeader.bind(that))\r\n                .on('mouseup.dgtable', that._onMouseUpColumnHeader.bind(that))\r\n                .on('mouseleave.dgtable', that._onMouseLeaveColumnHeader.bind(that))\r\n                .on('touchstart.dgtable', that._onTouchStartColumnHeader.bind(that))\r\n                .on('dragstart.dgtable', that._onStartDragColumnHeader.bind(that))\r\n                .on('click.dgtable', that._onClickColumnHeader.bind(that))\r\n                .on('contextmenu.dgtable', preventDefault);\r\n            $(cellInside)\r\n                .on('dragenter.dgtable', that._onDragEnterColumnHeader.bind(that))\r\n                .on('dragover.dgtable', that._onDragOverColumnHeader.bind(that))\r\n                .on('dragleave.dgtable', that._onDragLeaveColumnHeader.bind(that))\r\n                .on('drop.dgtable', that._onDropColumnHeader.bind(that));\r\n\r\n            if (hasIeDragAndDropBug) {\r\n                $cell.on('selectstart.dgtable', ieDragDropHandler.bind(cell));\r\n            }\r\n\r\n            // Disable these to allow our own context menu events without interruption\r\n            $cell.css({ '-webkit-touch-callout': 'none', '-webkit-user-select': 'none', '-moz-user-select': 'none', '-ms-user-select': 'none', '-o-user-select': 'none', 'user-select': 'none' });\r\n        }\r\n    }\r\n\r\n    this.trigger('headerrowcreate', headerRow);\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._renderSkeletonBody = function () {\r\n    let that = this,\r\n        p = that.p,\r\n        o = that.o;\r\n\r\n    let tableClassName = o.tableClassName;\r\n        \r\n    // Calculate virtual row heights\r\n    if (o.virtualTable && !p.virtualRowHeight) {\r\n        let createDummyRow = function() {\r\n            let row = createElement('div'),\r\n                cell = row.appendChild(createElement('div')),\r\n                cellInner = cell.appendChild(createElement('div'));\r\n            row.className = tableClassName + '-row';\r\n            cell.className = tableClassName + '-cell';\r\n            cellInner.innerHTML = '0';\r\n            row.style.visibility = 'hidden';\r\n            row.style.position = 'absolute';\r\n            return row;\r\n        };\r\n\r\n        let $dummyTbody, $dummyWrapper = $('<div>')\r\n            .addClass(that.el.className)\r\n            .css({ 'z-index': -1, 'position': 'absolute', left: '0', top: '-9999px', width: '1px', overflow: 'hidden' })\r\n            .append(\r\n                $('<div>').addClass(tableClassName).append(\r\n                    $dummyTbody = $('<div>').addClass(tableClassName + '-body').css('width', 99999),\r\n                ),\r\n            );\r\n\r\n        $dummyWrapper.appendTo(document.body);\r\n\r\n        let row1 = createDummyRow(), row2 = createDummyRow(), row3 = createDummyRow();\r\n        $dummyTbody.append(row1, row2, row3);\r\n\r\n        p.virtualRowHeightFirst = CssUtil.outerHeight(row1);\r\n        p.virtualRowHeight = CssUtil.outerHeight(row2);\r\n        p.virtualRowHeightLast = CssUtil.outerHeight(row3);\r\n\r\n        p.virtualRowHeightMin = Math.min(Math.min(p.virtualRowHeightFirst, p.virtualRowHeight), p.virtualRowHeightLast);\r\n        p.virtualRowHeightMax = Math.max(Math.max(p.virtualRowHeightFirst, p.virtualRowHeight), p.virtualRowHeightLast);\r\n\r\n        $dummyWrapper.remove();\r\n    }\r\n\r\n    // Create inner table and tbody\r\n    if (!p.$table) {\r\n\r\n        let fragment = document.createDocumentFragment();\r\n        \r\n        // Create the inner table element\r\n        let table = createElement('div');\r\n        let $table = $(table);\r\n        table.className = tableClassName;\r\n\r\n        if (o.virtualTable) {\r\n            table.className += ' virtual';\r\n        }\r\n\r\n        let tableHeight = (o.height - CssUtil.outerHeight(p.$headerRow));\r\n        if ($table.css('box-sizing') !== 'border-box') {\r\n            tableHeight -= parseFloat($table.css('border-top-width')) || 0;\r\n            tableHeight -= parseFloat($table.css('border-bottom-width')) || 0;\r\n            tableHeight -= parseFloat($table.css('padding-top')) || 0;\r\n            tableHeight -= parseFloat($table.css('padding-bottom')) || 0;\r\n        }\r\n        p.visibleHeight = tableHeight;\r\n        table.style.height = o.height ? tableHeight + 'px' : 'auto';\r\n        table.style.display = 'block';\r\n        table.style.overflowY = 'auto';\r\n        table.style.overflowX = o.width == DGTable.Width.SCROLL ? 'auto' : 'hidden';\r\n        fragment.appendChild(table);\r\n\r\n        // Create the \"tbody\" element\r\n        let tbody = createElement('div');\r\n        let $tbody = $(tbody);\r\n        tbody.className = o.tableClassName + '-body';\r\n        p.table = table;\r\n        p.tbody = tbody;\r\n        p.$table = $table;\r\n        p.$tbody = $tbody;\r\n\r\n        if (o.virtualTable) {\r\n            p.virtualVisibleRows = Math.ceil(p.visibleHeight / p.virtualRowHeightMin);\r\n        }\r\n\r\n        that._calculateVirtualHeight();\r\n\r\n        relativizeElement($tbody);\r\n        relativizeElement($table);\r\n\r\n        table.appendChild(tbody);\r\n        that.el.appendChild(fragment);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n * @deprecated\r\n */\r\nDGTable.prototype._renderSkeleton = function () {\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._updateLastCellWidthFromScrollbar = function(force) {\r\n\r\n    const p = this.p;\r\n\r\n    // Calculate scrollbar's width and reduce from lat column's width\r\n    let scrollbarWidth = p.table.offsetWidth - p.table.clientWidth;\r\n    if (scrollbarWidth != p.scrollbarWidth || force) {\r\n        p.scrollbarWidth = scrollbarWidth;\r\n        for (let i = 0; i < p.columns.length; i++) {\r\n            p.columns[i].actualWidthConsideringScrollbarWidth = null;\r\n        }\r\n\r\n        if (p.scrollbarWidth > 0 && p.visibleColumns.length > 0) {\r\n            // (There should always be at least 1 column visible, but just in case)\r\n            let lastColIndex = p.visibleColumns.length - 1;\r\n\r\n            p.visibleColumns[lastColIndex].actualWidthConsideringScrollbarWidth = p.visibleColumns[lastColIndex].actualWidth - p.scrollbarWidth;\r\n            let lastColWidth = p.visibleColumns[lastColIndex].actualWidthConsideringScrollbarWidth + 'px';\r\n            let tbodyChildren = p.tbody.childNodes;\r\n            for (let i = 0, count = tbodyChildren.length; i < count; i++) {\r\n                let row = tbodyChildren[i];\r\n                if (row.nodeType !== 1) continue;\r\n                row.childNodes[lastColIndex].style.width = lastColWidth;\r\n            }\r\n\r\n            p.headerRow.childNodes[lastColIndex].style.width = lastColWidth;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Explicitly set the width of the table based on the sum of the column widths\r\n * @private\r\n * @param {boolean} parentSizeMayHaveChanged Parent size may have changed, treat rendering accordingly\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._updateTableWidth = function (parentSizeMayHaveChanged) {\r\n    const o = this.o, p = this.p;\r\n    let width = this._calculateTbodyWidth();\r\n\r\n    p.tbody.style.minWidth = width + 'px';\r\n    p.headerRow.style.minWidth = (width + (p.scrollbarWidth || 0)) + 'px';\r\n\r\n    p.$table.off('scroll', p.onTableScrolledHorizontallyBound);\r\n\r\n    if (o.width == DGTable.Width.AUTO) {\r\n        // Update wrapper element's size to fully contain the table body\r\n\r\n        CssUtil.width(p.$table, CssUtil.outerWidth(p.$tbody));\r\n        CssUtil.width(this.$el, CssUtil.outerWidth(p.$table));\r\n\r\n    } else if (o.width == DGTable.Width.SCROLL) {\r\n\r\n        if (parentSizeMayHaveChanged) {\r\n            let lastScrollTop = p.table ? p.table.scrollTop : 0,\r\n                lastScrollLeft = p.table ? p.table.scrollLeft : 0;\r\n\r\n            // BUGFIX: Relayout before recording the widths\r\n            webkitRenderBugfix(this.el);\r\n\r\n            p.table.scrollTop = lastScrollTop;\r\n            p.table.scrollLeft = lastScrollLeft;\r\n            p.header.scrollLeft = lastScrollLeft;\r\n        }\r\n\r\n        p.$table.on('scroll', p.onTableScrolledHorizontallyBound);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {Boolean}\r\n */\r\nDGTable.prototype._isTableRtl = function() {\r\n    return this.p.$table.css('direction') === 'rtl';\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {Object} column column object\r\n * @returns {String}\r\n */\r\nDGTable.prototype._serializeColumnWidth = function(column) {\r\n    return column.widthMode === ColumnWidthMode.AUTO ? 'auto' :\r\n        column.widthMode === ColumnWidthMode.RELATIVE ? column.width * 100 + '%' :\r\n            column.width;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {HTMLElement} el\r\n */\r\nDGTable.prototype._cellMouseOverEvent = function(el) {\r\n    const o = this.o, p = this.p;\r\n\r\n    let elInner = el.firstChild;\r\n\r\n    if ((elInner.scrollWidth - elInner.clientWidth > 1) ||\r\n        (elInner.scrollHeight - elInner.clientHeight > 1)) {\r\n\r\n        this.hideCellPreview();\r\n        p.abortCellPreview = false;\r\n\r\n        let $el = $(el), $elInner = $(elInner);\r\n        let previewCell = createElement('div'), $previewCell = $(previewCell);\r\n        previewCell.innerHTML = el.innerHTML;\r\n        previewCell.className = o.cellPreviewClassName;\r\n\r\n        let isHeaderCell = $el.hasClass(o.tableClassName + '-header-cell');\r\n        if (isHeaderCell) {\r\n            previewCell.className += ' header';\r\n            if ($el.hasClass('sortable')) {\r\n                previewCell.className += ' sortable';\r\n            }\r\n\r\n            previewCell.draggable = true;\r\n\r\n            $(previewCell).on('mousedown', this._onMouseDownColumnHeader.bind(this))\r\n                .on('mousemove', this._onMouseMoveColumnHeader.bind(this))\r\n                .on('mouseup', this._onMouseUpColumnHeader.bind(this))\r\n                .on('mouseleave', this._onMouseLeaveColumnHeader.bind(this))\r\n                .on('touchstart', this._onTouchStartColumnHeader.bind(this))\r\n                .on('dragstart', this._onStartDragColumnHeader.bind(this))\r\n                .on('click', this._onClickColumnHeader.bind(this))\r\n                .on('contextmenu.dgtable', function (event) { event.preventDefault(); });\r\n            $(previewCell.firstChild)\r\n                .on('dragenter', this._onDragEnterColumnHeader.bind(this))\r\n                .on('dragover', this._onDragOverColumnHeader.bind(this))\r\n                .on('dragleave', this._onDragLeaveColumnHeader.bind(this))\r\n                .on('drop', this._onDropColumnHeader.bind(this));\r\n\r\n            if (hasIeDragAndDropBug) {\r\n                $(previewCell).on('selectstart', (function(evt) {\r\n                    evt.preventDefault();\r\n                    this.dragDrop();\r\n                    return false;\r\n                }).bind(previewCell));\r\n            }\r\n        }\r\n\r\n        let paddingL = parseFloat($el.css('padding-left')) || 0,\r\n            paddingR = parseFloat($el.css('padding-right')) || 0,\r\n            paddingT = parseFloat($el.css('padding-top')) || 0,\r\n            paddingB = parseFloat($el.css('padding-bottom')) || 0;\r\n\r\n        let requiredWidth = elInner.scrollWidth + (el.clientWidth - elInner.offsetWidth);\r\n\r\n        let borderBox = $el.css('box-sizing') === 'border-box';\r\n        if (borderBox) {\r\n            $previewCell.css('box-sizing', 'border-box');\r\n        } else {\r\n            requiredWidth -= paddingL + paddingR;\r\n            $previewCell.css('margin-top', parseFloat($(el).css('border-top-width')) || 0);\r\n        }\r\n\r\n        if (!p.transparentBgColor1) {\r\n            // Detect browser's transparent spec\r\n            let tempDiv = document.createElement('div');\r\n            tempDiv.style.backgroundColor = 'transparent';\r\n            p.transparentBgColor1 = $(tempDiv).css('background-color');\r\n            tempDiv.style.backgroundColor = 'rgba(0,0,0,0)';\r\n            p.transparentBgColor2 = $(tempDiv).css('background-color');\r\n        }\r\n\r\n        let css = {\r\n            'box-sizing': borderBox ? 'border-box' : 'content-box',\r\n            'width': requiredWidth,\r\n            'min-height': CssUtil.height($el),\r\n            'padding-left': paddingL,\r\n            'padding-right': paddingR,\r\n            'padding-top': paddingT,\r\n            'padding-bottom': paddingB,\r\n            'overflow': 'hidden',\r\n            'position': 'absolute',\r\n            'z-index': '-1',\r\n            'left': '0',\r\n            'top': '0',\r\n            'cursor': 'default',\r\n        };\r\n\r\n        if (css) {\r\n            let bgColor = $(el).css('background-color');\r\n            if (bgColor === p.transparentBgColor1 || bgColor === p.transparentBgColor2) {\r\n                bgColor = $(el.parentNode).css('background-color');\r\n            }\r\n            if (bgColor === p.transparentBgColor1 || bgColor === p.transparentBgColor2) {\r\n                bgColor = '#fff';\r\n            }\r\n            css['background-color'] = bgColor;\r\n        }\r\n\r\n        $previewCell.css(css);\r\n\r\n        this.el.appendChild(previewCell);\r\n\r\n        $(previewCell.firstChild).css({\r\n            'direction': $elInner.css('direction'),\r\n            'white-space': $elInner.css('white-space'),\r\n        });\r\n\r\n        if (isHeaderCell) {\r\n            // Disable these to allow our own context menu events without interruption\r\n            $previewCell.css({\r\n                '-webkit-touch-callout': 'none',\r\n                '-webkit-user-select': 'none',\r\n                '-moz-user-select': 'none',\r\n                '-ms-user-select': 'none',\r\n                '-o-user-select': 'none',\r\n                'user-select': 'none',\r\n            });\r\n        }\r\n\r\n        previewCell['rowIndex'] = el.parentNode['rowIndex'];\r\n        let physicalRowIndex = previewCell['physicalRowIndex'] = el.parentNode['physicalRowIndex'];\r\n        previewCell['columnName'] = p.visibleColumns[nativeIndexOf.call(el.parentNode.childNodes, el)].name;\r\n\r\n        try {\r\n            let selection = SelectionHelper.saveSelection(el);\r\n            if (selection)\r\n                SelectionHelper.restoreSelection(previewCell, selection);\r\n        } catch (ignored) { /* we're ok with this */ }\r\n        \r\n        this.trigger(\r\n            'cellpreview',\r\n            previewCell.firstChild,\r\n            physicalRowIndex == null ? null : physicalRowIndex,\r\n            previewCell['columnName'],\r\n            physicalRowIndex == null ? null : p.rows[physicalRowIndex],\r\n            el,\r\n        );\r\n\r\n        if (p.abortCellPreview) {\r\n            $previewCell.remove();\r\n            return;\r\n        }\r\n\r\n        let $parent = this.$el;\r\n        let $scrollParent = $parent[0] === window ? $(document) : $parent;\r\n\r\n        let offset = $el.offset();\r\n        let parentOffset = $parent.offset();\r\n        let rtl = $el.css('float') === 'right';\r\n        let prop = rtl ? 'right' : 'left';\r\n\r\n        // Handle RTL, go from the other side\r\n        if (rtl) {\r\n            let windowWidth = $(window).width();\r\n            offset.right = windowWidth - (offset.left + CssUtil.outerWidth($el));\r\n            parentOffset.right = windowWidth - (parentOffset.left + CssUtil.outerWidth($parent));\r\n        }\r\n\r\n        // If the parent has borders, then it would offset the offset...\r\n        offset.left -= parseFloat($parent.css('border-left-width')) || 0;\r\n        offset.right -= parseFloat($parent.css('border-right-width')) || 0;\r\n        offset.top -= parseFloat($parent.css('border-top-width')) || 0;\r\n\r\n        // Handle border widths of the element being offset\r\n        offset[prop] += parseFloat($(el).css('border-' + prop + '-width')) || 0;\r\n        offset.top += parseFloat($(el).css('border-top-width')) || parseFloat($(el).css('border-bottom-width')) || 0;\r\n\r\n        // Subtract offsets to get offset relative to parent\r\n        offset.left -= parentOffset.left;\r\n        offset.right -= parentOffset.right;\r\n        offset.top -= parentOffset.top;\r\n\r\n        // Constrain horizontally\r\n        let minHorz = 0,\r\n            maxHorz = $parent - CssUtil.outerWidth($previewCell);\r\n        offset[prop] = offset[prop] < minHorz ?\r\n            minHorz :\r\n            (offset[prop] > maxHorz ? maxHorz : offset[prop]);\r\n\r\n        // Constrain vertically\r\n        let totalHeight = CssUtil.outerHeight($el);\r\n        let maxTop = $scrollParent.scrollTop() + CssUtil.innerHeight($parent) - totalHeight;\r\n        if (offset.top > maxTop) {\r\n            offset.top = Math.max(0, maxTop);\r\n        }\r\n\r\n        // Apply css to preview cell\r\n        let previewCss = {\r\n            top: offset.top,\r\n            'z-index': 9999,\r\n        };\r\n        previewCss[prop] = offset[prop];\r\n\r\n        $previewCell.css(previewCss);\r\n\r\n        previewCell['__cell'] = el;\r\n        p.$cellPreviewCell = $previewCell;\r\n        el['__previewCell'] = previewCell;\r\n\r\n        p._bindCellHoverOut(el);\r\n        p._bindCellHoverOut(previewCell);\r\n\r\n        $previewCell.on('mousewheel', (event) => {\r\n            let originalEvent = event.originalEvent;\r\n            let xy = originalEvent.wheelDelta || -originalEvent.detail,\r\n                x = originalEvent.wheelDeltaX || (originalEvent.axis == 1 ? xy : 0),\r\n                y = originalEvent.wheelDeltaY || (originalEvent.axis == 2 ? xy : 0);\r\n\r\n            if (xy) {\r\n                this.hideCellPreview();\r\n            }\r\n\r\n            if (y && p.table.scrollHeight > p.table.clientHeight) {\r\n                let scrollTop = (y * -1) + p.$table.scrollTop();\r\n                p.$table.scrollTop(scrollTop);\r\n            }\r\n\r\n            if (x && p.table.scrollWidth > p.table.clientWidth) {\r\n                let scrollLeft = (x * -1) + p.$table.scrollLeft();\r\n                p.$table.scrollLeft(scrollLeft);\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {HTMLElement} el\r\n */\r\nDGTable.prototype._cellMouseOutEvent = function(_el) {\r\n    this.hideCellPreview();\r\n};\r\n\r\n/**\r\n * Hides the current cell preview,\r\n * or prevents the one that is currently trying to show (in the 'cellpreview' event)\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.hideCellPreview = function() {\r\n    const p = this.p;\r\n    \r\n    if (p.$cellPreviewCell) {\r\n        let previewCell = p.$cellPreviewCell[0];\r\n        let origCell = previewCell['__cell'];\r\n        let selection;\r\n        \r\n        try {\r\n            selection = SelectionHelper.saveSelection(previewCell);\r\n        } catch (ignored) { /* we're ok with this */ }\r\n        \r\n        p.$cellPreviewCell.remove();\r\n        p._unbindCellHoverOut(origCell);\r\n        p._unbindCellHoverOut(previewCell);\r\n        \r\n        try {\r\n            if (selection)\r\n                SelectionHelper.restoreSelection(origCell, selection);\r\n        } catch (ignored) { /* we're ok with this */ }\r\n\r\n        this.trigger('cellpreviewdestroy', previewCell.firstChild, previewCell['physicalRowIndex'], previewCell['columnName'], origCell);\r\n\r\n        origCell['__previewCell'] = null;\r\n        previewCell['__cell'] = null;\r\n\r\n        p.$cellPreviewCell = null;\r\n        p.abortCellPreview = false;\r\n    } else {\r\n        p.abortCellPreview = true;\r\n    }\r\n    \r\n    return this;\r\n};\r\n\r\n// It's a shame the Google Closure Compiler does not support exposing a nested @param\r\n\r\n/**\r\n * @typedef {Object} SERIALIZED_COLUMN\r\n * @property {Number|null|undefined} [order=0]\r\n * @property {String|null|undefined} [width='auto']\r\n * @property {Boolean|null|undefined} [visible=true]\r\n * */\r\n\r\n/**\r\n * @typedef {Object} SERIALIZED_COLUMN_SORT\r\n * @property {String|null|undefined} [column='']\r\n * @property {Boolean|null|undefined} [descending=false]\r\n * */\r\n\r\n/**\r\n * @enum {ColumnWidthMode|number|undefined}\r\n * @const\r\n * @typedef {ColumnWidthMode}\r\n */\r\nconst ColumnWidthMode = {\r\n    /** @const*/ AUTO: 0,\r\n    /** @const*/ ABSOLUTE: 1,\r\n    /** @const*/ RELATIVE: 2,\r\n};\r\n\r\n/**\r\n * @enum {DGTable.Width|String|undefined}\r\n * @const\r\n * @typedef {DGTable.Width}\r\n */\r\nDGTable.Width = {\r\n    /** @const*/ NONE: 'none',\r\n    /** @const*/ AUTO: 'auto',\r\n    /** @const*/ SCROLL: 'scroll',\r\n};\r\n\r\n/**\r\n * @expose\r\n * @typedef {Object} COLUMN_SORT_OPTIONS\r\n * @property {String|null|undefined} column\r\n * @property {Boolean|null|undefined} [descending=false]\r\n * */\r\n\r\n/**\r\n * @expose\r\n * @typedef {Object} COLUMN_OPTIONS\r\n * @property {String|null|undefined} width\r\n * @property {String|null|undefined} name\r\n * @property {String|null|undefined} label\r\n * @property {String|null|undefined} dataPath - defaults to `name`\r\n * @property {String|null|undefined} comparePath - defaults to `dataPath`\r\n * @property {Number|String|null|undefined} comparePath\r\n * @property {Boolean|null|undefined} [resizable=true]\r\n * @property {Boolean|null|undefined} [movable=true]\r\n * @property {Boolean|null|undefined} [sortable=true]\r\n * @property {Boolean|null|undefined} [visible=true]\r\n * @property {String|null|undefined} [cellClasses]\r\n * @property {Boolean|null|undefined} [ignoreMin=false]\r\n * */\r\n\r\n/**\r\n * @typedef {Object} DGTable.Options\r\n * @property {COLUMN_OPTIONS[]} [columns]\r\n * @property {Number} [height]\r\n * @property {DGTable.Width} [width]\r\n * @property {Boolean|null|undefined} [virtualTable=true]\r\n * @property {Boolean|null|undefined} [resizableColumns=true]\r\n * @property {Boolean|null|undefined} [movableColumns=true]\r\n * @property {Number|null|undefined} [sortableColumns=1]\r\n * @property {Boolean|null|undefined} [adjustColumnWidthForSortArrow=true]\r\n * @property {Boolean|null|undefined} [relativeWidthGrowsToFillWidth=true]\r\n * @property {Boolean|null|undefined} [relativeWidthShrinksToFillWidth=false]\r\n * @property {Boolean|null|undefined} [convertColumnWidthsToRelative=false]\r\n * @property {Boolean|null|undefined} [autoFillTableWidth=false]\r\n * @property {String|null|undefined} [cellClasses]\r\n * @property {String|String[]|COLUMN_SORT_OPTIONS|COLUMN_SORT_OPTIONS[]} [sortColumn]\r\n * @property {Function|null|undefined} [cellFormatter=null]\r\n * @property {Function|null|undefined} [headerCellFormatter=null]\r\n * @property {Number|null|undefined} [rowsBufferSize=10]\r\n * @property {Number|null|undefined} [minColumnWidth=35]\r\n * @property {Number|null|undefined} [resizeAreaWidth=8]\r\n * @property {{function(string,boolean):{function(a:*,b:*):boolean}}} [onComparatorRequired]\r\n * @property {String|null|undefined} [resizerClassName=undefined]\r\n * @property {String|null|undefined} [tableClassName=undefined]\r\n * @property {Boolean|null|undefined} [allowCellPreview=true]\r\n * @property {Boolean|null|undefined} [allowHeaderCellPreview=true]\r\n * @property {String|null|undefined} [cellPreviewClassName=undefined]\r\n * @property {Boolean|null|undefined} [cellPreviewAutoBackground=true]\r\n * @property {Element|null|undefined} [el=undefined]\r\n * @property {String|null|undefined} [className=undefined]\r\n * @property {Function|null|undefined} [filter=undefined]\r\n * */\r\n\r\n/**\r\n * @typedef {{\r\n     *  currentTarget: Element,\r\n     *  data: Object.<string, *>,\r\n     *  delegateTarget: Element,\r\n     *  isDefaultPrevented: Boolean,\r\n     *  isImmediatePropagationStopped: Boolean,\r\n     *  isPropagationStopped: Boolean,\r\n     *  namespace: string,\r\n     *  originalEvent: MouseEvent|TouchEvent|Event,\r\n     *  pageX: Number,\r\n     *  pageY: Number,\r\n     *  preventDefault: Function,\r\n     *  props: Object.<string, *>,\r\n     *  relatedTarget: Element,\r\n     *  result: *,\r\n     *  stopImmediatePropagation: Function,\r\n     *  stopPropagation: Function,\r\n     *  target: Element,\r\n     *  timeStamp: Number,\r\n     *  type: string,\r\n     *  which: Number\r\n     * }} jQuery_Event\r\n * */\r\n\r\nif (!$.controls) {\r\n    $.controls = {};\r\n}\r\n\r\n$.controls.dgtable = DGTable;\r\n\r\nexport default DGTable;"],"names":["indexOf","Array","prototype","find","array","predicate","i","len","length","htmlEncode","text","replace","RowCollection","collection","Object","assign","initialize","apply","arguments","options","sortColumn","add","rows","at","splice","push","reset","filteredCollection","filterFunc","args","this","row","onComparatorRequired","onSort","nativeSort","sort","getDefaultComparator","column","descending","columnName","comparePath","split","pathLength","hasPath","lessVal","moreVal","leftRow","rightRow","leftVal","rightVal","ColumnCollection","silent","comparator","comparators","bind","call","value","get","name","getByOrder","order","normalizeOrder","ordered","col1","col2","getVisibleColumns","visible","getMaxOrder","moveColumn","src","dest","col","srcOrder","destOrder","$","jQuery","hasComputedStyle","document","defaultView","getComputedStyle","jQuerySupportsFractions","fn","jquery","cssExpands","sizeKeys","CssUtil","rtlScrollType","generateSizeFunction","key","cssExpand","inner","outer","el","Element","size","border","padding","style","currentStyle","isBoxing","includeMargins","parseFloat","margin","undefined","generatejQueryFunction","isArray","ret","slice","SelectionHelper","range","window","getSelection","getRangeAt","commonAncestorContainer","child","parent","parentNode","isChildOf","preSelectionRange","cloneRange","selectNodeContents","setEnd","startContainer","startOffset","start","toString","end","savedSel","node","charIndex","nodeStack","foundStart","stop","createRange","setStart","collapse","pop","nodeType","nextCharIndex","childNodes","sel","removeAllRanges","addRange","detectRtlScrollType","definer","createElement","dir","direction","fontSize","width","height","position","top","overflow","textContent","body","appendChild","type","scrollLeft","removeChild","ScrollHelper","rtl","scrollWidth","clientWidth","x","normalizeScrollLeft","denormalizeScrollLeft","normalizeScrollHorz","denormalizeScrollHorz","ByColumnFilter","keyword","actualVal","caseSensitive","toLowerCase","nativeIndexOf","userAgent","navigator","ieVersion","substr","hasIeDragAndDropBug","hasOwnProperty","relativizeElement","$el","item","css","DGTable","Function","concat","VERSION","that","o","p","events","addClass","className","data","on","destroy","onMouseMoveResizeAreaBound","_onMouseMoveResizeArea","onEndDragColumnHeaderBound","_onEndDragColumnHeader","onTableScrolledHorizontallyBound","_onTableScrolledHorizontally","tableSkeletonNeedsRendering","virtualTable","rowsBufferSize","minColumnWidth","Math","max","resizeAreaWidth","resizableColumns","movableColumns","sortableColumns","parseInt","adjustColumnWidthForSortArrow","convertColumnWidthsToRelative","autoFillTableWidth","cellClasses","resizerClassName","tableClassName","allowCellPreview","allowHeaderCellPreview","cellPreviewClassName","cellPreviewAutoBackground","Width","NONE","relativeWidthGrowsToFillWidth","relativeWidthShrinksToFillWidth","setCellFormatter","cellFormatter","setHeaderCellFormatter","headerCellFormatter","setFilter","filter","setColumns","columns","sortColumns","tmpSortColumns","dataPath","filteredRows","hoverMouseOverHandler","evt","relatedTarget","event","fromElement","contains","_cellMouseOverEvent","hoverMouseOutHandler","toElement","_cellMouseOutEvent","_bindCellHoverIn","addEventListener","_unbindCellHoverIn","removeEventListener","_bindCellHoverOut","_unbindCellHoverOut","attachEvent","detachEvent","eventName","callback","cb","once","off","callbacks","trigger","_parseColumnWidth","minWidth","widthSize","widthMode","ColumnWidthMode","AUTO","RELATIVE","ABSOLUTE","mode","_initColumnFromData","columnData","parsedWidth","ignoreMin","label","resizable","sortable","movable","close","remove","__removed","$resizer","$tbody","trs","_destroyHeaderCells","_unbindCellEventsForTable","$table","empty","workerListeners","j","worker","listener","_deferredRender","clearTimeout","prop","headerRow","rowCount","cells","cellCount","tbody","_unbindCellEventsForRow","rowToClean","render","offsetParent","setTimeout","renderedRows","_clearSortArrows","lastScrollTop","table","scrollTop","NaN","lastScrollLeft","scrollLeftNormalized","_renderSkeletonBase","_renderSkeletonBody","tableWidthChanged","_renderSkeletonHeaderCells","renderRows","html","append","_updateLastCellWidthFromScrollbar","_updateTableWidth","_showSortArrow","isNaN","header","_onVirtualTableScrolled","firstVisible","floor","virtualRowHeightFirst","virtualRowHeight","lastVisible","ceil","visibleHeight","countToRemove","oldFirstVisible","oldLastVisible","tbodyChildNodes","min","prepend","clearAndRender","first","last","physicalRowIndex","rowClassName","cellClassName","isDataFiltered","visibleColumns","isVirtual","colCount","colIndex","_finalWidth","actualWidthConsideringScrollbarWidth","actualWidth","bodyFragment","createDocumentFragment","virtualRowXAttr","_isTableRtl","rowData","cell","setAttribute","innerHTML","_getHtmlForCell","_calculateVirtualHeight","virtualRowHeightLast","_calculateTbodyWidth","cellInner","$row","sumActualWidth","$thisWrapper","z-index","left","float","appendTo","fractionTest","hasFractions","round","outerWidth","scrollbarWidth","normalizedCols","normalizedColumn","_ensureVisibleColumns","addColumn","before","beforeColumn","to","removeColumn","colIdx","formatter","val","hadFilter","filterArgs","extend","clearFilter","_refilter","setColumnLabel","element","firstChild","destCol","headerCell","$headerRow","beforePos","fromPos","insertBefore","srcWidth","destWidth","tbodyChildren","count","currentSort","_tableSkeletonNeedsRendering","sorts","resort","setColumnVisible","isColumnVisible","setMinColumnWidth","getMinColumnWidth","setSortableColumns","getSortableColumns","setMovableColumns","getMovableColumns","setResizableColumns","getResizableColumns","setComparatorCallback","comparatorCallback","setColumnWidth","oldWidth","_serializeColumnWidth","newWidth","getColumnWidth","getColumnConfig","getColumnsConfig","config","getSortedColumns","sorted","getHtmlForCell","colValue","dataPathIndex","content","getRowYPos","rowIndex","offsetTop","getDataForRow","getRowCount","getIndexForRow","getFilteredRowCount","getIndexForFilteredRow","getDataForFilteredRow","getHeaderRowElement","_horizontalPadding","_horizontalBorderWidth","_calculateWidthAvailableForColumns","oldDisplay","display","detectedWidth","$header","$cells","$cell","getTextWidth","$tableWrapper","visibility","lastDetectedWidth","forceUpdate","renderColumns","sizeLeft","relatives","tableWidthBeforeCalculations","absWidthTotal","changedColumnIndexes","totalRelativePercentage","arrowProposedWidth","sizeLeftForRelative","minColumnWidthRelative","delta","extraRelative","nonResizableTotal","sizeLeftToFill","conv","tableWidth","_resizeColumnElements","tableHeightChanged","innerHeight","outerHeight","addRows","firstRow","lastRow","removeRows","lastRowIndex","index","removeRow","refreshRow","isRowVisible","renderedRow","getRowElement","refreshAllVirtualRows","rowsToRender","setRows","getUrlForElementContent","id","blob","getElementById","Blob","BlobBuilder","global","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","builder","getBlob","URL","webkitURL","createObjectURL","isWorkerSupported","createWebWorker","url","Worker","postMessage","unbindWebWorker","abortCellPreview","hideCellPreview","cancelColumnResize","_event","_getColumnByResizePosition","e","$headerCell","target","closest","previousElementSibling","previousSibling","firstCol","mouseX","pageX","originalEvent","clientX","offset","_onTouchStartColumnHeader","currentTouchId","startTouch","changedTouches","identifier","tapAndHoldTimeout","$eventTarget","currentTarget","startPos","y","pageY","currentPos","unbind","fakeEvent","Event","extendObjects","each","which","one","preventDefault","sqrt","pow","abs","touch","_onMouseDownColumnHeader","selectedHeaderCell","commonAncestor","posCol","posRelative","resizerWidth","zIndex","ignored","_onMouseMoveColumnHeader","cursor","_onMouseUpColumnHeader","bounds","_onMouseLeaveColumnHeader","_onClickColumnHeader","_onStartDragColumnHeader","opacity","dragId","random","dataTransfer","setData","JSON","stringify","actualX","minX","baseX","sizeToSet","unNormalizedSizeToSet","_onDragEnterColumnHeader","dataTransferred","getData","parse","_onDragOverColumnHeader","_onDragLeaveColumnHeader","has","removeClass","_onDropColumnHeader","srcColName","destColName","srcCol","sortedColumns","arrows","arrow","cellIndex","headerCells","prependTo","SCROLL","ieDragDropHandler","headerCellClassName","dragDrop","draggable","cellInside","-webkit-touch-callout","-webkit-user-select","-moz-user-select","-ms-user-select","-o-user-select","user-select","$dummyTbody","createDummyRow","$dummyWrapper","row1","row2","row3","virtualRowHeightMin","virtualRowHeightMax","fragment","tableHeight","overflowY","overflowX","virtualVisibleRows","_renderSkeleton","force","offsetWidth","lastColIndex","lastColWidth","parentSizeMayHaveChanged","offsetHeight","webkitRenderBugfix","elInner","scrollHeight","clientHeight","$elInner","previewCell","$previewCell","isHeaderCell","hasClass","paddingL","paddingR","paddingT","paddingB","requiredWidth","borderBox","transparentBgColor1","tempDiv","backgroundColor","transparentBgColor2","bgColor","selection","saveSelection","restoreSelection","$parent","$scrollParent","parentOffset","windowWidth","right","minHorz","maxHorz","totalHeight","maxTop","previewCss","$cellPreviewCell","xy","wheelDelta","detail","wheelDeltaX","axis","wheelDeltaY","_el","origCell","controls","dgtable"],"mappings":"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"}