{"version":3,"file":"index.js","sources":["src/util.js","src/row_collection.js","src/column_collection.js","src/css_util.js","src/selection_helper.js","src/by_column_filter.js","src/index.js"],"sourcesContent":["'use strict';\r\n\r\nconst nativeBind = Function.prototype.bind;\r\n\r\nexport const bind = function bind (what, oThis) {\r\n\r\n    if (nativeBind) {\r\n        return what.bind(oThis);\r\n    }\r\n\r\n    if (typeof this !== 'function') {\r\n        // closest thing possible to the ECMAScript 5\r\n        // internal IsCallable function\r\n        throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\r\n    }\r\n\r\n    let aArgs   = Array.prototype.slice.call(arguments, 1),\r\n        fToBind = this,\r\n        fNOP    = function() {},\r\n        fBound  = function() {\r\n            return fToBind.apply(this instanceof fNOP\r\n                    ? this\r\n                    : oThis,\r\n                aArgs.concat(Array.prototype.slice.call(arguments)));\r\n        };\r\n\r\n    if (this.prototype) {\r\n        // Function.prototype doesn't have a prototype property\r\n        fNOP.prototype = this.prototype;\r\n    }\r\n\r\n    fBound.prototype = new fNOP();\r\n\r\n    return fBound;\r\n};\r\n\r\nconst nativeIndexOf = Function.prototype.indexOf;\r\n\r\nexport const indexOf = function indexOf (array, searchElement, fromIndex) {\r\n\r\n    if (nativeIndexOf) {\r\n        return array.indexOf(searchElement, fromIndex);\r\n    }\r\n\r\n    let k;\r\n\r\n    if (array == null) {\r\n      throw new TypeError('\"this\" is null or not defined');\r\n    }\r\n\r\n    let len = array.length >>> 0;\r\n\r\n    if (len === 0) {\r\n      return -1;\r\n    }\r\n\r\n    let n = fromIndex | 0;\r\n\r\n    if (n >= len) {\r\n      return -1;\r\n    }\r\n\r\n    k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\r\n\r\n    while (k < len) {\r\n      if (k in array && array[k] === searchElement) {\r\n        return k;\r\n      }\r\n      k++;\r\n    }\r\n\r\n    return -1;\r\n};\r\n\r\nexport const contains = function contains (array, item) {\r\n    return indexOf(array, item) >= 0;\r\n};\r\n\r\nexport const find = function find (array, predicate) {\r\n\r\n    for (let i = 0, len = array.length; i >= 0 && i < len; i += 1) {\r\n        if (predicate(array[i], i, array))\r\n            return array[i];\r\n    }\r\n\r\n};\r\n\r\nconst nativeForEach = Function.prototype.forEach;\r\n\r\nexport const forEach = function forEach (array, callback, thisArg) {\r\n    if (nativeForEach) {\r\n        return array.forEach(callback, thisArg);\r\n    }\r\n\r\n    let T, k;\r\n\r\n    if (this === null) {\r\n        throw new TypeError(' this is null or not defined');\r\n    }\r\n\r\n    let len = array.length >>> 0;\r\n\r\n    if (typeof callback !== \"function\") {\r\n        throw new TypeError(callback + ' is not a function');\r\n    }\r\n\r\n    if (arguments.length > 1) {\r\n        T = thisArg;\r\n    }\r\n\r\n    k = 0;\r\n\r\n    while (k < len) {\r\n        if (k in array) {\r\n            let kValue = array[k];\r\n            callback.call(T, kValue, k, array);\r\n        }\r\n\r\n        k++;\r\n    }\r\n};","'use strict';\r\n\r\nimport { bind } from './util';\r\n\r\n// Define class RowCollection\r\nfunction RowCollection () {\r\n\r\n    // Instantiate an Array. Seems like the `.length = ` of an inherited Array does not work well.\r\n    // I will not use the IFRAME solution either in fear of memory leaks, and we're supporting large datasets...\r\n    let collection = [];\r\n\r\n    // Synthetically set the 'prototype'\r\n    Object.assign(collection, RowCollection.prototype);\r\n\r\n    // Call initializer\r\n    collection.initialize.apply(collection, arguments);\r\n\r\n    return collection;\r\n}\r\n\r\n// Inherit Array\r\nRowCollection.prototype = [];\r\n\r\nRowCollection.prototype.initialize = function (options) {\r\n\r\n    options = options || {};\r\n\r\n    /** @field {string} sortColumn */\r\n    this.sortColumn = options.sortColumn == null ? [] : options.sortColumn;\r\n};\r\n\r\n/**\r\n * @param {Object|Object[]} rows - row or array of rows to add to this collection\r\n * @param {number?} at - position to insert rows at\r\n */\r\nRowCollection.prototype.add = function (rows, at) {\r\n    let isArray = ('splice' in rows && 'length' in rows), i, len;\r\n    if (isArray) {\r\n        if (at) {\r\n            for (i = 0, len = rows.length; i < len; i++) {\r\n                this.splice(at++, 0, rows[i]);\r\n            }\r\n        } else {\r\n            for (i = 0, len = rows.length; i < len; i++) {\r\n                this.push(rows[i]);\r\n            }\r\n        }\r\n    } else {\r\n        if (at) {\r\n            this.splice(at, 0, rows);\r\n        } else {\r\n            this.push(rows);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * @param {Object|Object[]=} rows Row or array of rows to add to this collection\r\n */\r\nRowCollection.prototype.reset = function (rows) {\r\n    this.length = 0;\r\n    if (rows) {\r\n        this.add(rows);\r\n    }\r\n};\r\n\r\n/**\r\n * @param {Function} filterFunc - Filtering function\r\n * @param {Object|null} args? - Options to pass to the function\r\n * @returns {RowCollection} success result\r\n */\r\nRowCollection.prototype.filteredCollection = function (filterFunc, args) {\r\n    if (filterFunc && args) {\r\n        let rows = new RowCollection({ sortColumn: this.sortColumn });\r\n        \r\n        for (let i = 0, len = this.length, row; i < len; i++) {\r\n            row = this[i];\r\n            if (filterFunc(row, args)) {\r\n                row['__i'] = i;\r\n                rows.push(row);\r\n            }\r\n        }\r\n        return rows;\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\n/**\r\n * @type {Function|null|undefined}\r\n */\r\nRowCollection.prototype.onComparatorRequired = null;\r\n\r\n/**\r\n * @type {Function|null|undefined}\r\n */\r\nRowCollection.prototype.onSort = null;\r\n\r\nlet nativeSort = RowCollection.prototype.sort;\r\n\r\nfunction getDefaultComparator(column, descending) {\r\n    let columnName = column.column;\r\n    let comparePath = column.comparePath || columnName;\r\n    if (typeof comparePath === 'string') {\r\n        comparePath = comparePath.split('.');\r\n    }\r\n    let pathLength = comparePath.length,\r\n        hasPath = pathLength > 1,\r\n        i;\r\n\r\n    let lessVal = descending ? 1 : -1, moreVal = descending ? -1 : 1;\r\n    return function(leftRow, rightRow) {\r\n        let leftVal = leftRow[comparePath[0]],\r\n            rightVal = rightRow[comparePath[0]];\r\n        if (hasPath) {\r\n            for (i = 1; i < pathLength; i++) {\r\n                leftVal = leftVal && leftVal[comparePath[i]];\r\n                rightVal = rightVal && rightVal[comparePath[i]];\r\n            }\r\n        }\r\n        if (leftVal === rightVal) return 0;\r\n        if (leftVal == null) return lessVal;\r\n        if (leftVal < rightVal) return lessVal;\r\n        return moreVal;\r\n    };\r\n}\r\n\r\n/**\r\n * @param {Boolean=false} silent\r\n * @returns {RowCollection} self\r\n */\r\nRowCollection.prototype.sort = function (silent) {\r\n    if (this.sortColumn.length) {\r\n        let comparators = [], i, comparator;\r\n\r\n        for (i = 0; i < this.sortColumn.length; i++) {\r\n            comparator = null;\r\n            if (this.onComparatorRequired) {\r\n                comparator = this.onComparatorRequired(this.sortColumn[i].column, this.sortColumn[i].descending);\r\n            }\r\n            if (!comparator) {\r\n                comparator = getDefaultComparator(this.sortColumn[i], this.sortColumn[i].descending);\r\n            }\r\n            comparators.push(bind(comparator, this));\r\n        }\r\n\r\n        if (comparators.length === 1) {\r\n            nativeSort.call(this, comparators[0]);\r\n        } else {\r\n            let len = comparators.length,\r\n                value;\r\n\r\n            comparator = function(leftRow, rightRow) {\r\n                for (i = 0; i < len; i++) {\r\n                    value = comparators[i](leftRow, rightRow);\r\n                    if (value !== 0) {\r\n                        return value;\r\n                    }\r\n                }\r\n                return value;\r\n            };\r\n\r\n            nativeSort.call(this, comparator);\r\n        }\r\n\r\n        if (!silent) {\r\n            if (this.onSort) {\r\n                this.onSort();\r\n            }\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\nexport default RowCollection;","'use strict';\r\n\r\n// Define class RowCollection\r\nfunction ColumnCollection () {\r\n\r\n    // Instantiate an Array. Seems like the `.length = ` of an inherited Array does not work well.\r\n    // I will not use the IFRAME solution either in fear of memory leaks, and we're supporting large datasets...\r\n    let collection = [];\r\n\r\n    // Synthetically set the 'prototype'\r\n    Object.assign(collection, ColumnCollection.prototype);\r\n\r\n    // Call initializer\r\n    collection.initialize.apply(collection, arguments);\r\n\r\n    return collection;\r\n}\r\n\r\n// Inherit Array\r\nColumnCollection.prototype = [];\r\n\r\nColumnCollection.prototype.initialize = function () {\r\n\r\n};\r\n\r\n/**\r\n * Get the column by this name\r\n * @param {String} column column name\r\n * @returns {Object} the column object\r\n */\r\nColumnCollection.prototype.get = function (column) {\r\n    for (let i = 0, len = this.length; i < len; i++) {\r\n        if (this[i].name == column) {\r\n            return this[i];\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Get the index of the column by this name\r\n * @param {String} column column name\r\n * @returns {int} the index of this column\r\n */\r\nColumnCollection.prototype.indexOf = function (column) {\r\n    for (let i = 0, len = this.length; i < len; i++) {\r\n        if (this[i].name == column) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n};\r\n\r\n/**\r\n * Get the column by the specified order\r\n * @param {Number} order the column's order\r\n * @returns {Object} the column object\r\n */\r\nColumnCollection.prototype.getByOrder = function (order) {\r\n    for (let i = 0, len = this.length; i < len; i++) {\r\n        if (this[i].order == order) {\r\n            return this[i];\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Normalize order\r\n * @returns {ColumnCollection} self\r\n */\r\nColumnCollection.prototype.normalizeOrder = function () {\r\n    let ordered = [], i;\r\n    for (i = 0; i < this.length; i++) {\r\n        ordered.push(this[i]);\r\n    }\r\n    ordered.sort(function(col1, col2){ return col1.order < col2.order ? -1 : (col1.order > col2.order ? 1 : 0); });\r\n    for (i = 0; i < ordered.length; i++) {\r\n        ordered[i].order = i;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Get the array of visible columns, order by the order property\r\n * @returns {Array<Object>} ordered array of visible columns\r\n */\r\nColumnCollection.prototype.getVisibleColumns = function () {\r\n    let visible = [];\r\n    for (let i = 0, column; i < this.length; i++) {\r\n        column = this[i];\r\n        if (column.visible) {\r\n            visible.push(column);\r\n        }\r\n    }\r\n    visible.sort((col1, col2) => col1.order < col2.order ? -1 : (col1.order > col2.order ? 1 : 0));\r\n    return visible;\r\n};\r\n\r\n/**\r\n * @returns {int} maximum order currently in the array\r\n */\r\nColumnCollection.prototype.getMaxOrder = function () {\r\n    let order = 0;\r\n    for (let i = 0, column; i < this.length; i++) {\r\n        column = this[i];\r\n        if (column.order > order) {\r\n            order = column.order;\r\n        }\r\n    }\r\n    return order;\r\n};\r\n\r\n/**\r\n * Move a column to a new spot in the collection\r\n * @param {Object} src the column to move\r\n * @param {Object} dest the destination column\r\n * @returns {ColumnCollection} self\r\n */\r\nColumnCollection.prototype.moveColumn = function (src, dest) {\r\n    if (src && dest) {\r\n        let srcOrder = src.order, destOrder = dest.order, i, col;\r\n        if (srcOrder < destOrder) {\r\n            for (i = srcOrder + 1; i <= destOrder; i++) {\r\n                col = this.getByOrder(i);\r\n                col.order--;\r\n            }\r\n        } else {\r\n            for (i = srcOrder - 1; i >= destOrder; i--) {\r\n                col = this.getByOrder(i);\r\n                col.order++;\r\n            }\r\n        }\r\n        src.order = destOrder;\r\n    }\r\n    return this;\r\n};\r\n\r\nexport default ColumnCollection;","/* eslint-env browser */\r\n\r\n'use strict';\r\n\r\nimport jQuery from 'jquery';\r\n\r\nconst $ = jQuery;\r\n\r\nconst hasComputedStyle = document.defaultView && document.defaultView.getComputedStyle;\r\n\r\nconst jQuerySupportsFractions = $ && $.fn.jquery >= '3';\r\n\r\nconst cssExpands = {\r\n    'width': [\r\n        'Left',\r\n        'Right',\r\n        'Width',\r\n    ],\r\n    'height': [\r\n        'Top',\r\n        'Bottom',\r\n        'Height',\r\n    ],\r\n};\r\n\r\nconst sizeKeys = ['width', 'height'];\r\n\r\nconst CssUtil = {};\r\n\r\nlet generateSizeFunction = function (key, cssExpand, inner, outer) {\r\n\r\n    return function () {\r\n        let el = arguments[0];\r\n        let value = arguments[1];\r\n\r\n        if (el && !(el instanceof Element) && 'length' in el) {\r\n            el = el[0];\r\n        }\r\n\r\n        if (!el) {\r\n            return null;\r\n        }\r\n\r\n        let style = hasComputedStyle ? document.defaultView.getComputedStyle(el) : el.currentStyle;\r\n        let isBoxing = style['boxSizing'] === 'border-box';\r\n        let size, border, padding;\r\n        let includeMargins = outer && arguments[2] === true || arguments[1] === true;\r\n\r\n        if (isBoxing || outer || inner) {\r\n            border = parseFloat(style['border' + cssExpand[0] + 'Width'] || 0)\r\n                + parseFloat(style['border' + cssExpand[1] + 'Width'] || 0);\r\n\r\n            padding = parseFloat(style['padding' + cssExpand[0]] || 0)\r\n                + parseFloat(style['padding' + cssExpand[1]] || 0);\r\n        }\r\n\r\n        let margin = includeMargins ?\r\n            (parseFloat(style['margin' + cssExpand[0]] || 0)\r\n            + parseFloat(style['margin' + cssExpand[1]] || 0)) : 0;\r\n\r\n        if (value == undefined) {\r\n            size = parseFloat(style[key]);\r\n\r\n            if (isBoxing) {\r\n\r\n                if (padding + border > size) {\r\n                    size = padding + border;\r\n                }\r\n\r\n                if (outer) {\r\n                    if (includeMargins) {\r\n                        size += margin;\r\n                    }\r\n                }\r\n                else if (inner) {\r\n                    size -= border;\r\n                }\r\n                else {\r\n                    size -= padding + border;\r\n                }\r\n\r\n            } else {\r\n\r\n                if (outer) {\r\n                    size += padding + border;\r\n\r\n                    if (includeMargins) {\r\n                        size += margin;\r\n                    }\r\n                }\r\n                else if (inner) {\r\n                    size += padding;\r\n                }\r\n\r\n            }\r\n\r\n            return size;\r\n        } else {\r\n            value = value || 0;\r\n            size = value;\r\n\r\n            if (isBoxing) {\r\n\r\n                if (outer) {\r\n                    if (includeMargins) {\r\n                        size -= margin;\r\n                    }\r\n                }\r\n                else if (inner) {\r\n                    size += border;\r\n                }\r\n                else {\r\n                    size += padding + border;\r\n                }\r\n\r\n            } else {\r\n\r\n                if (outer) {\r\n                    size -= padding + border;\r\n\r\n                    if (includeMargins) {\r\n                        size -= margin;\r\n                    }\r\n                }\r\n                else if (inner) {\r\n                    size -= padding;\r\n                }\r\n\r\n                if (size < 0) {\r\n                    size = 0;\r\n                }\r\n            }\r\n\r\n            el.style[key] = size + 'px';\r\n\r\n            return value;\r\n        }\r\n    };\r\n};\r\n\r\nlet generatejQueryFunction = function (key) {\r\n    return function () {\r\n        let collection = arguments[0];\r\n        if (!$.isArray(collection) && !(collection instanceof $)) {\r\n            collection = [collection];\r\n        }\r\n        \r\n        let ret = $.fn[key].apply(collection, Array.prototype.slice.call(arguments, 1));\r\n        \r\n        if (arguments.length > 1) {\r\n            return this;\r\n        }\r\n        \r\n        return ret;\r\n    };\r\n};\r\n\r\nfor (let i = 0; i < sizeKeys.length; i++) {\r\n    let key = sizeKeys[i];\r\n    let cssExpand = cssExpands[key];\r\n\r\n    if (jQuerySupportsFractions) {\r\n\r\n        CssUtil[key] = generatejQueryFunction(key);\r\n        CssUtil['inner' + cssExpand[2]] = generatejQueryFunction('inner' + cssExpand[2]);\r\n        CssUtil['outer' + cssExpand[2]] = generatejQueryFunction('outer' + cssExpand[2]);\r\n\r\n    } else {\r\n\r\n        CssUtil[key] = generateSizeFunction(key, cssExpand, false, false);\r\n        CssUtil['inner' + cssExpand[2]] = generateSizeFunction(key, cssExpand, true, false);\r\n        CssUtil['outer' + cssExpand[2]] = generateSizeFunction(key, cssExpand, false, true);\r\n\r\n    }\r\n}\r\n\r\n// Remove that huge function from memory\r\ngenerateSizeFunction = null;\r\n\r\nexport default CssUtil;","/* eslint-env browser */\r\n\r\n'use strict';\r\n\r\n// saveSelection/restoreSelection courtesy of Tim Down, with my improvements\r\n// https://stackoverflow.com/questions/13949059/persisting-the-changes-of-range-objects-after-selection-in-html/13950376#13950376\r\n\r\nfunction isChildOf(child, parent) {\r\n  while ((child = child.parentNode) && child !== parent); \r\n  return !!child; \r\n}\r\n\r\nclass SelectionHelper {\r\n    \r\n    static saveSelection(el) {\r\n        let range = window.getSelection().getRangeAt(0);\r\n        \r\n        if (el !== range.commonAncestorContainer && !isChildOf(range.commonAncestorContainer, el))\r\n            return null;\r\n        \r\n        let preSelectionRange = range.cloneRange();\r\n        preSelectionRange.selectNodeContents(el);\r\n        preSelectionRange.setEnd(range.startContainer, range.startOffset);\r\n        let start = preSelectionRange.toString().length;\r\n\r\n        return {\r\n            start: start,\r\n            end: start + range.toString().length,\r\n        };\r\n    }\r\n    \r\n    static restoreSelection(el, savedSel) {\r\n        let charIndex = 0;\r\n        let nodeStack = [el], node, foundStart = false, stop = false;\r\n        let range = document.createRange();\r\n        range.setStart(el, 0);\r\n        range.collapse(true);\r\n        \r\n        while (!stop && (node = nodeStack.pop())) {\r\n            if (node.nodeType == 3) {\r\n                let nextCharIndex = charIndex + node.length;\r\n                if (!foundStart && savedSel.start >= charIndex && savedSel.start <= nextCharIndex) {\r\n                    range.setStart(node, savedSel.start - charIndex);\r\n                    foundStart = true;\r\n                }\r\n                if (foundStart && savedSel.end >= charIndex && savedSel.end <= nextCharIndex) {\r\n                    range.setEnd(node, savedSel.end - charIndex);\r\n                    stop = true;\r\n                }\r\n                charIndex = nextCharIndex;\r\n            } else {\r\n                let i = node.childNodes.length;\r\n                while (i--) {\r\n                    nodeStack.push(node.childNodes[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        let sel = window.getSelection();\r\n        sel.removeAllRanges();\r\n        sel.addRange(range);\r\n    }\r\n}\r\n\r\nexport default SelectionHelper;\r\n","'use strict';\r\n\r\nfunction ByColumnFilter (row, args) {\r\n    \r\n    let column = args.column;\r\n    let keyword = args.keyword == null ? '' : args.keyword.toString();\r\n    \r\n    if (!keyword || !column) return true;\r\n\r\n    let actualVal = row[column];\r\n    if (actualVal == null) {\r\n        return false;\r\n    }\r\n    \r\n    actualVal = actualVal.toString();\r\n    \r\n    if (!args.caseSensitive) {\r\n        actualVal = actualVal.toLowerCase();\r\n        keyword = keyword.toLowerCase();\r\n    }\r\n    \r\n    return actualVal.indexOf(keyword) !== -1;\r\n}\r\n\r\nexport default ByColumnFilter;","/* eslint-env browser */\r\n\r\n'use strict';\r\n\r\nimport jQuery from 'jquery';\r\nimport { bind, indexOf, contains, find, forEach } from './util';\r\nimport RowCollection from './row_collection';\r\nimport ColumnCollection from './column_collection';\r\nimport CssUtil from './css_util';\r\nimport SelectionHelper from './selection_helper';\r\nimport ByColumnFilter from './by_column_filter';\r\n\r\nconst $ = jQuery;\r\n\r\nlet userAgent = navigator.userAgent;\r\nlet ieVersion = userAgent.indexOf('MSIE ') != -1 ? parseFloat(userAgent.substr(userAgent.indexOf('MSIE ') + 5)) : null;\r\nlet hasIeDragAndDropBug = ieVersion && ieVersion < 10;\r\nlet createElement = bind(document.createElement, document);\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\nfunction webkitRenderBugfix(el) {\r\n    // BUGFIX: WebKit has a bug where it does not relayout, and this affects us because scrollbars \r\n    //   are still calculated even though they are not there yet. This is the last resort.\r\n    let oldDisplay = el.style.display;\r\n    el.style.display = 'none';\r\n    //noinspection BadExpressionStatementJS\r\n    el.offsetHeight; // No need to store this anywhere, the reference is enough\r\n    el.style.display = oldDisplay;\r\n    return el;\r\n}\r\n\r\nfunction relativizeElement($el) {\r\n    if (!contains(['relative', 'absolute', 'fixed'], $el.css('position'))) {\r\n        $el.css('position', 'relative');\r\n    }\r\n}\r\n\r\n/** @class DGTable */\r\nlet DGTable = function DGTable () {\r\n    if (!(this instanceof DGTable)) {\r\n        // Allow constructing without `new`\r\n        return new (Function.prototype.bind.apply(\r\n            DGTable,\r\n            [DGTable].concat(Array.prototype.slice.call(arguments, 0))));\r\n    }\r\n\r\n    this.initialize.apply(this, arguments);\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @type {string}\r\n */\r\nDGTable.VERSION = '@@VERSION';\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @type {string}\r\n */\r\nDGTable.prototype.VERSION = DGTable.VERSION;\r\n\r\n/**\r\n * @constructs\r\n * @param {DGTable.Options?} options - initialization options\r\n * @returns {DGTable}\r\n */\r\nDGTable.prototype.initialize = function (options) {\r\n    let that = this;\r\n\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {DGTable.Options}\r\n     * */\r\n    let o = that.o = {};\r\n\r\n    /**\r\n     * @private\r\n     * This is for encapsulating private data */\r\n    let p = that.p = {};\r\n\r\n    /** This is for encapsulating event callback */\r\n    p.events = {};\r\n\r\n    /**\r\n     * @public\r\n     * @expose\r\n     * */\r\n    that.el = (options.el && options.el instanceof Element) ? options.el : document.createElement('div');\r\n\r\n    /**\r\n     * @public\r\n     * @expose\r\n     * */\r\n    let $el = that.$el = $(that.el);\r\n    \r\n    if (that.el !== options.el) {\r\n        $el.addClass(options.className || 'dgtable-wrapper');\r\n    }\r\n\r\n    // Set control data\r\n    $el\r\n        .data('control', that)\r\n        .data('dgtable', that);\r\n\r\n    // For jQuery.UI or jquery.removeevent\r\n    $el.on('remove', function () {\r\n        that.destroy();\r\n    });\r\n\r\n    p.onMouseMoveResizeAreaBound = bind(this._onMouseMoveResizeArea, this);\r\n    p.onEndDragColumnHeaderBound = bind(this._onEndDragColumnHeader, this);\r\n    p.onTableScrolledHorizontallyBound = bind(this._onTableScrolledHorizontally, this);\r\n\r\n    this.$el.on('dragend', p.onEndDragColumnHeaderBound);\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} _tableSkeletonNeedsRendering */\r\n    p.tableSkeletonNeedsRendering = true;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} virtualTable */\r\n    o.virtualTable = options.virtualTable === undefined ? true : !!options.virtualTable;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Number} rowsBufferSize */\r\n    o.rowsBufferSize = options.rowsBufferSize || 3;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Number} minColumnWidth */\r\n    o.minColumnWidth = Math.max(options.minColumnWidth || 35, 0);\r\n\r\n    /**\r\n     * @private\r\n     * @field {Number} resizeAreaWidth */\r\n    o.resizeAreaWidth = options.resizeAreaWidth || 8;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} resizableColumns */\r\n    o.resizableColumns = options.resizableColumns === undefined ? true : !!options.resizableColumns;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} movableColumns */\r\n    o.movableColumns = options.movableColumns === undefined ? true : !!options.movableColumns;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Number} sortableColumns */\r\n    o.sortableColumns = options.sortableColumns === undefined ? 1 : (parseInt(options.sortableColumns, 10) || 1);\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} adjustColumnWidthForSortArrow */\r\n    o.adjustColumnWidthForSortArrow = options.adjustColumnWidthForSortArrow === undefined ? true : !!options.adjustColumnWidthForSortArrow;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} convertColumnWidthsToRelative */\r\n    o.convertColumnWidthsToRelative = options.convertColumnWidthsToRelative === undefined ? false : !!options.convertColumnWidthsToRelative;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} autoFillTableWidth */\r\n    o.autoFillTableWidth = options.autoFillTableWidth === undefined ? false : !!options.autoFillTableWidth;\r\n\r\n    /**\r\n     * @private\r\n     * @field {String} cellClasses */\r\n    o.cellClasses = options.cellClasses === undefined ? '' : options.cellClasses;\r\n\r\n    /**\r\n     * @private\r\n     * @field {String} resizerClassName */\r\n    o.resizerClassName = options.resizerClassName === undefined ? 'dgtable-resize' : options.resizerClassName;\r\n\r\n    /**\r\n     * @private\r\n     * @field {String} tableClassName */\r\n    o.tableClassName = options.tableClassName === undefined ? 'dgtable' : options.tableClassName;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} allowCellPreview */\r\n    o.allowCellPreview = options.allowCellPreview === undefined ? true : options.allowCellPreview;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} allowHeaderCellPreview */\r\n    o.allowHeaderCellPreview = options.allowHeaderCellPreview === undefined ? true : options.allowHeaderCellPreview;\r\n\r\n    /**\r\n     * @private\r\n     * @field {String} cellPreviewClassName */\r\n    o.cellPreviewClassName = options.cellPreviewClassName === undefined ? 'dgtable-cell-preview' : options.cellPreviewClassName;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} cellPreviewAutoBackground */\r\n    o.cellPreviewAutoBackground = options.cellPreviewAutoBackground === undefined ? true : options.cellPreviewAutoBackground;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Function(String,Boolean)Function(a,b)Boolean} onComparatorRequired */\r\n    o.onComparatorRequired = options.onComparatorRequired === undefined ? null : options.onComparatorRequired;\r\n    if (!o.onComparatorRequired && typeof options['comparatorCallback'] === 'function') {\r\n        o.onComparatorRequired = options['comparatorCallback'];\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} width */\r\n    o.width = options.width === undefined ? DGTable.Width.NONE : options.width;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} relativeWidthGrowsToFillWidth */\r\n    o.relativeWidthGrowsToFillWidth = options.relativeWidthGrowsToFillWidth === undefined ? true : !!options.relativeWidthGrowsToFillWidth;\r\n\r\n    /**\r\n     * @private\r\n     * @field {Boolean} relativeWidthShrinksToFillWidth */\r\n    o.relativeWidthShrinksToFillWidth = options.relativeWidthShrinksToFillWidth === undefined ? false : !!options.relativeWidthShrinksToFillWidth;\r\n\r\n    this.setCellFormatter(options.cellFormatter);\r\n    this.setHeaderCellFormatter(options.headerCellFormatter);\r\n    this.setFilter(options.filter);\r\n\r\n    /** @private\r\n     * @field {Number} height */\r\n    o.height = options.height;\r\n\r\n    // Prepare columns\r\n    that.setColumns(options.columns || [], false);\r\n\r\n    // Set sorting columns\r\n    let sortColumns = [];\r\n\r\n    if (options.sortColumn) {\r\n\r\n        let tmpSortColumns = options.sortColumn;\r\n\r\n        if (tmpSortColumns && typeof tmpSortColumns !== 'object') {\r\n            tmpSortColumns = [tmpSortColumns];\r\n        }\r\n\r\n        if (tmpSortColumns instanceof Array ||\r\n            typeof tmpSortColumns === 'object') {\r\n\r\n            for (let i = 0, len = tmpSortColumns.length; i < len; i++) {\r\n                let sortColumn = tmpSortColumns[i];\r\n                if (typeof sortColumn === 'string') {\r\n                    sortColumn = { column: sortColumn, descending: false };\r\n                }\r\n                let col = p.columns.get(sortColumn.column);\r\n                sortColumns.push({\r\n                    column: sortColumn.column,\r\n                    comparePath: col.comparePath,\r\n                    descending: sortColumn.descending,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @field {RowCollection} _rows */\r\n    p.rows = new RowCollection({ sortColumn: sortColumns });\r\n    p.rows.onComparatorRequired = function(column, descending){\r\n        if (o.onComparatorRequired) {\r\n            return o.onComparatorRequired(column, descending);\r\n        }\r\n    };\r\n\r\n    /** @private\r\n     * @field {RowCollection} _filteredRows */\r\n    p.filteredRows = null;\r\n\r\n    /*\r\n     Setup hover mechanism.\r\n     We need this to be high performance, as there may be MANY cells to call this on, on creation and destruction.\r\n     Using native events to spare the overhead of jQuery's event binding, and even just the creation of the jQuery collection object.\r\n     */\r\n\r\n    /**\r\n     * @param {MouseEvent} evt\r\n     * @this {HTMLElement}\r\n     * */\r\n    let hoverMouseOverHandler = function (evt) {\r\n        evt = evt || event;\r\n        let relatedTarget = evt.fromElement || evt.relatedTarget;\r\n        if (relatedTarget == this || $.contains(this, relatedTarget)) return;\r\n        if (this['__previewCell'] && (relatedTarget == this['__previewCell'] || $.contains(this['__previewCell'], relatedTarget))) return;\r\n        that._cellMouseOverEvent.call(that, this);\r\n    };\r\n\r\n    /**\r\n     * @param {MouseEvent} evt\r\n     * @this {HTMLElement}\r\n     * */\r\n    let hoverMouseOutHandler = function (evt) {\r\n        evt = evt || event;\r\n        let relatedTarget = evt.toElement || evt.relatedTarget;\r\n        if (relatedTarget == this || $.contains(this, relatedTarget)) return;\r\n        if (this['__previewCell'] && (relatedTarget == this['__previewCell'] || $.contains(this['__previewCell'], relatedTarget))) return;\r\n        that._cellMouseOutEvent.call(that, this);\r\n    };\r\n\r\n    if ('addEventListener' in window) {\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * */\r\n        p._bindCellHoverIn = function (el) {\r\n            if (!el['__hoverIn']) {\r\n                el.addEventListener('mouseover', el['__hoverIn'] = bind(hoverMouseOverHandler, el));\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * */\r\n        p._unbindCellHoverIn = function (el) {\r\n            if (el['__hoverIn']) {\r\n                el.removeEventListener('mouseover', el['__hoverIn']);\r\n                el['__hoverIn'] = null;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * @returns {DGTable} self\r\n         * */\r\n        p._bindCellHoverOut = function (el) {\r\n            if (!el['__hoverOut']) {\r\n                el.addEventListener('mouseout', el['__hoverOut'] = bind(hoverMouseOutHandler, el['__cell'] || el));\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * @returns {DGTable} self\r\n         * */\r\n        p._unbindCellHoverOut = function (el) {\r\n            if (el['__hoverOut']) {\r\n                el.removeEventListener('mouseout', el['__hoverOut']);\r\n                el['__hoverOut'] = null;\r\n            }\r\n            return this;\r\n        };\r\n\r\n    } else {\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * */\r\n        p._bindCellHoverIn = function (el) {\r\n            if (!el['__hoverIn']) {\r\n                el.attachEvent('mouseover', el['__hoverIn'] = bind(hoverMouseOverHandler, el));\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * */\r\n        p._unbindCellHoverIn = function (el) {\r\n            if (el['__hoverIn']) {\r\n                el.detachEvent('mouseover', el['__hoverIn']);\r\n                el['__hoverIn'] = null;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * */\r\n        p._bindCellHoverOut = function (el) {\r\n            if (!el['__hoverOut']) {\r\n                el.attachEvent('mouseout', el['__hoverOut'] = bind(hoverMouseOutHandler, el['__cell'] || el));\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @param {HTMLElement} el cell or header-cell\r\n         * @returns {DGTable} self\r\n         * */\r\n        p._unbindCellHoverOut = function (el) {\r\n            if (el['__hoverOut']) {\r\n                el.detachEvent('mouseout', el['__hoverOut']);\r\n                el['__hoverOut'] = null;\r\n            }\r\n            return this;\r\n        };\r\n\r\n    }\r\n};\r\n\r\n/**\r\n * Add an event listener\r\n * @public\r\n * @expose\r\n * @param {String} eventName\r\n * @param {Function} callback\r\n * @returns {DGTable}\r\n */\r\nDGTable.prototype.on = function (eventName, callback) {\r\n    let that = this, events = that.p.events;\r\n\r\n    if (typeof callback !== 'function')\r\n        return that;\r\n\r\n    if (!hasOwnProperty.call(events, eventName))\r\n        events[eventName] = [];\r\n\r\n    events[eventName].push({\r\n        cb: callback,\r\n        once: false,\r\n    });\r\n\r\n    return that;\r\n};\r\n\r\n/**\r\n * Add an event listener for a one shot\r\n * @public\r\n * @expose\r\n * @param {String} eventName\r\n * @param {Function} callback\r\n * @returns {DGTable}\r\n */\r\nDGTable.prototype.once = function (eventName, callback) {\r\n    let that = this, events = that.p.events;\r\n\r\n    if (typeof callback !== 'function')\r\n        return that;\r\n\r\n    if (!hasOwnProperty.call(events, eventName))\r\n        events[eventName] = [];\r\n\r\n    events[eventName].push({\r\n        cb: callback,\r\n        once: true,\r\n    });\r\n\r\n    return that;\r\n};\r\n\r\n/**\r\n * Remove an event listener\r\n * @public\r\n * @expose\r\n * @param {String} eventName\r\n * @param {Function} callback\r\n * @returns {DGTable}\r\n */\r\nDGTable.prototype.off = function (eventName, callback) {\r\n    let events = this.p.events;\r\n\r\n    if (!hasOwnProperty.call(events, eventName))\r\n        return this;\r\n\r\n    let callbacks = events[eventName];\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        let item = callbacks[i];\r\n        if (callback && item.cb !== callback) continue;\r\n        callbacks.splice(i--, 1);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nDGTable.prototype.trigger = function (eventName) {\r\n    let events = this.p.events;\r\n\r\n    if (hasOwnProperty.call(events, eventName)) {\r\n        let callbacks = events[eventName];\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            let item = callbacks[i];\r\n            if (item.once) {\r\n                callbacks.splice(i--, 1);\r\n            }\r\n            item.cb.apply(this, Array.prototype.slice.call(arguments, 1));\r\n        }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Detect column width mode\r\n * @private\r\n * @param {Number|String} width\r\n * @param {Number} minWidth\r\n * @returns {Object} parsed width\r\n */\r\nDGTable.prototype._parseColumnWidth = function (width, minWidth) {\r\n\r\n    let widthSize = Math.max(0, parseFloat(width)),\r\n        widthMode = ColumnWidthMode.AUTO; // Default\r\n\r\n    if (widthSize > 0) {\r\n        // Well, it's sure is not AUTO, as we have a value\r\n\r\n        if (width == widthSize + '%') {\r\n            // It's a percentage!\r\n\r\n            widthMode = ColumnWidthMode.RELATIVE;\r\n            widthSize /= 100;\r\n        } else if (widthSize > 0 && widthSize < 1) {\r\n            // It's a decimal value, as a relative value!\r\n\r\n            widthMode = ColumnWidthMode.RELATIVE;\r\n        } else {\r\n            // It's an absolute size!\r\n\r\n            if (widthSize < minWidth) {\r\n                widthSize = minWidth;\r\n            }\r\n            widthMode = ColumnWidthMode.ABSOLUTE;\r\n        }\r\n    }\r\n\r\n    return { width: widthSize, mode: widthMode };\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {COLUMN_OPTIONS} columnData\r\n */\r\nDGTable.prototype._initColumnFromData = function(columnData) {\r\n\r\n    let parsedWidth = this._parseColumnWidth(columnData.width, columnData.ignoreMin ? 0 : this.o.minColumnWidth);\r\n\r\n    let col = {\r\n        name: columnData.name,\r\n        label: columnData.label === undefined ? columnData.name : columnData.label,\r\n        width: parsedWidth.width,\r\n        widthMode: parsedWidth.mode,\r\n        resizable: columnData.resizable === undefined ? true : columnData.resizable,\r\n        sortable: columnData.sortable === undefined ? true : columnData.sortable,\r\n        movable: columnData.movable === undefined ? true : columnData.movable,\r\n        visible: columnData.visible === undefined ? true : columnData.visible,\r\n        cellClasses: columnData.cellClasses === undefined ? this.o.cellClasses : columnData.cellClasses,\r\n        ignoreMin: columnData.ignoreMin === undefined ? false : !!columnData.ignoreMin,\r\n    };\r\n\r\n    col.dataPath = columnData.dataPath === undefined ? col.name : columnData.dataPath;\r\n    col.comparePath = columnData.comparePath === undefined ? col.dataPath : columnData.comparePath;\r\n\r\n    if (typeof col.dataPath === 'string') {\r\n        col.dataPath = col.dataPath.split('.');\r\n    }\r\n    if (typeof col.comparePath === 'string') {\r\n        col.comparePath = col.comparePath.split('.');\r\n    }\r\n\r\n    return col;\r\n};\r\n\r\n/**\r\n * Destroy, releasing all memory, events and DOM elements\r\n * @public\r\n * @expose\r\n */\r\nDGTable.prototype.close = DGTable.prototype.remove = DGTable.prototype.destroy = function () {\r\n\r\n    let that = this,\r\n        p = that.p || {},\r\n        $el = that.$el;\r\n\r\n    if (that.__removed) {\r\n        return that;\r\n    }\r\n\r\n    if (p.$resizer) {\r\n        p.$resizer.remove();\r\n        p.$resizer = null;\r\n    }\r\n\r\n    if (p.$tbody) {\r\n        let trs = p.$tbody[0].childNodes;\r\n        for (let i = 0, len = trs.length; i < len; i++) {\r\n            that.trigger('rowdestroy', trs[i]);\r\n        }\r\n    }\r\n\r\n    // Using quotes for __super__ because Google Closure Compiler has a bug...\r\n\r\n    this._destroyHeaderCells()._unbindCellEventsForTable();\r\n    if (p.$table) {\r\n        p.$table.empty();\r\n    }\r\n    if (p.$tbody) {\r\n        p.$tbody.empty();\r\n    }\r\n\r\n    if (p.workerListeners) {\r\n        for (let j = 0; j < p.workerListeners.length; j++) {\r\n            let worker = p.workerListeners[j];\r\n            worker.worker.removeEventListener('message', worker.listener, false);\r\n        }\r\n        p.workerListeners.length = 0;\r\n    }\r\n\r\n    p.rows.length = p.columns.length = 0;\r\n\r\n    if (p._deferredRender) {\r\n        clearTimeout(p._deferredRender);\r\n    }\r\n\r\n    // Cleanup\r\n    for (let prop in that) {\r\n        if (hasOwnProperty.call(that, prop)) {\r\n            that[prop] = null;\r\n        }\r\n    }\r\n\r\n    that.__removed = true;\r\n\r\n    if ($el) {\r\n        $el.remove();\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._unbindCellEventsForTable = function() {\r\n    const p = this.p;\r\n    \r\n    if (p.headerRow) {\r\n        for (let i = 0, rows = p.headerRow.childNodes, rowCount = rows.length; i < rowCount; i++) {\r\n            let rowToClean = rows[i];\r\n            for (let j = 0, cells = rowToClean.childNodes, cellCount = cells.length; j < cellCount; j++) {\r\n                p._unbindCellHoverIn(cells[j]);\r\n            }\r\n        }\r\n    }\r\n    \r\n    if (p.tbody) {\r\n        for (let i = 0, rows = p.tbody.childNodes, rowCount = rows.length; i < rowCount; i++) {\r\n            this._unbindCellEventsForRow(rows[i]);\r\n        }\r\n    }\r\n    \r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {HTMLElement} rowToClean\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._unbindCellEventsForRow = function(rowToClean) {\r\n    const p = this.p;\r\n    for (let i = 0, cells = rowToClean.childNodes, cellCount = cells.length; i < cellCount; i++) {\r\n        p._unbindCellHoverIn(cells[i]);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.render = function () {\r\n    const o = this.o, p = this.p;\r\n\r\n    if (!this.el.offsetParent) {\r\n        if (!p._deferredRender) {\r\n            p._deferredRender = setTimeout(() => {\r\n                p._deferredRender = null;\r\n                if (!this.__removed && this.el.offsetParent) {\r\n                    this.render();\r\n                }\r\n            });\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    let renderedRows, rowCount;\r\n\r\n    if (p.tableSkeletonNeedsRendering === true) {\r\n        p.tableSkeletonNeedsRendering = false;\r\n\r\n        if (o.width == DGTable.Width.AUTO) {\r\n            // We need to do this to return to the specified widths instead. The arrows added to the column widths...\r\n            this._clearSortArrows();\r\n        }\r\n\r\n        let lastScrollTop = p.table ? p.table.scrollTop : 0,\r\n            lastScrollLeft = p.table ? p.table.scrollLeft : 0;\r\n\r\n        this._renderSkeletonBase()\r\n            ._renderSkeletonBody()\r\n            .tableWidthChanged(true, false) // Take this chance to calculate required column widths\r\n            ._renderSkeletonHeaderCells();\r\n            \r\n        if (!o.virtualTable) {\r\n            let rows = p.filteredRows || p.rows;\r\n            rowCount = rows.length;\r\n            renderedRows = this.renderRows(0, rowCount - 1);\r\n            p.$tbody.html('').append(renderedRows);\r\n            this._updateLastCellWidthFromScrollbar(true);\r\n        } else {\r\n            this._updateLastCellWidthFromScrollbar(); // Detect vertical scrollbar height\r\n        }\r\n\r\n        p.table.scrollTop = lastScrollTop;\r\n        p.table.scrollLeft = lastScrollLeft;\r\n        p.header.scrollLeft = lastScrollLeft;\r\n\r\n        this._updateTableWidth(true);\r\n\r\n        // Show sort arrows\r\n        for (let i = 0; i < p.rows.sortColumn.length; i++) {\r\n            this._showSortArrow(p.rows.sortColumn[i].column, p.rows.sortColumn[i].descending);\r\n        }\r\n        if (o.adjustColumnWidthForSortArrow && p.rows.sortColumn.length) {\r\n            this.tableWidthChanged(true);\r\n        } else if (!o.virtualTable) {\r\n            this.tableWidthChanged();\r\n        }\r\n\r\n        this.trigger('renderskeleton');\r\n\r\n        if (o.virtualTable) {\r\n            p.$table.on('scroll', bind(this._onVirtualTableScrolled, this));\r\n            this.render();\r\n        }\r\n\r\n    } else if (o.virtualTable) {\r\n        rowCount = (p.filteredRows || p.rows).length;\r\n        let scrollTop = p.table.scrollTop;\r\n        let firstVisible = Math.floor((scrollTop - p.virtualRowHeightFirst) / p.virtualRowHeight) + 1 - o.rowsBufferSize;\r\n        let lastVisible = Math.ceil(((scrollTop - p.virtualRowHeightFirst + p.visibleHeight) / p.virtualRowHeight)) + o.rowsBufferSize;\r\n        if (firstVisible < 0) firstVisible = 0;\r\n        if (lastVisible >= rowCount) {\r\n            lastVisible = rowCount - 1;\r\n        }\r\n\r\n        let oldFirstVisible = -1, oldLastVisible = -1;\r\n        let tbodyChildNodes = p.tbody.childNodes;\r\n        if (tbodyChildNodes.length) {\r\n            oldFirstVisible = tbodyChildNodes[0]['rowIndex'];\r\n            oldLastVisible = tbodyChildNodes[tbodyChildNodes.length - 1]['rowIndex'];\r\n        }\r\n\r\n        let countToRemove;\r\n\r\n        if (oldFirstVisible !== -1 && oldFirstVisible < firstVisible) {\r\n            countToRemove = Math.min(oldLastVisible + 1, firstVisible) - oldFirstVisible;\r\n            for (let i = 0; i < countToRemove; i++) {\r\n                this.trigger('rowdestroy', tbodyChildNodes[0]);\r\n                this._unbindCellEventsForRow(tbodyChildNodes[0]);\r\n                p.tbody.removeChild(tbodyChildNodes[0]);\r\n            }\r\n            oldFirstVisible += countToRemove;\r\n            if (oldFirstVisible > oldLastVisible) {\r\n                oldFirstVisible = oldLastVisible = -1;\r\n            }\r\n        } else if (oldLastVisible !== -1 && oldLastVisible > lastVisible) {\r\n            countToRemove = oldLastVisible - Math.max(oldFirstVisible - 1, lastVisible);\r\n            for (let i = 0; i < countToRemove; i++) {\r\n                this.trigger('rowdestroy', tbodyChildNodes[tbodyChildNodes.length - 1]);\r\n                this._unbindCellEventsForRow(tbodyChildNodes[tbodyChildNodes.length - 1]);\r\n                p.tbody.removeChild(tbodyChildNodes[tbodyChildNodes.length - 1]);\r\n            }\r\n            if (oldLastVisible < oldFirstVisible) {\r\n                oldFirstVisible = oldLastVisible = -1;\r\n            }\r\n        }\r\n\r\n        if (firstVisible < oldFirstVisible) {\r\n            renderedRows = this.renderRows(firstVisible, Math.min(lastVisible, oldFirstVisible - 1));\r\n            p.$tbody.prepend(renderedRows);\r\n        }\r\n        if (lastVisible > oldLastVisible || oldLastVisible === -1) {\r\n            renderedRows = this.renderRows(oldLastVisible === -1 ? firstVisible : oldLastVisible + 1, lastVisible);\r\n            p.$tbody.append(renderedRows);\r\n        }\r\n    }\r\n    this.trigger('render');\r\n    return this;\r\n};\r\n\r\n/**\r\n * Forces a full render of the table\r\n * @public\r\n * @expose\r\n * @param {Boolean=true} render - Should render now?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.clearAndRender = function (render) {\r\n    let p = this.p;\r\n\r\n    p.tableSkeletonNeedsRendering = true;\r\n\r\n    if (render === undefined || render) {\r\n        this.render();\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Render rows\r\n * @private\r\n * @param {Number} first first row to render\r\n * @param {Number} last last row to render\r\n * @returns {DocumentFragment} fragment containing all rendered rows\r\n */\r\nDGTable.prototype.renderRows = function (first, last) {\r\n    const o = this.o, p = this.p;\r\n        \r\n    let tableClassName = o.tableClassName,\r\n        rowClassName = tableClassName + '-row',\r\n        cellClassName = tableClassName + '-cell',\r\n        rows = p.filteredRows || p.rows,\r\n        isDataFiltered = !!p.filteredRows,\r\n        allowCellPreview = o.allowCellPreview,\r\n        visibleColumns = p.visibleColumns,\r\n        isVirtual = o.virtualTable,\r\n        virtualRowHeightFirst = p.virtualRowHeightFirst,\r\n        virtualRowHeight = p.virtualRowHeight,\r\n        top,\r\n        physicalRowIndex;\r\n\r\n    let colCount = visibleColumns.length;\r\n    for (let colIndex = 0, column; colIndex < colCount; colIndex++) {\r\n        column = visibleColumns[colIndex];\r\n        column._finalWidth = (column.actualWidthConsideringScrollbarWidth || column.actualWidth);\r\n    }\r\n\r\n    let bodyFragment = document.createDocumentFragment();\r\n\r\n    let isRtl = this._isTableRtl(),\r\n        virtualRowXAttr = isRtl ? 'right' : 'left';\r\n\r\n    for (let i = first, rowCount = rows.length;\r\n         i < rowCount && i <= last;\r\n         i++) {\r\n\r\n        let rowData = rows[i];\r\n        physicalRowIndex = isDataFiltered ? rowData['__i'] : i;\r\n\r\n        let row = createElement('div');\r\n        row.className = rowClassName;\r\n        row['rowIndex'] = i;\r\n        row['physicalRowIndex'] = physicalRowIndex;\r\n\r\n        for (let colIndex = 0; colIndex < colCount; colIndex++) {\r\n            let column = visibleColumns[colIndex];\r\n            let cell = createElement('div');\r\n            cell['columnName'] = column.name;\r\n            cell.setAttribute('data-column', column.name);\r\n            cell.className = cellClassName;\r\n            cell.style.width = column._finalWidth + 'px';\r\n            if (column.cellClasses) cell.className += ' ' + column.cellClasses;\r\n            if (allowCellPreview) {\r\n                p._bindCellHoverIn(cell);\r\n            }\r\n            \r\n            let cellInner = cell.appendChild(createElement('div'));\r\n            cellInner.innerHTML = this._getHtmlForCell(rowData, column);\r\n            \r\n            row.appendChild(cell);\r\n        }\r\n\r\n        if (isVirtual) {\r\n            top = i > 0 ? virtualRowHeightFirst + (i - 1) * virtualRowHeight : 0;\r\n            row.style.position = 'absolute';\r\n            row.style[virtualRowXAttr] = 0;\r\n            row.style.top = top + 'px';\r\n        }\r\n\r\n        bodyFragment.appendChild(row);\r\n\r\n        this.trigger('rowcreate', i, physicalRowIndex, row, rowData);\r\n    }\r\n\r\n    return bodyFragment;\r\n};\r\n\r\n/**\r\n * Calculate virtual table height for scrollbar\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._calculateVirtualHeight = function () {\r\n    let p = this.p;\r\n\r\n    if (p.tbody) {\r\n        let rowCount = (p.filteredRows || p.rows).length;\r\n        let height = p.virtualRowHeight * rowCount;\r\n        if (rowCount) {\r\n            height += (p.virtualRowHeightFirst - p.virtualRowHeight);\r\n            height += (p.virtualRowHeightLast - p.virtualRowHeight);\r\n        }\r\n        // At least 1 pixel - to show scrollers correctly.\r\n        if (height < 1) {\r\n            height = 1;\r\n        }\r\n        p.tbody.style.height = height + 'px';\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculate the size required for the table body width (which is the row's width)\r\n * @private\r\n * @returns {Number} calculated width\r\n */\r\nDGTable.prototype._calculateTbodyWidth = function () {\r\n    const p = this.p;\r\n        \r\n    let tableClassName = this.o.tableClassName,\r\n        rowClassName = tableClassName + '-row',\r\n        cellClassName = tableClassName + '-cell',\r\n        visibleColumns = p.visibleColumns,\r\n        colCount = visibleColumns.length,\r\n        cell,\r\n        cellInner,\r\n        colIndex,\r\n        column;\r\n\r\n    let $row = $('<div>').addClass(rowClassName).css('float', 'left');\r\n    let sumActualWidth = 0;\r\n\r\n    for (colIndex = 0; colIndex < colCount; colIndex++) {\r\n        column = visibleColumns[colIndex];\r\n        cell = createElement('div');\r\n        cell.className = cellClassName;\r\n        cell.style.width = column.actualWidth + 'px';\r\n        if (column.cellClasses) cell.className += ' ' + column.cellClasses;\r\n        cellInner = cell.appendChild(createElement('div'));\r\n        $row.append(cell);\r\n        sumActualWidth += column.actualWidth;\r\n    }\r\n\r\n    let $thisWrapper = $('<div>')\r\n        .addClass(this.el.className)\r\n        .css({ 'z-index': -1, 'position': 'absolute', left: '0', top: '-9999px', 'float': 'left', width: '1px', overflow: 'hidden' })\r\n        .append(\r\n            $('<div>').addClass(tableClassName).append(\r\n                $('<div>').addClass(tableClassName + '-body').css('width', sumActualWidth + 10000).append(\r\n                    $row\r\n                )\r\n            )\r\n        );\r\n\r\n    $thisWrapper.appendTo(document.body);\r\n\r\n    let fractionTest = $('<div style=\"border:1.5px solid #000;width:0;height:0;position:absolute;left:0;top:-9999px\">').appendTo(document.body);\r\n    let hasFractions = parseFloat(fractionTest.css('border-width'));\r\n    hasFractions = Math.round(hasFractions) != hasFractions;\r\n    fractionTest.remove();\r\n\r\n    let width = CssUtil.outerWidth($row);\r\n    width -= p.scrollbarWidth || 0;\r\n\r\n    if (hasFractions) {\r\n        width++;\r\n    }\r\n\r\n    $thisWrapper.remove();\r\n    return width;\r\n};\r\n\r\n/**\r\n * Sets the columns of the table\r\n * @public\r\n * @expose\r\n * @param {COLUMN_OPTIONS[]} columns - Column definitions array\r\n * @param {Boolean=true} render - Should render now?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setColumns = function (columns, render) {\r\n    const p = this.p;\r\n        \r\n    columns = columns || [];\r\n\r\n    let normalizedCols = new ColumnCollection();\r\n    for (let i = 0, order = 0; i < columns.length; i++) {\r\n\r\n        let columnData = columns[i];\r\n        let normalizedColumn = this._initColumnFromData(columnData);\r\n\r\n        if (columnData.order !== undefined) {\r\n            if (columnData.order > order) {\r\n                order = columnData.order + 1;\r\n            }\r\n            normalizedColumn.order = columnData.order;\r\n        } else {\r\n            normalizedColumn.order = order++;\r\n        }\r\n\r\n        normalizedCols.push(normalizedColumn);\r\n    }\r\n    normalizedCols.normalizeOrder();\r\n\r\n    p.columns = normalizedCols;\r\n    p.visibleColumns = normalizedCols.getVisibleColumns();\r\n    \r\n    this._ensureVisibleColumns().clearAndRender(render);\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Add a column to the table\r\n * @public\r\n * @expose\r\n * @param {COLUMN_OPTIONS} columnData column properties\r\n * @param {String|Number} [before=-1] column name or order to be inserted before\r\n * @param {Boolean=true} render - Should render now?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.addColumn = function (columnData, before, render) {\r\n    const p = this.p;\r\n    let columns = p.columns;\r\n\r\n    if (columnData && !columns.get(columnData.name)) {\r\n        let beforeColumn = null;\r\n        if (before !== undefined) {\r\n            beforeColumn = columns.get(before) || columns.getByOrder(before);\r\n        }\r\n\r\n        let column = this._initColumnFromData(columnData);\r\n        column.order = beforeColumn ? beforeColumn.order : (columns.getMaxOrder() + 1);\r\n\r\n        for (let i = columns.getMaxOrder(), to = column.order; i >= to ; i--) {\r\n            let col = columns.getByOrder(i);\r\n            if (col) {\r\n                col.order++;\r\n            }\r\n        }\r\n\r\n        columns.push(column);\r\n        columns.normalizeOrder();\r\n\r\n        p.visibleColumns = columns.getVisibleColumns();\r\n        this._ensureVisibleColumns().clearAndRender(render);\r\n\r\n        this.trigger('addcolumn', column.name);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Remove a column from the table\r\n * @public\r\n * @expose\r\n * @param {String} column column name\r\n * @param {Boolean=true} render - Should render now?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.removeColumn = function (column, render) {\r\n    const p = this.p;\r\n    let columns = p.columns;\r\n\r\n    let colIdx = columns.indexOf(column);\r\n    if (colIdx > -1) {\r\n        columns.splice(colIdx, 1);\r\n        columns.normalizeOrder();\r\n\r\n        p.visibleColumns = columns.getVisibleColumns();\r\n        this._ensureVisibleColumns().clearAndRender(render);\r\n\r\n        this.trigger('removecolumn', column);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets a new cell formatter.\r\n * @public\r\n * @expose\r\n * @param {function(value: *, columnName: String, row: Object):String|null} [formatter=null] - The cell formatter. Should return an HTML.\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setCellFormatter = function (formatter) {\r\n    /**\r\n     * @private\r\n     * @field {Function} cellFormatter */\r\n    this.o.cellFormatter = formatter || function (val) {\r\n        return val;\r\n    };\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets a new header cell formatter.\r\n * @public\r\n * @expose\r\n * @param {function(label: String, columnName: String):String|null} [formatter=null] - The cell formatter. Should return an HTML.\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setHeaderCellFormatter = function (formatter) {\r\n    /**\r\n     * @private\r\n     * @field {Function} headerCellFormatter */\r\n    this.o.headerCellFormatter = formatter || function (val) {\r\n        return val;\r\n    };\r\n        \r\n    return this;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @param {function(row:Object,args:Object):Boolean|null} [filterFunc=null] - The filter function to work with filters. Default is a by-colum filter.\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setFilter = function (filterFunc) {\r\n    /** @private\r\n     * @field {Function} filter */\r\n    this.o.filter = filterFunc;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @param {Object|null} args - Options to pass to the filter function\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.filter = function (args) {\r\n    const p = this.p;\r\n    \r\n    let filterFunc = this.o.filter || ByColumnFilter;\r\n    \r\n    // Deprecated use of older by-column filter\r\n    if (typeof arguments[0] === 'string' && typeof arguments[1] === 'string') {\r\n        args = {\r\n            column: arguments[0],\r\n            keyword: arguments[1],\r\n            caseSensitive: arguments[2],\r\n        };\r\n    }\r\n    \r\n    let hadFilter = !!p.filteredRows;\r\n    if (p.filteredRows) {\r\n        p.filteredRows = null; // Allow releasing array memory now\r\n    }\r\n\r\n    // Shallow-clone the args, as the filter function may want to modify it for keeping state\r\n    p.filterArgs = (typeof args === 'object' && !Array.isArray(args)) ? $.extend({}, args) : args;\r\n    p.filteredRows = p.rows.filteredCollection(filterFunc, args);\r\n\r\n    if (hadFilter || p.filteredRows) {\r\n        this.clearAndRender();\r\n        this.trigger('filter', args);\r\n    }\r\n    \r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._refilter = function() {\r\n    const p = this.p;\r\n\r\n    if (p.filteredRows && p.filterArgs) {\r\n        let filterFunc = this.o.filter || ByColumnFilter;\r\n        p.filteredRows = p.rows.filteredCollection(filterFunc, p.filterArgs);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Set a new label to a column\r\n * @public\r\n * @expose\r\n * @param {String} column Name of the column\r\n * @param {String} label New label for the column\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setColumnLabel = function (column, label) {\r\n    const p = this.p;\r\n\r\n    let col = p.columns.get(column);\r\n    if (col) {\r\n        col.label = label === undefined ? col.name : label;\r\n\r\n        if (col.element) {\r\n            for (let i = 0; i < col.element[0].firstChild.childNodes.length; i++) {\r\n                let node = col.element[0].firstChild.childNodes[i];\r\n                if (node.nodeType === 3) {\r\n                    node.textContent = col.label;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Move a column to a new position\r\n * @public\r\n * @expose\r\n * @param {String|Number} src Name or position of the column to be moved\r\n * @param {String|Number} dest Name of the column currently in the desired position, or the position itself\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.moveColumn = function (src, dest) {\r\n    const o = this.o, p = this.p;\r\n        \r\n    let columns = p.columns,\r\n        col, destCol;\r\n\r\n    if (typeof src === 'string') {\r\n        col = columns.get(src);\r\n    } else if (typeof src === 'number') {\r\n        col = p.visibleColumns[src];\r\n    }\r\n    if (typeof dest === 'string') {\r\n        destCol = columns.get(dest);\r\n    } else if (typeof dest === 'number') {\r\n        destCol = p.visibleColumns[dest];\r\n    }\r\n\r\n    if (col && destCol && src !== dest) {\r\n        let srcOrder = col.order, destOrder = destCol.order;\r\n\r\n        p.visibleColumns = columns.moveColumn(col, destCol).getVisibleColumns();\r\n        this._ensureVisibleColumns();\r\n\r\n        if (o.virtualTable) {\r\n            this.clearAndRender()\r\n                ._updateLastCellWidthFromScrollbar(true);\r\n        } else {\r\n            let headerCell = p.$headerRow.find('>div.' + o.tableClassName + '-header-cell');\r\n            let beforePos = srcOrder < destOrder ? destOrder + 1 : destOrder,\r\n                fromPos = srcOrder;\r\n            headerCell[0].parentNode.insertBefore(headerCell[fromPos], headerCell[beforePos]);\r\n\r\n            let srcWidth = p.visibleColumns[srcOrder];\r\n            srcWidth = (srcWidth.actualWidthConsideringScrollbarWidth || srcWidth.actualWidth) + 'px';\r\n            let destWidth = p.visibleColumns[destOrder];\r\n            destWidth = (destWidth.actualWidthConsideringScrollbarWidth || destWidth.actualWidth) + 'px';\r\n\r\n            let tbodyChildren = p.$tbody[0].childNodes;\r\n            for (let i = 0, count = tbodyChildren.length; i < count; i++) {\r\n                let row = tbodyChildren[i];\r\n                if (row.nodeType !== 1) continue;\r\n                row.insertBefore(row.childNodes[fromPos], row.childNodes[beforePos]);\r\n                row.childNodes[destOrder].firstChild.style.width = destWidth;\r\n                row.childNodes[srcOrder].firstChild.style.width = srcWidth;\r\n            }\r\n        }\r\n\r\n        this.trigger('movecolumn', col.name, srcOrder, destOrder);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sort the table\r\n * @public\r\n * @expose\r\n * @param {String?} column Name of the column to sort on (or null to remove sort arrow)\r\n * @param {Boolean=} descending Sort in descending order\r\n * @param {Boolean} [add=false] Should this sort be on top of the existing sort? (For multiple column sort)\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.sort = function (column, descending, add) {\r\n    const o = this.o, p = this.p;\r\n    \r\n    let columns = p.columns,\r\n        col = columns.get(column);\r\n\r\n    let currentSort = p.rows.sortColumn;\r\n        \r\n    if (col) {\r\n\r\n        if (currentSort.length && currentSort[currentSort.length - 1].column == column) {\r\n            // Recognize current descending mode, if currently sorting by this column\r\n            descending = descending === undefined ? !currentSort[currentSort.length - 1].descending : descending;\r\n        }\r\n\r\n        if (add) { // Add the sort to current sort stack\r\n\r\n            for (let i = 0; i < currentSort.length; i++) {\r\n                if (currentSort[i].column == col.name) {\r\n                    if (i < currentSort.length - 1) {\r\n                        currentSort.length = 0;\r\n                    } else {\r\n                        currentSort.splice(currentSort.length - 1, 1);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            if ((o.sortableColumns > 0 /* allow manual sort when disabled */ && currentSort.length >= o.sortableColumns) || currentSort.length >= p.visibleColumns.length) {\r\n                currentSort.length = 0;\r\n            }\r\n\r\n        } else { // Sort only by this column\r\n            currentSort.length = 0;\r\n        }\r\n\r\n        // Default to ascending\r\n        descending = descending === undefined ? false : descending;\r\n\r\n        // Set the required column in the front of the stack\r\n        currentSort.push({\r\n            column: col.name,\r\n            comparePath: col.comparePath,\r\n            descending: !!descending,\r\n        });\r\n    } else {\r\n        currentSort.length = 0;\r\n    }\r\n\r\n    this._clearSortArrows();\r\n\r\n    for (let i = 0; i < currentSort.length; i++) {\r\n        this._showSortArrow(currentSort[i].column, currentSort[i].descending);\r\n    }\r\n\r\n    if (o.adjustColumnWidthForSortArrow && !o._tableSkeletonNeedsRendering) {\r\n        this.tableWidthChanged(true);\r\n    }\r\n\r\n    if (o.virtualTable) {\r\n        while (p.tbody && p.tbody.firstChild) {\r\n            this.trigger('rowdestroy', p.tbody.firstChild);\r\n            this._unbindCellEventsForRow(p.tbody.firstChild);\r\n            p.tbody.removeChild(p.tbody.firstChild);\r\n        }\r\n    } else {\r\n        p.tableSkeletonNeedsRendering = true;\r\n    }\r\n\r\n    p.rows.sortColumn = currentSort;\r\n    \r\n    if (currentSort.length) {\r\n        p.rows.sort(!!p.filteredRows);\r\n        if (p.filteredRows) {\r\n            p.filteredRows.sort(!!p.filteredRows);\r\n        }\r\n    }\r\n\r\n    // Build output for event, with option names that will survive compilers\r\n    let sorts = [];\r\n    for (let i = 0; i < currentSort.length; i++) {\r\n        sorts.push({ 'column': currentSort[i].column, 'descending': currentSort[i].descending });\r\n    }\r\n    this.trigger('sort', sorts);\r\n    \r\n    return this;\r\n};\r\n\r\n/**\r\n * Re-sort the table using current sort specifiers\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.resort = function () {\r\n    const p = this.p;\r\n    let columns = p.columns;\r\n\r\n    let currentSort = p.rows.sortColumn;\r\n    if (currentSort.length) {\r\n        \r\n        for (let i = 0; i < currentSort.length; i++) {\r\n            if (!columns.get(currentSort[i].column)) {\r\n                currentSort.splice(i--, 1);\r\n            }\r\n        }\r\n        \r\n        p.rows.sortColumn = currentSort;\r\n        if (currentSort.length) {\r\n            p.rows.sort(!!p.filteredRows);\r\n            if (p.filteredRows) {\r\n                p.filteredRows.sort(!!p.filteredRows);\r\n            }\r\n        }\r\n\r\n        // Build output for event, with option names that will survive compilers\r\n        let sorts = [];\r\n        for (let i = 0; i < currentSort.length; i++) {\r\n            sorts.push({ 'column': currentSort[i].column, 'descending': currentSort[i].descending });\r\n        }\r\n        this.trigger('sort', sorts);\r\n    }\r\n    \r\n    \r\n    return this;\r\n};\r\n\r\n/**\r\n * Make sure there's at least one column visible\r\n * @private\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._ensureVisibleColumns = function () {\r\n    const p = this.p;\r\n\r\n    if (p.visibleColumns.length === 0 && p.columns.length) {\r\n        p.columns[0].visible = true;\r\n        p.visibleColumns.push(p.columns[0]);\r\n        this.trigger('showcolumn', p.columns[0].name);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Show or hide a column\r\n * @public\r\n * @expose\r\n * @param {String} column Unique column name\r\n * @param {Boolean} visible New visibility mode for the column\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setColumnVisible = function (column, visible) {\r\n    const p = this.p;\r\n\r\n    let col = p.columns.get(column);\r\n\r\n    //noinspection PointlessBooleanExpressionJS\r\n    visible = !!visible;\r\n\r\n    if (col && !!col.visible != visible) {\r\n        col.visible = visible;\r\n        p.visibleColumns = p.columns.getVisibleColumns();\r\n        this.trigger(visible ? 'showcolumn' : 'hidecolumn', column);\r\n        this._ensureVisibleColumns();\r\n        this.clearAndRender();\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Get the visibility mode of a column\r\n * @public\r\n * @expose\r\n * @returns {Boolean} true if visible\r\n */\r\nDGTable.prototype.isColumnVisible = function (column) {\r\n    const p = this.p;\r\n    let col = p.columns.get(column);\r\n    if (col) {\r\n        return col.visible;\r\n    }\r\n    return false;\r\n};\r\n\r\n/**\r\n * Globally set the minimum column width\r\n * @public\r\n * @expose\r\n * @param {Number} minColumnWidth Minimum column width\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setMinColumnWidth = function (minColumnWidth) {\r\n    let o = this.o;\r\n    minColumnWidth = Math.max(minColumnWidth, 0);\r\n    if (o.minColumnWidth != minColumnWidth) {\r\n        o.minColumnWidth = minColumnWidth;\r\n        this.tableWidthChanged(true);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Get the current minimum column width\r\n * @public\r\n * @expose\r\n * @returns {Number} Minimum column width\r\n */\r\nDGTable.prototype.getMinColumnWidth = function () {\r\n    return this.o.minColumnWidth;\r\n};\r\n\r\n/**\r\n * Set the limit on concurrent columns sorted\r\n * @public\r\n * @expose\r\n * @param {Number} sortableColumns How many sortable columns to allow?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setSortableColumns = function (sortableColumns) {\r\n    const p = this.p, o = this.o;\r\n    if (o.sortableColumns != sortableColumns) {\r\n        o.sortableColumns = sortableColumns;\r\n        if (p.$table) {\r\n            let headerCell = p.$headerRow.find('>div.' + o.tableClassName + '-header-cell');\r\n            for (let i = 0; i < headerCell.length; i++) {\r\n                $(headerCell[0])[(o.sortableColumns > 0 && p.visibleColumns[i].sortable) ? 'addClass' : 'removeClass']('sortable');\r\n            }\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Get the limit on concurrent columns sorted\r\n * @public\r\n * @expose\r\n * @returns {Number} How many sortable columns are allowed?\r\n */\r\nDGTable.prototype.getSortableColumns = function () {\r\n    return this.o.sortableColumns;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @param {Boolean?} movableColumns=true are the columns movable?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setMovableColumns = function (movableColumns) {\r\n    let o = this.o;\r\n    //noinspection PointlessBooleanExpressionJS\r\n    movableColumns = movableColumns === undefined ? true : !!movableColumns;\r\n    if (o.movableColumns != movableColumns) {\r\n        o.movableColumns = movableColumns;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @returns {Boolean} are the columns movable?\r\n */\r\nDGTable.prototype.getMovableColumns = function () {\r\n    return this.o.movableColumns;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @param {Boolean} resizableColumns=true are the columns resizable?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setResizableColumns = function (resizableColumns) {\r\n    let o = this.o;\r\n    //noinspection PointlessBooleanExpressionJS\r\n    resizableColumns = resizableColumns === undefined ? true : !!resizableColumns;\r\n    if (o.resizableColumns != resizableColumns) {\r\n        o.resizableColumns = resizableColumns;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @returns {Boolean} are the columns resizable?\r\n */\r\nDGTable.prototype.getResizableColumns = function () {\r\n    return this.o.resizableColumns;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @param {{function(string,boolean):{function(a:*,b:*):boolean}}} comparatorCallback a callback function that returns the comparator for a specific column\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setComparatorCallback = function (comparatorCallback) {\r\n    let o = this.o;\r\n    if (o.onComparatorRequired != comparatorCallback) {\r\n        o.onComparatorRequired = comparatorCallback;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Set a new width to a column\r\n * @public\r\n * @expose\r\n * @param {String} column name of the column to resize\r\n * @param {Number|String} width new column as pixels, or relative size (0.5, 50%)\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setColumnWidth = function (column, width) {\r\n\r\n    const p = this.p;\r\n\r\n    let col = p.columns.get(column);\r\n\r\n    let parsedWidth = this._parseColumnWidth(width, col.ignoreMin ? 0 : this.o.minColumnWidth);\r\n\r\n    if (col) {\r\n        let oldWidth = this._serializeColumnWidth(col);\r\n\r\n        col.width = parsedWidth.width;\r\n        col.widthMode = parsedWidth.mode;\r\n\r\n        let newWidth = this._serializeColumnWidth(col);\r\n\r\n        if (oldWidth != newWidth) {\r\n            this.tableWidthChanged(true); // Calculate actual sizes\r\n        }\r\n\r\n        this.trigger('columnwidth', col.name, oldWidth, newWidth);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @param {String} column name of the column\r\n * @returns {String|null} the serialized width of the specified column, or null if column not found\r\n */\r\nDGTable.prototype.getColumnWidth = function (column) {\r\n    const p = this.p;\r\n\r\n    let col = p.columns.get(column);\r\n    if (col) {\r\n        return this._serializeColumnWidth(col);\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @param {String} column name of the column\r\n * @returns {SERIALIZED_COLUMN|null} configuration for all columns\r\n */\r\nDGTable.prototype.getColumnConfig = function (column) {\r\n    const p = this.p;\r\n    let col = p.columns.get(column);\r\n    if (col) {\r\n        return {\r\n            'order': col.order,\r\n            'width': this._serializeColumnWidth(col),\r\n            'visible': col.visible,\r\n            'label': col.label,\r\n        };\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns a config object for the columns, to allow saving configurations for next time...\r\n * @public\r\n * @expose\r\n * @returns {Object} configuration for all columns\r\n */\r\nDGTable.prototype.getColumnsConfig = function () {\r\n    const p = this.p;\r\n\r\n    let config = {};\r\n    for (let i = 0; i < p.columns.length; i++) {\r\n        config[p.columns[i].name] = this.getColumnConfig(p.columns[i].name);\r\n    }\r\n    return config;\r\n};\r\n\r\n/**\r\n * Returns an array of the currently sorted columns\r\n * @public\r\n * @expose\r\n * @returns {Array.<SERIALIZED_COLUMN_SORT>} configuration for all columns\r\n */\r\nDGTable.prototype.getSortedColumns = function () {\r\n    const p = this.p;\r\n\r\n    let sorted = [];\r\n    for (let i = 0; i < p.rows.sortColumn.length; i++) {\r\n        let sort = p.rows.sortColumn[i];\r\n        sorted.push({ column: sort.column, descending: sort.descending });\r\n    }\r\n    return sorted;\r\n};\r\n\r\n/**\r\n * Returns the HTML string for a specific cell. Can be used externally for special cases (i.e. when setting a fresh HTML in the cell preview through the callback).\r\n * @public\r\n * @expose\r\n * @param {Number} row - index of the row\r\n * @param {String} columnName - name of the column\r\n * @returns {String} HTML string for the specified cell\r\n */\r\nDGTable.prototype.getHtmlForCell = function (row, columnName) {\r\n    const p = this.p;\r\n\r\n    if (row < 0 || row > p.rows.length - 1) return null;\r\n    let column = p.columns.get(columnName);\r\n    if (!column) return null;\r\n    let rowData = p.rows[row];\r\n\r\n    let dataPath = column.dataPath;\r\n    let colValue = rowData[dataPath[0]];\r\n    for (let dataPathIndex = 1; dataPathIndex < dataPath.length; dataPathIndex++) {\r\n        colValue = colValue[dataPath[dataPathIndex]];\r\n    }\r\n\r\n    let content = this.o.cellFormatter(colValue, column.name, rowData);\r\n    if (content === undefined) {\r\n        content = '';\r\n    }\r\n    return content;\r\n};\r\n\r\n/**\r\n * Returns the HTML string for a specific cell. Can be used externally for special cases (i.e. when setting a fresh HTML in the cell preview through the callback).\r\n * @public\r\n * @expose\r\n * @param {Object} rowData - row data\r\n * @param {Object} column - column data\r\n * @returns {String} HTML string for the specified cell\r\n */\r\nDGTable.prototype._getHtmlForCell = function (rowData, column) {\r\n    let dataPath = column.dataPath;\r\n    let colValue = rowData[dataPath[0]];\r\n    for (let dataPathIndex = 1; dataPathIndex < dataPath.length; dataPathIndex++) {\r\n        if (colValue == null) break;\r\n        colValue = colValue && colValue[dataPath[dataPathIndex]];\r\n    }\r\n\r\n    let content = this.o.cellFormatter(colValue, column.name, rowData);\r\n    if (content === undefined) {\r\n        content = '';\r\n    }\r\n    \r\n    return content;\r\n};\r\n\r\n/**\r\n * Returns the y pos of a row by index\r\n * @public\r\n * @expose\r\n * @param {Number} rowIndex - index of the row\r\n * @returns {Number|null} Y pos\r\n */\r\nDGTable.prototype.getRowYPos = function (rowIndex) {\r\n    const p = this.p;\r\n    \r\n    if (this.o.virtualTable) {\r\n        return rowIndex > 0 ? p.virtualRowHeightFirst + (rowIndex - 1) * p.virtualRowHeight : 0;\r\n    } else {\r\n        let row = p.tbody.childNodes[rowIndex];\r\n        return row ? row.offsetTop : null;\r\n    }\r\n};\r\n\r\n/**\r\n * Returns the row data for a specific row\r\n * @public\r\n * @expose\r\n * @param {Number} row index of the row\r\n * @returns {Object} Row data\r\n */\r\nDGTable.prototype.getDataForRow = function (row) {\r\n    const p = this.p;\r\n\r\n    if (row < 0 || row > p.rows.length - 1) return null;\r\n    return p.rows[row];\r\n};\r\n\r\n/**\r\n * Gets the number of rows\r\n * @public\r\n * @expose\r\n * @returns {Number} Row count\r\n */\r\nDGTable.prototype.getRowCount = function () {\r\n    const p = this.p;\r\n    return p.rows ? p.rows.length : 0;\r\n};\r\n\r\n/**\r\n * Returns the physical row index for specific row\r\n * @public\r\n * @expose\r\n * @param {Object} rowData - Row data to find\r\n * @returns {Number} Row index\r\n */\r\nDGTable.prototype.getIndexForRow = function (rowData) {\r\n    const p = this.p;\r\n    return p.rows.indexOf(rowData);\r\n};\r\n\r\n/**\r\n * Gets the number of filtered rows\r\n * @public\r\n * @expose\r\n * @returns {Number} Filtered row count\r\n */\r\nDGTable.prototype.getFilteredRowCount = function () {\r\n    const p = this.p;\r\n    return (p.filteredRows || p.rows).length;\r\n};\r\n\r\n/**\r\n * Returns the filtered row index for specific row\r\n * @public\r\n * @expose\r\n * @param {Object} rowData - Row data to find\r\n * @returns {Number} Row index\r\n */\r\nDGTable.prototype.getIndexForFilteredRow = function (rowData) {\r\n    const p = this.p;\r\n    return (p.filteredRows || p.rows).indexOf(rowData);\r\n};\r\n\r\n/**\r\n * Returns the row data for a specific row\r\n * @public\r\n * @expose\r\n * @param {Number} row index of the filtered row\r\n * @returns {Object} Row data\r\n */\r\nDGTable.prototype.getDataForFilteredRow = function (row) {\r\n    const p = this.p;\r\n    if (row < 0 || row > (p.filteredRows || p.rows).length - 1) return null;\r\n    return (p.filteredRows || p.rows)[row];\r\n};\r\n\r\n/**\r\n * Returns DOM element of the header row\r\n * @public\r\n * @expose\r\n * @returns {Element} Row element\r\n */\r\nDGTable.prototype.getHeaderRowElement = function () {\r\n    return this.p.headerRow;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {Element} el\r\n * @returns {Number} width\r\n */\r\nDGTable.prototype._horizontalPadding = function(el) {\r\n    return ((parseFloat($.css(el, 'padding-left')) || 0) +\r\n    (parseFloat($.css(el, 'padding-right')) || 0));\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {Element} el\r\n * @returns {Number} width\r\n */\r\nDGTable.prototype._horizontalBorderWidth = function(el) {\r\n    return ((parseFloat($.css(el, 'border-left')) || 0) +\r\n    (parseFloat($.css(el, 'border-right')) || 0));\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {Number} width\r\n */\r\nDGTable.prototype._calculateWidthAvailableForColumns = function() {\r\n    const o = this.o, p = this.p;\r\n\r\n    // Changing display mode briefly, to prevent taking in account the  parent's scrollbar width when we are the cause for it\r\n    let oldDisplay, lastScrollTop, lastScrollLeft;\r\n    if (p.$table) {\r\n        lastScrollTop = p.table ? p.table.scrollTop : 0;\r\n        lastScrollLeft = p.table ? p.table.scrollLeft : 0;\r\n\r\n        if (o.virtualTable) {\r\n            oldDisplay = p.$table[0].style.display;\r\n            p.$table[0].style.display = 'none';\r\n        }\r\n    }\r\n\r\n    let detectedWidth = CssUtil.width(this.$el);\r\n\r\n    if (p.$table) {\r\n        if (o.virtualTable) {\r\n            p.$table[0].style.display = oldDisplay;\r\n        }\r\n\r\n        p.table.scrollTop = lastScrollTop;\r\n        p.table.scrollLeft = lastScrollLeft;\r\n        p.header.scrollLeft = lastScrollLeft;\r\n    }\r\n\r\n    let tableClassName = o.tableClassName;\r\n\r\n    let $thisWrapper = $('<div>').addClass(this.el.className).css({ 'z-index': -1, 'position': 'absolute', left: '0', top: '-9999px' });\r\n    let $header = $('<div>').addClass(tableClassName + '-header').appendTo($thisWrapper);\r\n    let $headerRow = $('<div>').addClass(tableClassName + '-header-row').appendTo($header);\r\n    for (let i = 0; i < p.visibleColumns.length; i++) {\r\n        $headerRow.append($('<div><div></div></div>').addClass(tableClassName + '-header-cell').addClass(p.visibleColumns[i].cellClasses || ''));\r\n    }\r\n    $thisWrapper.appendTo(document.body);\r\n\r\n    detectedWidth -= this._horizontalBorderWidth($headerRow[0]);\r\n\r\n    let $cells = $headerRow.find('>div.' + tableClassName + '-header-cell');\r\n    for (let i = 0; i < $cells.length; i++) {\r\n        let $cell = $($cells[i]);\r\n\r\n        let isBoxing = $cell.css('boxSizing') === 'border-box';\r\n        if (!isBoxing) {\r\n            detectedWidth -=\r\n                (parseFloat($cell.css('border-right-width')) || 0) +\r\n                (parseFloat($cell.css('border-left-width')) || 0) +\r\n                (this._horizontalPadding($cell[0])); // CELL's padding\r\n        }\r\n    }\r\n\r\n    if ($thisWrapper) {\r\n        $thisWrapper.remove();\r\n    }\r\n\r\n    return Math.max(0, detectedWidth);\r\n};\r\n\r\n/**\r\n * Notify the table that its width has changed\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.tableWidthChanged = (function () {\r\n\r\n    let getTextWidth = function(text) {\r\n        let tableClassName = this.o.tableClassName;\r\n\r\n        let $cell, $tableWrapper = $('<div>').addClass(this.$el).append(\r\n            $('<div>').addClass(tableClassName + '-header').append(\r\n                $('<div>').addClass(tableClassName + '-header-row').append(\r\n                    $cell = $('<div>').addClass(tableClassName + '-header-cell').append(\r\n                        $('<div>').text(text)\r\n                    )\r\n                )\r\n            )\r\n        ).css({ 'position': 'absolute', top: '-9999px', 'visibility': 'hidden' });\r\n        $tableWrapper.appendTo(document.body);\r\n\r\n        let width = CssUtil.width($cell);\r\n\r\n        $tableWrapper.remove();\r\n\r\n        return width;\r\n    };\r\n\r\n    let lastDetectedWidth = null;\r\n\r\n    /**\r\n     * @public\r\n     * @expose\r\n     * @param {Boolean} [forceUpdate=false]\r\n     * @param {Boolean} [renderColumns=true]\r\n     * @returns {DGTable} self\r\n     */\r\n    return function(forceUpdate, renderColumns) {\r\n\r\n        let that = this,\r\n            o = that.o,\r\n            p = that.p,\r\n            detectedWidth = this._calculateWidthAvailableForColumns(),\r\n            sizeLeft = detectedWidth,\r\n            relatives = 0;\r\n\r\n        renderColumns = renderColumns === undefined || renderColumns;\r\n\r\n        let tableWidthBeforeCalculations = 0;\r\n\r\n        if (!p.tbody) {\r\n            renderColumns = false;\r\n        }\r\n\r\n        if (renderColumns) {\r\n            tableWidthBeforeCalculations = parseFloat(p.tbody.style.minWidth) || 0;\r\n        }\r\n\r\n        if (sizeLeft != lastDetectedWidth || forceUpdate) {\r\n            lastDetectedWidth = detectedWidth;\r\n\r\n            let absWidthTotal = 0, changedColumnIndexes = [], totalRelativePercentage = 0;\r\n\r\n            for (let i = 0; i < p.columns.length; i++) {\r\n                p.columns[i].actualWidthConsideringScrollbarWidth = null;\r\n            }\r\n\r\n            for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                let col = p.visibleColumns[i];\r\n                if (col.widthMode === ColumnWidthMode.ABSOLUTE) {\r\n                    let width = col.width;\r\n                    width += col.arrowProposedWidth || 0; // Sort-arrow width\r\n                    if (!col.ignoreMin && width < o.minColumnWidth) {\r\n                        width = o.minColumnWidth;\r\n                    }\r\n                    sizeLeft -= width;\r\n                    absWidthTotal += width;\r\n\r\n                    // Update actualWidth\r\n                    if (width !== col.actualWidth) {\r\n                        col.actualWidth = width;\r\n                        changedColumnIndexes.push(i);\r\n                    }\r\n                } else if (col.widthMode === ColumnWidthMode.AUTO) {\r\n                    let width = getTextWidth.call(this, col.label) + 20;\r\n                    width += col.arrowProposedWidth || 0; // Sort-arrow width\r\n                    if (!col.ignoreMin && width < o.minColumnWidth) {\r\n                        width = o.minColumnWidth;\r\n                    }\r\n                    sizeLeft -= width;\r\n                    absWidthTotal += width;\r\n\r\n                    // Update actualWidth\r\n                    if (width !== col.actualWidth) {\r\n                        col.actualWidth = width;\r\n                        if (!o.convertColumnWidthsToRelative) {\r\n                            changedColumnIndexes.push(i);\r\n                        }\r\n                    }\r\n                } else if (col.widthMode === ColumnWidthMode.RELATIVE) {\r\n                    totalRelativePercentage += col.width;\r\n                    relatives++;\r\n                }\r\n            }\r\n\r\n            // Normalize relative sizes if needed\r\n            if (o.convertColumnWidthsToRelative) {\r\n                for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                    let col = p.visibleColumns[i];\r\n                    if (col.widthMode === ColumnWidthMode.AUTO) {\r\n                        col.widthMode = ColumnWidthMode.RELATIVE;\r\n                        sizeLeft += col.actualWidth;\r\n                        col.width = col.actualWidth / absWidthTotal;\r\n                        totalRelativePercentage += col.width;\r\n                        relatives++;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Normalize relative sizes if needed\r\n            if (relatives && ((totalRelativePercentage < 1 && o.relativeWidthGrowsToFillWidth) ||\r\n                (totalRelativePercentage > 1 && o.relativeWidthShrinksToFillWidth))) {\r\n                for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                    let col = p.visibleColumns[i];\r\n                    if (col.widthMode === ColumnWidthMode.RELATIVE) {\r\n                        col.width /= totalRelativePercentage;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let sizeLeftForRelative = Math.max(0, sizeLeft); // Use this as the space to take the relative widths out of\r\n            if (sizeLeftForRelative === 0) {\r\n                sizeLeftForRelative = p.table.clientWidth;\r\n            }\r\n\r\n            let minColumnWidthRelative = (o.minColumnWidth / sizeLeftForRelative);\r\n            if (isNaN(minColumnWidthRelative)) {\r\n                minColumnWidthRelative = 0;\r\n            }\r\n            if (minColumnWidthRelative > 0) {\r\n                let extraRelative = 0, delta;\r\n\r\n                // First pass - make sure they are all constrained to the minimum width\r\n                for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                    let col = p.visibleColumns[i];\r\n                    if (col.widthMode === ColumnWidthMode.RELATIVE) {\r\n                        if (!col.ignoreMin && col.width < minColumnWidthRelative) {\r\n                            extraRelative += minColumnWidthRelative - col.width;\r\n                            col.width = minColumnWidthRelative;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Second pass - try to take the extra width out of the other columns to compensate\r\n                for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                    let col = p.visibleColumns[i];\r\n                    if (col.widthMode === ColumnWidthMode.RELATIVE) {\r\n                        if (!col.ignoreMin && col.width > minColumnWidthRelative) {\r\n                            if (extraRelative > 0) {\r\n                                delta = Math.min(extraRelative, col.width - minColumnWidthRelative);\r\n                                col.width -= delta;\r\n                                extraRelative -= delta;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // Try to fill width\r\n            if (o.autoFillTableWidth && sizeLeft > 0) {\r\n                let nonResizableTotal = 0;\r\n                let sizeLeftToFill = sizeLeft;\r\n                \r\n                for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                    let col = p.visibleColumns[i];\r\n                    if (!col.resizable && col.widthMode === ColumnWidthMode.ABSOLUTE)\r\n                        nonResizableTotal += col.width;\r\n                    \r\n                    if (col.widthMode === ColumnWidthMode.RELATIVE)\r\n                        sizeLeftToFill -= Math.round(sizeLeftForRelative * col.width);\r\n                }\r\n                \r\n                let conv = ((detectedWidth - nonResizableTotal) / (detectedWidth - sizeLeftToFill - nonResizableTotal)) || NaN;\r\n                for (let i = 0; i < p.visibleColumns.length && sizeLeftToFill > 0; i++) {\r\n                    let col = p.visibleColumns[i];\r\n                    if (!col.resizable && col.widthMode === ColumnWidthMode.ABSOLUTE)\r\n                        continue;\r\n                    \r\n                    if (col.widthMode === ColumnWidthMode.RELATIVE) {\r\n                        col.width *= conv;\r\n                    } else {\r\n                        let width = col.actualWidth * conv;\r\n                        if (col.actualWidth !== width) {\r\n                            col.actualWidth = width;\r\n                            if (changedColumnIndexes.indexOf(i) === -1)\r\n                                changedColumnIndexes.push(i);\r\n                        }\r\n                    } \r\n                }\r\n            }\r\n            \r\n            // Materialize relative sizes\r\n            for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                let col = p.visibleColumns[i];\r\n                if (col.widthMode === ColumnWidthMode.RELATIVE) {\r\n                    let width = Math.round(sizeLeftForRelative * col.width);\r\n                    sizeLeft -= width;\r\n                    relatives--;\r\n\r\n                    // Take care of rounding errors\r\n                    if (relatives === 0 && sizeLeft === 1) { // Take care of rounding errors\r\n                        width++;\r\n                        sizeLeft--;\r\n                    }\r\n                    if (sizeLeft === -1) {\r\n                        width--;\r\n                        sizeLeft++;\r\n                    }\r\n\r\n                    // Update actualWidth\r\n                    if (width !== col.actualWidth) {\r\n                        col.actualWidth = width;\r\n                        changedColumnIndexes.push(i);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (p.visibleColumns.length) {\r\n                // (There should always be at least 1 column visible, but just in case)\r\n                p.visibleColumns[p.visibleColumns.length - 1].actualWidthConsideringScrollbarWidth =\r\n                    p.visibleColumns[p.visibleColumns.length - 1].actualWidth - (p.scrollbarWidth || 0);\r\n            }\r\n\r\n            if (renderColumns) {\r\n                let tableWidth = this._calculateTbodyWidth();\r\n\r\n                if (tableWidthBeforeCalculations < tableWidth) {\r\n                    this._updateTableWidth(false);\r\n                }\r\n\r\n                for (let i = 0; i < changedColumnIndexes.length; i++) {\r\n                    this._resizeColumnElements(changedColumnIndexes[i]);\r\n                }\r\n\r\n                if (tableWidthBeforeCalculations > tableWidth) {\r\n                    this._updateTableWidth(false);\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    };\r\n})();\r\n\r\n/**\r\n * Notify the table that its height has changed\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.tableHeightChanged = function () {\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p;\r\n\r\n    if (!p.$table) {\r\n        return that;\r\n    }\r\n\r\n    let height = CssUtil.innerHeight(that.$el)\r\n        - (parseFloat(p.$table.css('border-top-width')) || 0) // Subtract top border of inner element\r\n        - (parseFloat(p.$table.css('border-bottom-width')) || 0); // Subtract bottom border of inner element\r\n\r\n    if (height != o.height) {\r\n\r\n        o.height = height;\r\n\r\n        if (p.tbody) {\r\n            // At least 1 pixel - to show scrollers correctly.\r\n            p.tbody.style.height = Math.max(o.height - CssUtil.outerHeight(p.$headerRow), 1) + 'px';\r\n        }\r\n\r\n        if (o.virtualTable) {\r\n            that.clearAndRender();\r\n        }\r\n    }\r\n\r\n    return that;\r\n};\r\n\r\n/**\r\n * Add rows to the table\r\n * @public\r\n * @expose\r\n * @param {Object[]} data - array of rows to add to the table\r\n * @param {Number} [at=-1] - where to add the rows at\r\n * @param {Boolean} [resort=false] - should resort all rows?\r\n * @param {Boolean} [render=true]\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.addRows = function (data, at, resort, render) {\r\n    let that = this,\r\n        p = that.p;\r\n        \r\n    if (typeof at === 'boolean') {\r\n        render = resort;\r\n        resort = at;\r\n        at = -1;\r\n    }\r\n    \r\n    if (typeof at !== 'number')\r\n        at = -1;\r\n    \r\n    if (at < 0 || at > p.rows.length)\r\n        at = p.rows.length;\r\n    \r\n    render = (render === undefined) ? true : !!render;\r\n\r\n    if (data) {\r\n        p.rows.add(data, at);\r\n        \r\n        if (p.filteredRows || (resort && p.rows.sortColumn.length)) {\r\n            \r\n            if (resort && p.rows.sortColumn.length) {\r\n                this.resort();\r\n            } else {\r\n                this._refilter();\r\n            }\r\n            \r\n            p.tableSkeletonNeedsRendering = true;\r\n            \r\n            if (render) {\r\n                // Render the skeleton with all rows from scratch\r\n                this.render();\r\n            }\r\n            \r\n        } else if (render) {\r\n            let childNodes = p.tbody.childNodes;\r\n            \r\n            if (that.o.virtualTable) {\r\n                \r\n                while (p.tbody.firstChild) {\r\n                    this.trigger('rowdestroy', p.tbody.firstChild);\r\n                    this._unbindCellEventsForRow(p.tbody.firstChild);\r\n                    p.tbody.removeChild(p.tbody.firstChild);\r\n                }\r\n\r\n                this._calculateVirtualHeight() // Calculate virtual height\r\n                    ._updateLastCellWidthFromScrollbar() // Detect vertical scrollbar height\r\n                    .render()\r\n                    ._updateTableWidth(false); // Update table width to suit the required width considering vertical scrollbar\r\n                \r\n            } else if (p.$tbody) {\r\n                \r\n                let firstRow = at,\r\n                    lastRow = at + data.length - 1;\r\n                \r\n                let renderedRows = that.renderRows(firstRow, lastRow);\r\n                p.tbody.insertBefore(renderedRows, childNodes[at] || null);\r\n                \r\n                for (let i = lastRow + 1; i < childNodes.length; i++) {\r\n                    let row = childNodes[i];\r\n                    row['rowIndex'] += data.length;\r\n                    row['physicalRowIndex'] += data.length;\r\n                }\r\n                               \r\n                this.render()\r\n                    ._updateLastCellWidthFromScrollbar() // Detect vertical scrollbar height, and update existing last cells\r\n                    ._updateTableWidth(true); // Update table width to suit the required width considering vertical scrollbar\r\n\r\n            }\r\n        }\r\n\r\n        this.trigger('addrows', data.length, false);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a row from the table\r\n * @public\r\n * @expose\r\n * @param {Number} physicalRowIndex - index\r\n * @param {Number} count - how many rows to remove\r\n * @param {Boolean=true} render\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.removeRows = function (physicalRowIndex, count, render) {\r\n    let that = this,\r\n        p = that.p;\r\n        \r\n    if (typeof count !== 'number' || count <= 0) return this;\r\n\r\n    if (physicalRowIndex < 0 || physicalRowIndex > p.rows.length - 1) return this;\r\n\r\n    p.rows.splice(physicalRowIndex, count);\r\n    render = (render === undefined) ? true : !!render;\r\n    \r\n    if (p.filteredRows) {\r\n        \r\n        this._refilter();\r\n        \r\n        p.tableSkeletonNeedsRendering = true;\r\n        \r\n        if (render) {\r\n            // Render the skeleton with all rows from scratch\r\n            this.render();\r\n        }\r\n        \r\n    } else if (render) {\r\n        \r\n        let childNodes = p.tbody.childNodes;\r\n        \r\n        if (this.o.virtualTable) {\r\n                \r\n            while (p.tbody.firstChild) {\r\n                this.trigger('rowdestroy', p.tbody.firstChild);\r\n                this._unbindCellEventsForRow(p.tbody.firstChild);\r\n                p.tbody.removeChild(p.tbody.firstChild);\r\n            }\r\n            \r\n            this._calculateVirtualHeight()\r\n                ._updateLastCellWidthFromScrollbar()\r\n                .render()\r\n                ._updateTableWidth(false); // Update table width to suit the required width considering vertical scrollbar\r\n                \r\n                \r\n        } else {\r\n            \r\n            let countRemoved = 0, lastRowIndex = physicalRowIndex + count - 1;\r\n            \r\n            for (let i = 0; i < childNodes.length; i++) {\r\n                let row = childNodes[i];\r\n                let index = row['physicalRowIndex'];\r\n                \r\n                if (index >= physicalRowIndex) {\r\n                    if (index <= lastRowIndex) {\r\n                        this.trigger('rowdestroy', row);\r\n                        this._unbindCellEventsForRow(row);\r\n                        p.tbody.removeChild(row);\r\n                        i--;\r\n                    } else {\r\n                        row['physicalRowIndex'] -= count;\r\n                    }\r\n                } else {\r\n                    row['rowIndex'] = i;\r\n                }\r\n            }\r\n                        \r\n            this.render()\r\n                ._updateLastCellWidthFromScrollbar()\r\n                ._updateTableWidth(true); // Update table width to suit the required width considering vertical scrollbar\r\n                \r\n        }\r\n    }\r\n    \r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a row from the table\r\n * @public\r\n * @expose\r\n * @param {Number} physicalRowIndex - index\r\n * @param {Boolean=true} render\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.removeRow = function (physicalRowIndex, render) {\r\n    return this.removeRows(physicalRowIndex, 1, render);\r\n};\r\n\r\n/**\r\n * Refreshes the row specified\r\n * @public\r\n * @expose\r\n * @param {Number} physicalRowIndex index\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.refreshRow = function(physicalRowIndex) {\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    if (physicalRowIndex < 0 || physicalRowIndex > p.rows.length - 1) return this;\r\n\r\n    // Find out if the row is in the rendered dataset\r\n    let rowIndex = -1;\r\n    if (p.filteredRows && (rowIndex = indexOf(p.filteredRows, p.rows[physicalRowIndex])) === -1) return this;\r\n\r\n    if (rowIndex === -1) {\r\n        rowIndex = physicalRowIndex;\r\n    }\r\n\r\n    let childNodes = p.tbody.childNodes;\r\n\r\n    if (this.o.virtualTable) {\r\n        // Now make sure that the row actually rendered, as this is a virtual table\r\n        let isRowVisible = false;\r\n        let i = 0;\r\n        \r\n        for (; i < childNodes.length; i++) {\r\n            if (childNodes[i]['physicalRowIndex'] === physicalRowIndex) {\r\n                isRowVisible = true;\r\n                this.trigger('rowdestroy', childNodes[i]);\r\n                this._unbindCellEventsForRow(childNodes[i]);\r\n                p.tbody.removeChild(childNodes[i]);\r\n                break;\r\n            }\r\n        }\r\n        \r\n        if (isRowVisible) {\r\n            let renderedRow = this.renderRows(rowIndex, rowIndex);\r\n            p.tbody.insertBefore(renderedRow, childNodes[i] || null);\r\n        }\r\n    } else {\r\n        this.trigger('rowdestroy', childNodes[rowIndex]);\r\n        this._unbindCellEventsForRow(childNodes[rowIndex]);\r\n        p.tbody.removeChild(childNodes[rowIndex]);\r\n        let renderedRow = this.renderRows(rowIndex, rowIndex);\r\n        p.tbody.insertBefore(renderedRow, childNodes[rowIndex] || null);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Get the DOM element for the specified row, if it exists\r\n * @public\r\n * @expose\r\n * @param {Number} physicalRowIndex index\r\n * @returns {Element?} row or null\r\n */\r\nDGTable.prototype.getRowElement = function(physicalRowIndex) {\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    if (physicalRowIndex < 0 || physicalRowIndex > p.rows.length - 1) return null;\r\n\r\n    // Find out if the row is in the rendered dataset\r\n    let rowIndex = -1;\r\n    if (p.filteredRows && (rowIndex = indexOf(p.filteredRows, p.rows[physicalRowIndex])) === -1) return this;\r\n\r\n    if (rowIndex === -1) {\r\n        rowIndex = physicalRowIndex;\r\n    }\r\n\r\n    let childNodes = p.tbody.childNodes;\r\n\r\n    if (this.o.virtualTable) {\r\n        // Now make sure that the row actually rendered, as this is a virtual table\r\n        for (let i = 0; i < childNodes.length; i++) {\r\n            if (childNodes[i]['physicalRowIndex'] === physicalRowIndex) {\r\n                return childNodes[i];\r\n            }\r\n        }\r\n    } else {\r\n        return childNodes[rowIndex];\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Refreshes all virtual rows\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.refreshAllVirtualRows = function () {\r\n\r\n    const p = this.p;\r\n\r\n    if (this.o.virtualTable) {\r\n        // Now make sure that the row actually rendered, as this is a virtual table\r\n        let rowsToRender = [];\r\n        let childNodes = p.tbody.childNodes;\r\n        \r\n        for (let i = 0, rowCount = childNodes.length; i < rowCount; i++) {\r\n            rowsToRender.push(childNodes[i]['physicalRowIndex']);\r\n            this.trigger('rowdestroy', childNodes[i]);\r\n            this._unbindCellEventsForRow(childNodes[i]);\r\n            p.tbody.removeChild(childNodes[i]);\r\n            i--;\r\n            rowCount--;\r\n        }\r\n        \r\n        for (let i = 0; i < rowsToRender.length; i++) {\r\n            let renderedRow = this.renderRows(rowsToRender[i], rowsToRender[i]);\r\n            p.tbody.appendChild(renderedRow);\r\n        }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Replace the whole dataset\r\n * @public\r\n * @expose\r\n * @param {Object[]} data array of rows to add to the table\r\n * @param {Boolean} [resort=false] should resort all rows?\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.setRows = function (data, resort) {\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    // this.scrollTop = this.$el.find('.table').scrollTop();\r\n    p.rows.reset(data);\r\n\r\n    if (resort && p.rows.sortColumn.length) {\r\n        this.resort();\r\n    } else {\r\n        this._refilter();\r\n    }\r\n\r\n    this.clearAndRender().trigger('addrows', data.length, true);\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Creates a URL representing the data in the specified element.\r\n * This uses the Blob or BlobBuilder of the modern browsers.\r\n * The url can be used for a Web Worker.\r\n * @public\r\n * @expose\r\n * @param {string} id Id of the element containing your data\r\n * @returns {String|null} the url, or null if not supported\r\n */\r\nDGTable.prototype.getUrlForElementContent = function (id) {\r\n    let blob,\r\n        el = document.getElementById(id);\r\n    if (el) {\r\n        let data = el.textContent;\r\n        if (typeof Blob === 'function') {\r\n            blob = new Blob([data]);\r\n        } else {\r\n            let BlobBuilder = global.BlobBuilder || global.WebKitBlobBuilder || global.MozBlobBuilder || global.MSBlobBuilder;\r\n            if (!BlobBuilder) {\r\n                return null;\r\n            }\r\n            let builder = new BlobBuilder();\r\n            builder.append(data);\r\n            blob = builder.getBlob();\r\n        }\r\n        return (global.URL || global.webkitURL).createObjectURL(blob);\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * @public\r\n * @expose\r\n * @returns {Boolean} A value indicating whether Web Workers are supported\r\n */\r\nDGTable.prototype.isWorkerSupported = function() {\r\n    return global['Worker'] instanceof Function;\r\n};\r\n\r\n/**\r\n * Creates a Web Worker for updating the table.\r\n * @public\r\n * @expose\r\n * @param {string} url Url to the script for the Web Worker\r\n * @param {Boolean=true} start if true, starts the Worker immediately\r\n * @returns {Worker?} the Web Worker, or null if not supported\r\n */\r\nDGTable.prototype.createWebWorker = function (url, start, resort) {\r\n    if (this.isWorkerSupported()) {\r\n        let that = this,\r\n            p = that.p;\r\n\r\n        let worker = new Worker(url);\r\n        let listener = function (evt) {\r\n            if (evt.data.append) {\r\n                that.addRows(evt.data.rows, resort);\r\n            } else {\r\n                that.setRows(evt.data.rows, resort);\r\n            }\r\n        };\r\n        worker.addEventListener('message', listener, false);\r\n        if (!p.workerListeners) {\r\n            p.workerListeners = [];\r\n        }\r\n        p.workerListeners.push({ worker: worker, listener: listener });\r\n        if (start || start === undefined) {\r\n            worker.postMessage(null);\r\n        }\r\n        return worker;\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Unbinds a Web Worker from the table, stopping updates.\r\n * @public\r\n * @expose\r\n * @param {Worker} worker the Web Worker\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.unbindWebWorker = function (worker) {\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    if (p.workerListeners) {\r\n        for (let j = 0; j < p.workerListeners.length; j++) {\r\n            if (p.workerListeners[j].worker == worker) {\r\n                worker.removeEventListener('message', p.workerListeners[j].listener, false);\r\n                p.workerListeners.splice(j, 1);\r\n                j--;\r\n            }\r\n        }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * A synonym for hideCellPreview()\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.abortCellPreview = function() {\r\n    this.hideCellPreview();\r\n    return this;\r\n};\r\n\r\n/**\r\n * Cancel a resize in progress\r\n * @expose\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.cancelColumnResize = function() {\r\n    const p = this.p;\r\n\r\n    if (p.$resizer) {\r\n        p.$resizer.remove();\r\n        p.$resizer = null;\r\n        $(document).off('mousemove.dgtable', p.onMouseMoveResizeAreaBound)\r\n            .off('mouseup.dgtable', p.onEndDragColumnHeaderBound);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * @param {jQuery_Event} event\r\n */\r\nDGTable.prototype._onVirtualTableScrolled = function (_event) {\r\n    this.render();\r\n};\r\n\r\n/**\r\n * @param {jQuery_Event} event\r\n */\r\nDGTable.prototype._onTableScrolledHorizontally = function (_event) {\r\n    const p = this.p;\r\n\r\n    p.header.scrollLeft = p.table.scrollLeft;\r\n};\r\n\r\n/**previousElementSibling\r\n * Reverse-calculate the column to resize from mouse position\r\n * @private\r\n * @param {jQuery_Event} e jQuery mouse event\r\n * @returns {String} name of the column which the mouse is over, or null if the mouse is not in resize position\r\n */\r\nDGTable.prototype._getColumnByResizePosition = function (e) {\r\n\r\n    let that = this,\r\n        o = that.o,\r\n        rtl = this._isTableRtl();\r\n\r\n    let $headerCell = $(e.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName),\r\n        headerCell = $headerCell[0];\r\n    if (headerCell['__cell']) {\r\n        headerCell = headerCell['__cell'];\r\n        $headerCell = $(headerCell);\r\n    }\r\n\r\n    let previousElementSibling = $headerCell[0].previousSibling;\r\n    while (previousElementSibling && previousElementSibling.nodeType != 1) {\r\n        previousElementSibling = previousElementSibling.previousSibling;\r\n    }\r\n\r\n    let firstCol = !previousElementSibling;\r\n\r\n    let mouseX = ((e.pageX != null ? e.pageX : e.originalEvent.pageX) || e.originalEvent.clientX) - $headerCell.offset().left;\r\n\r\n    if (rtl) {\r\n        if (!firstCol && CssUtil.outerWidth($headerCell) - mouseX <= o.resizeAreaWidth / 2) {\r\n            return previousElementSibling['columnName'];\r\n        } else if (mouseX <= o.resizeAreaWidth / 2) {\r\n            return headerCell['columnName'];\r\n        }\r\n    } else {\r\n        if (!firstCol && mouseX <= o.resizeAreaWidth / 2) {\r\n            return previousElementSibling['columnName'];\r\n        } else if (CssUtil.outerWidth($headerCell) - mouseX <= o.resizeAreaWidth / 2) {\r\n            return headerCell['columnName'];\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * @param {jQuery_Event} event\r\n */\r\nDGTable.prototype._onTouchStartColumnHeader = function (event) {\r\n    const p = this.p;\r\n\r\n    if (p.currentTouchId) return;\r\n\r\n    let startTouch = event.originalEvent.changedTouches[0];\r\n    p.currentTouchId = startTouch.identifier;\r\n\r\n    let $eventTarget = $(event.currentTarget);\r\n\r\n    let startPos = { x: startTouch.pageX, y: startTouch.pageY },\r\n        currentPos = startPos,\r\n        distanceTreshold = 9;\r\n        \r\n    let tapAndHoldTimeout;\r\n\r\n    let unbind = function () {\r\n        p.currentTouchId = null;\r\n        $eventTarget.off('touchend').off('touchcancel');\r\n        clearTimeout(tapAndHoldTimeout);\r\n    };\r\n\r\n    let fakeEvent = function (name) {\r\n        let fakeEvent = $.Event(name);\r\n        let extendObjects = Array.prototype.slice.call(arguments, 1);\r\n        $.each(['target', 'clientX', 'clientY', 'offsetX', 'offsetY', 'screenX', 'screenY', 'pageX', 'pageY', 'which'],\r\n            function () {\r\n                fakeEvent[this] = event[this];\r\n                for (let i = 0; i < extendObjects.length; i++) {\r\n                    if (extendObjects[i][this] != null) {\r\n                        fakeEvent[this] = extendObjects[i][this];\r\n                    }\r\n                }\r\n            });\r\n        return fakeEvent;\r\n    };\r\n\r\n    $eventTarget.trigger(fakeEvent('mousedown', event.originalEvent.changedTouches[0], { 'which': 1 }));\r\n\r\n    tapAndHoldTimeout = setTimeout(() => {\r\n        unbind();\r\n\r\n        // Prevent simulated mouse events after touchend\r\n        $eventTarget\r\n            .one('touchend', (event) => {\r\n                event.preventDefault();\r\n                $eventTarget.off('touchend').off('touchcancel');\r\n            })\r\n            .one('touchcancel', (_event) => {\r\n                $eventTarget.off('touchend').off('touchcancel');\r\n            });\r\n\r\n        let distanceTravelled = Math.sqrt(Math.pow(Math.abs(currentPos.x - startPos.x), 2) + Math.pow(Math.abs(currentPos.y - startPos.y), 2));\r\n\r\n        if (distanceTravelled < distanceTreshold) {\r\n            this.cancelColumnResize();\r\n            $eventTarget.trigger(fakeEvent('mouseup', event.originalEvent.changedTouches[0], { 'which': 3 }));\r\n        }\r\n\r\n    }, 500);\r\n\r\n    $eventTarget\r\n        .on('touchend', (event) => {\r\n            let touch = find(event.originalEvent.changedTouches, (touch) => touch.identifier === p.currentTouchId);\r\n            if (!touch) return;\r\n\r\n            unbind();\r\n\r\n            event.preventDefault(); // Prevent simulated mouse events\r\n\r\n            currentPos = { x: touch.pageX, y: touch.pageY };\r\n            let distanceTravelled = Math.sqrt(Math.pow(Math.abs(currentPos.x - startPos.x), 2) + Math.pow(Math.abs(currentPos.y - startPos.y), 2));\r\n\r\n            if (distanceTravelled < distanceTreshold || p.$resizer) {\r\n                $eventTarget.trigger(fakeEvent('mouseup', touch, { 'which': 1 }));\r\n                $eventTarget.trigger(fakeEvent('click', touch, { 'which': 1 }));\r\n            }\r\n\r\n        })\r\n        .on('touchcancel', () => {\r\n            unbind();\r\n        })\r\n        .on('touchmove', (event) => {\r\n            let touch = find(event.originalEvent.changedTouches, (touch) => touch.identifier === p.currentTouchId);\r\n            if (!touch) return;\r\n\r\n            // Keep track of current position, so we know if we need to cancel the tap-and-hold\r\n            currentPos = { x: touch.pageX, y: touch.pageY };\r\n\r\n            if (p.$resizer) {\r\n                event.preventDefault();\r\n\r\n                $eventTarget.trigger(fakeEvent('mousemove', touch));\r\n            }\r\n        });\r\n};\r\n\r\n/**\r\n * @param {jQuery_Event} e event\r\n */\r\nDGTable.prototype._onMouseDownColumnHeader = function (event) {\r\n    if (event.which !== 1) return this; // Only treat left-clicks\r\n\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p,\r\n        col = this._getColumnByResizePosition(event);\r\n\r\n    if (col) {\r\n        let column = p.columns.get(col);\r\n        if (!o.resizableColumns || !column || !column.resizable) {\r\n            return false;\r\n        }\r\n\r\n        let rtl = this._isTableRtl();\r\n\r\n        if (p.$resizer) {\r\n            $(p.$resizer).remove();\r\n        }\r\n        p.$resizer = $('<div></div>')\r\n            .addClass(o.resizerClassName)\r\n            .css({\r\n                'position': 'absolute',\r\n                'display': 'block',\r\n                'z-index': -1,\r\n                'visibility': 'hidden',\r\n                'width': '2px',\r\n                'background': '#000',\r\n                'opacity': 0.7,\r\n            })\r\n            .appendTo(this.$el);\r\n\r\n        let selectedHeaderCell = column.element,\r\n            commonAncestor = p.$resizer.parent();\r\n\r\n        let posCol = selectedHeaderCell.offset(),\r\n            posRelative = commonAncestor.offset();\r\n        if (ieVersion === 8) {\r\n            posCol = selectedHeaderCell.offset(); // IE8 bug, first time it receives zeros...\r\n        }\r\n        posRelative.left += parseFloat(commonAncestor.css('border-left-width')) || 0;\r\n        posRelative.top += parseFloat(commonAncestor.css('border-top-width')) || 0;\r\n        posCol.left -= posRelative.left;\r\n        posCol.top -= posRelative.top;\r\n        posCol.top -= parseFloat(selectedHeaderCell.css('border-top-width')) || 0;\r\n        let resizerWidth = CssUtil.outerWidth(p.$resizer);\r\n        if (rtl) {\r\n            posCol.left -= Math.ceil((parseFloat(selectedHeaderCell.css('border-left-width')) || 0) / 2);\r\n            posCol.left -= Math.ceil(resizerWidth / 2);\r\n        } else {\r\n            posCol.left += CssUtil.outerWidth(selectedHeaderCell);\r\n            posCol.left += Math.ceil((parseFloat(selectedHeaderCell.css('border-right-width')) || 0) / 2);\r\n            posCol.left -= Math.ceil(resizerWidth / 2);\r\n        }\r\n\r\n        p.$resizer\r\n            .css({\r\n                'z-index': '10',\r\n                'visibility': 'visible',\r\n                'left': posCol.left,\r\n                'top': posCol.top,\r\n                'height': CssUtil.height(this.$el),\r\n            })[0]['columnName'] = selectedHeaderCell[0]['columnName'];\r\n            \r\n        try { p.$resizer[0].style.zIndex = ''; }\r\n        catch (ignored) { /* we're ok with this */ }\r\n\r\n        $(document).on('mousemove.dgtable', p.onMouseMoveResizeAreaBound);\r\n        $(document).on('mouseup.dgtable', p.onEndDragColumnHeaderBound);\r\n\r\n        event.preventDefault();\r\n    }\r\n};\r\n\r\n/**\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onMouseMoveColumnHeader = function (event) {\r\n\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p;\r\n\r\n    if (o.resizableColumns) {\r\n        let col = this._getColumnByResizePosition(event);\r\n        let headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName)[0];\r\n        if (!col || !p.columns.get(col).resizable) {\r\n            headerCell.style.cursor = '';\r\n        } else {\r\n            headerCell.style.cursor = 'e-resize';\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * @param {jQuery_Event} event\r\n */\r\nDGTable.prototype._onMouseUpColumnHeader = function (event) {\r\n    if (event.which === 3) {\r\n        let o = this.o;\r\n        let $headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName);\r\n        let bounds = $headerCell.offset();\r\n        bounds['width'] = CssUtil.outerWidth($headerCell);\r\n        bounds['height'] = CssUtil.outerHeight($headerCell);\r\n        this.trigger('headercontextmenu', $headerCell[0]['columnName'], event.pageX, event.pageY, bounds);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onMouseLeaveColumnHeader = function (event) {\r\n    let o = this.o;\r\n    let headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName)[0];\r\n    headerCell.style.cursor = '';\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onClickColumnHeader = function (event) {\r\n    if (!this._getColumnByResizePosition(event)) {\r\n\r\n        let that = this,\r\n            o = that.o,\r\n            p = that.p;\r\n\r\n        let headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName)[0];\r\n        if (o.sortableColumns) {\r\n            let column = p.columns.get(headerCell['columnName']);\r\n            if (column && column.sortable) {\r\n                this.sort(headerCell['columnName'], undefined, true).render();\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onStartDragColumnHeader = function (event) {\r\n\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p;\r\n\r\n    if (o.movableColumns) {\r\n\r\n        let $headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName);\r\n        let column = p.columns.get($headerCell[0]['columnName']);\r\n        if (column && column.movable) {\r\n            $headerCell[0].style.opacity = 0.35;\r\n            p.dragId = Math.random() * 0x9999999; // Recognize this ID on drop\r\n            event.originalEvent.dataTransfer.setData('text', JSON.stringify({ dragId: p.dragId, column: column.name }));\r\n        } else {\r\n            event.preventDefault();\r\n        }\r\n\r\n    } else {\r\n\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {MouseEvent} event event\r\n */\r\nDGTable.prototype._onMouseMoveResizeArea = function (event) {\r\n\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    let column = p.columns.get(p.$resizer[0]['columnName']);\r\n    let rtl = this._isTableRtl();\r\n\r\n    let selectedHeaderCell = column.element,\r\n        commonAncestor = p.$resizer.parent();\r\n    let posCol = selectedHeaderCell.offset(), posRelative = commonAncestor.offset();\r\n    posRelative.left += parseFloat(commonAncestor.css('border-left-width')) || 0;\r\n    posCol.left -= posRelative.left;\r\n    let resizerWidth = CssUtil.outerWidth(p.$resizer);\r\n    \r\n    let isBoxing = selectedHeaderCell.css('box-sizing') === 'border-box';\r\n    \r\n    let actualX = event.pageX - posRelative.left;\r\n    let minX = posCol.left;\r\n\r\n    minX -= Math.ceil(resizerWidth / 2);\r\n\r\n    if (rtl) {\r\n        minX += CssUtil.outerWidth(selectedHeaderCell);\r\n        minX -= column.ignoreMin ? 0 : this.o.minColumnWidth;\r\n\r\n        if (!isBoxing) {\r\n            minX -= Math.ceil((parseFloat(selectedHeaderCell.css('border-left-width')) || 0) / 2);\r\n            minX -= this._horizontalPadding(selectedHeaderCell[0]);\r\n        }\r\n\r\n        if (actualX > minX) {\r\n            actualX = minX;\r\n        }\r\n    } else {\r\n        minX += column.ignoreMin ? 0 : this.o.minColumnWidth;\r\n        \r\n        if (!isBoxing) {\r\n            minX += Math.ceil((parseFloat(selectedHeaderCell.css('border-right-width')) || 0) / 2);\r\n            minX += this._horizontalPadding(selectedHeaderCell[0]);\r\n        }\r\n\r\n        if (actualX < minX) {\r\n            actualX = minX;\r\n        }\r\n    }\r\n\r\n    p.$resizer.css('left', actualX + 'px');\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {Event} event event\r\n */\r\nDGTable.prototype._onEndDragColumnHeader = function (event) {\r\n\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p;\r\n\r\n    if (!p.$resizer) {\r\n        event.target.style.opacity = null;\r\n    } else {\r\n        $(document).off('mousemove.dgtable', p.onMouseMoveResizeAreaBound)\r\n            .off('mouseup.dgtable', p.onEndDragColumnHeaderBound);\r\n\r\n        let column = p.columns.get(p.$resizer[0]['columnName']);\r\n        let rtl = this._isTableRtl();\r\n\r\n        let selectedHeaderCell = column.element,\r\n            commonAncestor = p.$resizer.parent();\r\n        let posCol = selectedHeaderCell.offset(), posRelative = commonAncestor.offset();\r\n        posRelative.left += parseFloat(commonAncestor.css('border-left-width')) || 0;\r\n        posCol.left -= posRelative.left;\r\n        let resizerWidth = CssUtil.outerWidth(p.$resizer);\r\n        \r\n        let isBoxing = selectedHeaderCell.css('box-sizing') === 'border-box';\r\n\r\n        let actualX = event.pageX - posRelative.left;\r\n        let baseX = posCol.left, minX = posCol.left;\r\n        let width = 0;\r\n\r\n        baseX -= Math.ceil(resizerWidth / 2);\r\n\r\n        if (rtl) {\r\n\r\n            if (!isBoxing) {\r\n                actualX += this._horizontalPadding(selectedHeaderCell[0]);\r\n                actualX += parseFloat(selectedHeaderCell.css('border-left-width')) || 0;\r\n                actualX += parseFloat(selectedHeaderCell.css('border-right-width')) || 0;\r\n            }\r\n\r\n            baseX += CssUtil.outerWidth(selectedHeaderCell);\r\n            \r\n            minX = baseX - (column.ignoreMin ? 0 : this.o.minColumnWidth);\r\n            if (actualX > minX) {\r\n                actualX = minX;\r\n            }\r\n\r\n            width = baseX - actualX;\r\n        } else {\r\n\r\n            if (!isBoxing) {\r\n                actualX -= this._horizontalPadding(selectedHeaderCell[0]);\r\n                actualX -= parseFloat(selectedHeaderCell.css('border-left-width')) || 0;\r\n                actualX -= parseFloat(selectedHeaderCell.css('border-right-width')) || 0;\r\n            }\r\n\r\n            minX = baseX + (column.ignoreMin ? 0 : this.o.minColumnWidth);\r\n            if (actualX < minX) {\r\n                actualX = minX;\r\n            }\r\n\r\n            width = actualX - baseX;\r\n        }\r\n        \r\n        p.$resizer.remove();\r\n        p.$resizer = null;\r\n\r\n        let sizeToSet = width;\r\n\r\n        if (column.widthMode === ColumnWidthMode.RELATIVE) {\r\n            let detectedWidth = this._calculateWidthAvailableForColumns();\r\n\r\n            let sizeLeft = detectedWidth;\r\n            //sizeLeft -= p.table.offsetWidth - p.table.clientWidth;\r\n\r\n            let totalRelativePercentage = 0;\r\n            let relatives = 0;\r\n\r\n            for (let i = 0; i < p.visibleColumns.length; i++) {\r\n                let col = p.visibleColumns[i];\r\n                if (col.name === column.name) continue;\r\n\r\n                if (col.widthMode == ColumnWidthMode.RELATIVE) {\r\n                    totalRelativePercentage += col.width;\r\n                    relatives++;\r\n                } else {\r\n                    sizeLeft -= col.actualWidth;\r\n                }\r\n            }\r\n\r\n            sizeLeft = Math.max(1, sizeLeft);\r\n            sizeToSet = width / sizeLeft;\r\n\r\n            if (relatives > 0) {\r\n                // When there's more than one relative overall,\r\n                //   we can do relative enlarging/shrinking.\r\n                // Otherwise, we can end up having a 0 width.\r\n\r\n                let unNormalizedSizeToSet = sizeToSet / ((1 - sizeToSet) / totalRelativePercentage);\r\n\r\n                totalRelativePercentage += sizeToSet;\r\n\r\n                // Account for relative widths scaling later\r\n                if ((totalRelativePercentage < 1 && o.relativeWidthGrowsToFillWidth) ||\r\n                    (totalRelativePercentage > 1 && o.relativeWidthShrinksToFillWidth)) {\r\n                    sizeToSet = unNormalizedSizeToSet;\r\n                }\r\n            }\r\n            \r\n            sizeToSet *= 100;\r\n            sizeToSet += '%';\r\n        }\r\n\r\n        this.setColumnWidth(column.name, sizeToSet);\r\n    }\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onDragEnterColumnHeader = function (event) {\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p;\r\n\r\n    if (o.movableColumns) {\r\n        let dataTransferred = event.originalEvent.dataTransfer.getData('text');\r\n        if (dataTransferred) {\r\n            dataTransferred = JSON.parse(dataTransferred);\r\n        }\r\n        else {\r\n            dataTransferred = null; // WebKit does not provide the dataTransfer on dragenter?..\r\n        }\r\n\r\n        let $headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName);\r\n        if (!dataTransferred ||\r\n            (p.dragId == dataTransferred.dragId && $headerCell['columnName'] !== dataTransferred.column)) {\r\n\r\n            let column = p.columns.get($headerCell[0]['columnName']);\r\n            if (column && (column.movable || column != p.visibleColumns[0])) {\r\n                $($headerCell).addClass('drag-over');\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onDragOverColumnHeader = function (event) {\r\n    event.preventDefault();\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onDragLeaveColumnHeader = function (event) {\r\n    let o = this.o;\r\n    let $headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName);\r\n    if ( !$($headerCell[0].firstChild)\r\n            .has(event.originalEvent.relatedTarget).length ) {\r\n        $headerCell.removeClass('drag-over');\r\n    }\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {jQuery_Event} event event\r\n */\r\nDGTable.prototype._onDropColumnHeader = function (event) {\r\n    event.preventDefault();\r\n\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p;\r\n\r\n    let dataTransferred = JSON.parse(event.originalEvent.dataTransfer.getData('text'));\r\n    let $headerCell = $(event.target).closest('div.' + o.tableClassName + '-header-cell,div.' + o.cellPreviewClassName);\r\n    if (o.movableColumns && dataTransferred.dragId == p.dragId) {\r\n        let srcColName = dataTransferred.column,\r\n            destColName = $headerCell[0]['columnName'],\r\n            srcCol = p.columns.get(srcColName),\r\n            destCol = p.columns.get(destColName);\r\n        if (srcCol && destCol && srcCol.movable && (destCol.movable || destCol != p.visibleColumns[0])) {\r\n            this.moveColumn(srcColName, destColName);\r\n        }\r\n    }\r\n    $($headerCell).removeClass('drag-over');\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._clearSortArrows = function () {\r\n\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    if (p.$table) {\r\n        let tableClassName = this.o.tableClassName;\r\n        let sortedColumns = p.$headerRow.find('>div.' + tableClassName + '-header-cell.sorted');\r\n        let arrows = sortedColumns.find('>div>.sort-arrow');\r\n        forEach(arrows, bind(function(arrow){\r\n            let col = p.columns.get(arrow.parentNode.parentNode['columnName']);\r\n            if (col) {\r\n                col.arrowProposedWidth = 0;\r\n            }\r\n        }, this));\r\n        arrows.remove();\r\n        sortedColumns.removeClass('sorted').removeClass('desc');\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {String} column the name of the sort column\r\n * @param {Boolean} descending table is sorted descending\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._showSortArrow = function (column, descending) {\r\n\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    let col = p.columns.get(column);\r\n    if (!col) return false;\r\n    \r\n    let arrow = createElement('span');\r\n    arrow.className = 'sort-arrow';\r\n\r\n    if (col.element) {\r\n        col.element.addClass(descending ? 'sorted desc' : 'sorted');\r\n        col.element[0].firstChild.insertBefore(arrow, col.element[0].firstChild.firstChild);\r\n    }\r\n\r\n    if (col.widthMode != ColumnWidthMode.RELATIVE && this.o.adjustColumnWidthForSortArrow) {\r\n        col.arrowProposedWidth = arrow.scrollWidth + (parseFloat($(arrow).css('margin-right')) || 0) + (parseFloat($(arrow).css('margin-left')) || 0);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {Number} cellIndex index of the column in the DOM\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._resizeColumnElements = function (cellIndex) {\r\n\r\n    let that = this,\r\n        p = that.p;\r\n\r\n    let headerCells = p.$headerRow.find('div.' + this.o.tableClassName + '-header-cell');\r\n    let col = p.columns.get(headerCells[cellIndex]['columnName']);\r\n\r\n    if (col) {\r\n        headerCells[cellIndex].style.width = (col.actualWidthConsideringScrollbarWidth || col.actualWidth) + 'px';\r\n\r\n        let width = (col.actualWidthConsideringScrollbarWidth || col.actualWidth) + 'px';\r\n        let tbodyChildren = p.$tbody[0].childNodes;\r\n        for (let i = 0, count = tbodyChildren.length; i < count; i++) {\r\n            let headerRow = tbodyChildren[i];\r\n            if (headerRow.nodeType !== 1) continue;\r\n            headerRow.childNodes[cellIndex].style.width = width;\r\n        }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * @returns {DGTable} self\r\n * */\r\nDGTable.prototype._destroyHeaderCells = function() {\r\n\r\n    let that = this,\r\n        o = that.o,\r\n        p = that.p;\r\n\r\n    if (p.$headerRow) {\r\n        this.trigger('headerrowdestroy', p.headerRow);\r\n        p.$headerRow.find('div.' + o.tableClassName + '-header-cell').remove();\r\n        p.$headerRow = null;\r\n        p.headerRow = null;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._renderSkeletonBase = function () {\r\n    let that = this,\r\n        p = that.p,\r\n        o = that.o;\r\n    \r\n    // Clean up old elements\r\n    \r\n    if (p.$table && o.virtualTable) {\r\n        p.$table.remove();\r\n        if (p.$tbody) {\r\n            let rows = p.$tbody[0].childNodes;\r\n            for (let i = 0, len = rows.length; i < len; i++) {\r\n                that.trigger('rowdestroy', rows[i]);\r\n                that._unbindCellEventsForRow(rows[i]);\r\n            }\r\n        }\r\n        p.$table = p.table = p.$tbody = p.tbody = null;\r\n    }\r\n    \r\n    that._destroyHeaderCells();\r\n    p.currentTouchId = null;\r\n    if (p.$header) {\r\n        p.$header.remove();\r\n    }    \r\n\r\n    // Create new base elements\r\n    let tableClassName = o.tableClassName,\r\n        headerCellClassName = tableClassName + '-header-cell',\r\n        header = createElement('div'),\r\n        $header = $(header),\r\n        headerRow = createElement('div'),\r\n        $headerRow = $(headerRow);\r\n\r\n    header.className = tableClassName + '-header';\r\n    headerRow.className = tableClassName + '-header-row';\r\n    \r\n    p.$header = $header;\r\n    p.header = header;\r\n    p.$headerRow = $headerRow;\r\n    p.headerRow = headerRow;\r\n    $headerRow.appendTo(p.$header);\r\n    $header.prependTo(this.$el);\r\n    \r\n    relativizeElement(that.$el);\r\n    \r\n    if (o.width == DGTable.Width.SCROLL) {\r\n        this.el.style.overflow = 'hidden';\r\n    } else {\r\n        this.el.style.overflow = '';\r\n    }\r\n    \r\n    if (!o.height && o.virtualTable) {\r\n        o.height = CssUtil.innerHeight(this.$el);\r\n    }\r\n    \r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._renderSkeletonHeaderCells = function () {\r\n    let that = this,\r\n        p = that.p,\r\n        o = that.o;\r\n        \r\n    let allowCellPreview = o.allowCellPreview,\r\n        allowHeaderCellPreview = o.allowHeaderCellPreview;\r\n\r\n    let tableClassName = o.tableClassName,\r\n        headerCellClassName = tableClassName + '-header-cell',\r\n        header = p.header,\r\n        $header = p.$header,\r\n        headerRow = p.headerRow,\r\n        $headerRow = p.$headerRow;\r\n\r\n    let ieDragDropHandler;\r\n    if (hasIeDragAndDropBug) {\r\n        ieDragDropHandler = function(evt) {\r\n            evt.preventDefault();\r\n            this.dragDrop();\r\n            return false;\r\n        };\r\n    }\r\n\r\n    let preventDefault = function (event) { event.preventDefault(); };\r\n\r\n    // Create header cells\r\n    for (let i = 0; i < p.visibleColumns.length; i++) {\r\n        let column = p.visibleColumns[i];\r\n        if (column.visible) {\r\n            let cell = createElement('div');\r\n            let $cell = $(cell);\r\n            cell.draggable = true;\r\n            cell.className = headerCellClassName;\r\n            cell.style.width = column.actualWidth + 'px';\r\n            if (o.sortableColumns && column.sortable) {\r\n                cell.className += ' sortable';\r\n            }\r\n            cell['columnName'] = column.name;\r\n            cell.setAttribute('data-column', column.name);\r\n            \r\n            let cellInside = createElement('div');\r\n            cellInside.innerHTML = o.headerCellFormatter(column.label, column.name);\r\n            cell.appendChild(cellInside);\r\n            if (allowCellPreview && allowHeaderCellPreview) {\r\n                p._bindCellHoverIn(cell);\r\n            }\r\n            headerRow.appendChild(cell);\r\n\r\n            p.visibleColumns[i].element = $cell;\r\n\r\n            $cell.on('mousedown.dgtable', bind(that._onMouseDownColumnHeader, that))\r\n                .on('mousemove.dgtable', bind(that._onMouseMoveColumnHeader, that))\r\n                .on('mouseup.dgtable', bind(that._onMouseUpColumnHeader, that))\r\n                .on('mouseleave.dgtable', bind(that._onMouseLeaveColumnHeader, that))\r\n                .on('touchstart.dgtable', bind(that._onTouchStartColumnHeader, that))\r\n                .on('dragstart.dgtable', bind(that._onStartDragColumnHeader, that))\r\n                .on('click.dgtable', bind(that._onClickColumnHeader, that))\r\n                .on('contextmenu.dgtable', preventDefault);\r\n            $(cellInside)\r\n                .on('dragenter.dgtable', bind(that._onDragEnterColumnHeader, that))\r\n                .on('dragover.dgtable', bind(that._onDragOverColumnHeader, that))\r\n                .on('dragleave.dgtable', bind(that._onDragLeaveColumnHeader, that))\r\n                .on('drop.dgtable', bind(that._onDropColumnHeader, that));\r\n\r\n            if (hasIeDragAndDropBug) {\r\n                $cell.on('selectstart.dgtable', bind(ieDragDropHandler, cell));\r\n            }\r\n\r\n            // Disable these to allow our own context menu events without interruption\r\n            $cell.css({ '-webkit-touch-callout': 'none', '-webkit-user-select': 'none', '-moz-user-select': 'none', '-ms-user-select': 'none', '-o-user-select': 'none', 'user-select': 'none' });\r\n        }\r\n    }\r\n\r\n    this.trigger('headerrowcreate', headerRow);\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._renderSkeletonBody = function () {\r\n    let that = this,\r\n        p = that.p,\r\n        o = that.o;\r\n\r\n    let tableClassName = o.tableClassName;\r\n        \r\n    // Calculate virtual row heights\r\n    if (o.virtualTable && !p.virtualRowHeight) {\r\n        let createDummyRow = function() {\r\n            let row = createElement('div'),\r\n                cell = row.appendChild(createElement('div')),\r\n                cellInner = cell.appendChild(createElement('div'));\r\n            row.className = tableClassName + '-row';\r\n            cell.className = tableClassName + '-cell';\r\n            cellInner.innerHTML = '0';\r\n            row.style.visibility = 'hidden';\r\n            row.style.position = 'absolute';\r\n            return row;\r\n        };\r\n\r\n        let $dummyTbody, $dummyWrapper = $('<div>')\r\n            .addClass(that.el.className)\r\n            .css({ 'z-index': -1, 'position': 'absolute', left: '0', top: '-9999px', width: '1px', overflow: 'hidden' })\r\n            .append(\r\n                $('<div>').addClass(tableClassName).append(\r\n                    $dummyTbody = $('<div>').addClass(tableClassName + '-body').css('width', 99999)\r\n                )\r\n            );\r\n\r\n        $dummyWrapper.appendTo(document.body);\r\n\r\n        let row1 = createDummyRow(), row2 = createDummyRow(), row3 = createDummyRow();\r\n        $dummyTbody.append(row1, row2, row3);\r\n\r\n        p.virtualRowHeightFirst = CssUtil.outerHeight(row1);\r\n        p.virtualRowHeight = CssUtil.outerHeight(row2);\r\n        p.virtualRowHeightLast = CssUtil.outerHeight(row3);\r\n\r\n        p.virtualRowHeightMin = Math.min(Math.min(p.virtualRowHeightFirst, p.virtualRowHeight), p.virtualRowHeightLast);\r\n        p.virtualRowHeightMax = Math.max(Math.max(p.virtualRowHeightFirst, p.virtualRowHeight), p.virtualRowHeightLast);\r\n\r\n        $dummyWrapper.remove();\r\n    }\r\n\r\n    // Create inner table and tbody\r\n    if (!p.$table) {\r\n\r\n        let fragment = document.createDocumentFragment();\r\n        \r\n        // Create the inner table element\r\n        let table = createElement('div');\r\n        let $table = $(table);\r\n        table.className = tableClassName;\r\n\r\n        if (o.virtualTable) {\r\n            table.className += ' virtual';\r\n        }\r\n\r\n        let tableHeight = (o.height - CssUtil.outerHeight(p.$headerRow));\r\n        if ($table.css('box-sizing') !== 'border-box') {\r\n            tableHeight -= parseFloat($table.css('border-top-width')) || 0;\r\n            tableHeight -= parseFloat($table.css('border-bottom-width')) || 0;\r\n            tableHeight -= parseFloat($table.css('padding-top')) || 0;\r\n            tableHeight -= parseFloat($table.css('padding-bottom')) || 0;\r\n        }\r\n        p.visibleHeight = tableHeight;\r\n        table.style.height = o.height ? tableHeight + 'px' : 'auto';\r\n        table.style.display = 'block';\r\n        table.style.overflowY = 'auto';\r\n        table.style.overflowX = o.width == DGTable.Width.SCROLL ? 'auto' : 'hidden';\r\n        fragment.appendChild(table);\r\n\r\n        // Create the \"tbody\" element\r\n        let tbody = createElement('div');\r\n        let $tbody = $(tbody);\r\n        tbody.className = o.tableClassName + '-body';\r\n        p.table = table;\r\n        p.tbody = tbody;\r\n        p.$table = $table;\r\n        p.$tbody = $tbody;\r\n\r\n        if (o.virtualTable) {\r\n            p.virtualVisibleRows = Math.ceil(p.visibleHeight / p.virtualRowHeightMin);\r\n        }\r\n\r\n        that._calculateVirtualHeight();\r\n\r\n        relativizeElement($tbody);\r\n        relativizeElement($table);\r\n\r\n        table.appendChild(tbody);\r\n        that.el.appendChild(fragment);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n * @deprecated\r\n */\r\nDGTable.prototype._renderSkeleton = function () {\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._updateLastCellWidthFromScrollbar = function(force) {\r\n\r\n    const p = this.p;\r\n\r\n    // Calculate scrollbar's width and reduce from lat column's width\r\n    let scrollbarWidth = p.table.offsetWidth - p.table.clientWidth;\r\n    if (scrollbarWidth != p.scrollbarWidth || force) {\r\n        p.scrollbarWidth = scrollbarWidth;\r\n        for (let i = 0; i < p.columns.length; i++) {\r\n            p.columns[i].actualWidthConsideringScrollbarWidth = null;\r\n        }\r\n\r\n        if (p.scrollbarWidth > 0 && p.visibleColumns.length > 0) {\r\n            // (There should always be at least 1 column visible, but just in case)\r\n            let lastColIndex = p.visibleColumns.length - 1;\r\n\r\n            p.visibleColumns[lastColIndex].actualWidthConsideringScrollbarWidth = p.visibleColumns[lastColIndex].actualWidth - p.scrollbarWidth;\r\n            let lastColWidth = p.visibleColumns[lastColIndex].actualWidthConsideringScrollbarWidth + 'px';\r\n            let tbodyChildren = p.tbody.childNodes;\r\n            for (let i = 0, count = tbodyChildren.length; i < count; i++) {\r\n                let row = tbodyChildren[i];\r\n                if (row.nodeType !== 1) continue;\r\n                row.childNodes[lastColIndex].style.width = lastColWidth;\r\n            }\r\n\r\n            p.headerRow.childNodes[lastColIndex].style.width = lastColWidth;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Explicitly set the width of the table based on the sum of the column widths\r\n * @private\r\n * @param {boolean} parentSizeMayHaveChanged Parent size may have changed, treat rendering accordingly\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype._updateTableWidth = function (parentSizeMayHaveChanged) {\r\n    const o = this.o, p = this.p;\r\n    let width = this._calculateTbodyWidth();\r\n\r\n    p.tbody.style.minWidth = width + 'px';\r\n    p.headerRow.style.minWidth = (width + (p.scrollbarWidth || 0)) + 'px';\r\n\r\n    p.$table.off('scroll', p.onTableScrolledHorizontallyBound);\r\n\r\n    if (o.width == DGTable.Width.AUTO) {\r\n        // Update wrapper element's size to fully contain the table body\r\n\r\n        CssUtil.width(p.$table, CssUtil.outerWidth(p.$tbody));\r\n        CssUtil.width(this.$el, CssUtil.outerWidth(p.$table));\r\n\r\n    } else if (o.width == DGTable.Width.SCROLL) {\r\n\r\n        if (parentSizeMayHaveChanged) {\r\n            let lastScrollTop = p.table ? p.table.scrollTop : 0,\r\n                lastScrollLeft = p.table ? p.table.scrollLeft : 0;\r\n\r\n            // BUGFIX: Relayout before recording the widths\r\n            webkitRenderBugfix(this.el);\r\n\r\n            p.table.scrollTop = lastScrollTop;\r\n            p.table.scrollLeft = lastScrollLeft;\r\n            p.header.scrollLeft = lastScrollLeft;\r\n        }\r\n\r\n        p.$table.on('scroll', p.onTableScrolledHorizontallyBound);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * @private\r\n * @returns {Boolean}\r\n */\r\nDGTable.prototype._isTableRtl = function() {\r\n    return this.p.$table.css('direction') === 'rtl';\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {Object} column column object\r\n * @returns {String}\r\n */\r\nDGTable.prototype._serializeColumnWidth = function(column) {\r\n    return column.widthMode === ColumnWidthMode.AUTO ? 'auto' :\r\n        column.widthMode === ColumnWidthMode.RELATIVE ? column.width * 100 + '%' :\r\n            column.width;\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {HTMLElement} el\r\n */\r\nDGTable.prototype._cellMouseOverEvent = function(el) {\r\n    const o = this.o, p = this.p;\r\n\r\n    let elInner = el.firstChild;\r\n\r\n    if ((elInner.scrollWidth - elInner.clientWidth > 1) ||\r\n        (elInner.scrollHeight - elInner.clientHeight > 1)) {\r\n\r\n        this.hideCellPreview();\r\n        p.abortCellPreview = false;\r\n\r\n        let $el = $(el), $elInner = $(elInner);\r\n        let previewCell = createElement('div'), $previewCell = $(previewCell);\r\n        previewCell.innerHTML = el.innerHTML;\r\n        previewCell.className = o.cellPreviewClassName;\r\n\r\n        let isHeaderCell = $el.hasClass(o.tableClassName + '-header-cell');\r\n        if (isHeaderCell) {\r\n            previewCell.className += ' header';\r\n            if ($el.hasClass('sortable')) {\r\n                previewCell.className += ' sortable';\r\n            }\r\n\r\n            previewCell.draggable = true;\r\n\r\n            $(previewCell).on('mousedown', bind(this._onMouseDownColumnHeader, this))\r\n                .on('mousemove', bind(this._onMouseMoveColumnHeader, this))\r\n                .on('mouseup', bind(this._onMouseUpColumnHeader, this))\r\n                .on('mouseleave', bind(this._onMouseLeaveColumnHeader, this))\r\n                .on('touchstart', bind(this._onTouchStartColumnHeader, this))\r\n                .on('dragstart', bind(this._onStartDragColumnHeader, this))\r\n                .on('click', bind(this._onClickColumnHeader, this))\r\n                .on('contextmenu.dgtable', function (event) { event.preventDefault(); });\r\n            $(previewCell.firstChild)\r\n                .on('dragenter', bind(this._onDragEnterColumnHeader, this))\r\n                .on('dragover', bind(this._onDragOverColumnHeader, this))\r\n                .on('dragleave', bind(this._onDragLeaveColumnHeader, this))\r\n                .on('drop', bind(this._onDropColumnHeader, this));\r\n\r\n            if (hasIeDragAndDropBug) {\r\n                $(previewCell).on('selectstart', bind(function(evt) {\r\n                    evt.preventDefault();\r\n                    this.dragDrop();\r\n                    return false;\r\n                }, previewCell));\r\n            }\r\n        }\r\n\r\n        let paddingL = parseFloat($el.css('padding-left')) || 0,\r\n            paddingR = parseFloat($el.css('padding-right')) || 0,\r\n            paddingT = parseFloat($el.css('padding-top')) || 0,\r\n            paddingB = parseFloat($el.css('padding-bottom')) || 0;\r\n\r\n        let requiredWidth = elInner.scrollWidth + (el.clientWidth - elInner.offsetWidth);\r\n\r\n        let borderBox = $el.css('box-sizing') === 'border-box';\r\n        if (borderBox) {\r\n            $previewCell.css('box-sizing', 'border-box');\r\n        } else {\r\n            requiredWidth -= paddingL + paddingR;\r\n            $previewCell.css('margin-top', parseFloat($(el).css('border-top-width')) || 0);\r\n        }\r\n\r\n        if (!p.transparentBgColor1) {\r\n            // Detect browser's transparent spec\r\n            let tempDiv = document.createElement('div');\r\n            tempDiv.style.backgroundColor = 'transparent';\r\n            p.transparentBgColor1 = $(tempDiv).css('background-color');\r\n            tempDiv.style.backgroundColor = 'rgba(0,0,0,0)';\r\n            p.transparentBgColor2 = $(tempDiv).css('background-color');\r\n        }\r\n\r\n        let css = {\r\n            'box-sizing': borderBox ? 'border-box' : 'content-box',\r\n            'width': requiredWidth,\r\n            'min-height': CssUtil.height($el),\r\n            'padding-left': paddingL,\r\n            'padding-right': paddingR,\r\n            'padding-top': paddingT,\r\n            'padding-bottom': paddingB,\r\n            'overflow': 'hidden',\r\n            'position': 'absolute',\r\n            'z-index': '-1',\r\n            'left': '0',\r\n            'top': '0',\r\n            'cursor': 'default',\r\n        };\r\n\r\n        if (css) {\r\n            let bgColor = $(el).css('background-color');\r\n            if (bgColor === p.transparentBgColor1 || bgColor === p.transparentBgColor2) {\r\n                bgColor = $(el.parentNode).css('background-color');\r\n            }\r\n            if (bgColor === p.transparentBgColor1 || bgColor === p.transparentBgColor2) {\r\n                bgColor = '#fff';\r\n            }\r\n            css['background-color'] = bgColor;\r\n        }\r\n\r\n        $previewCell.css(css);\r\n\r\n        this.el.appendChild(previewCell);\r\n\r\n        $(previewCell.firstChild).css({\r\n            'direction': $elInner.css('direction'),\r\n            'white-space': $elInner.css('white-space'),\r\n        });\r\n\r\n        if (isHeaderCell) {\r\n            // Disable these to allow our own context menu events without interruption\r\n            $previewCell.css({\r\n                '-webkit-touch-callout': 'none',\r\n                '-webkit-user-select': 'none',\r\n                '-moz-user-select': 'none',\r\n                '-ms-user-select': 'none',\r\n                '-o-user-select': 'none',\r\n                'user-select': 'none',\r\n            });\r\n        }\r\n\r\n        previewCell['rowIndex'] = el.parentNode['rowIndex'];\r\n        let physicalRowIndex = previewCell['physicalRowIndex'] = el.parentNode['physicalRowIndex'];\r\n        previewCell['columnName'] = p.visibleColumns[indexOf(el.parentNode.childNodes, el)].name;\r\n\r\n        try {\r\n            let selection = SelectionHelper.saveSelection(el);\r\n            if (selection)\r\n                SelectionHelper.restoreSelection(previewCell, selection);\r\n        } catch (ignored) { /* we're ok with this */ }\r\n        \r\n        this.trigger(\r\n            'cellpreview',\r\n            previewCell.firstChild,\r\n            physicalRowIndex == null ? null : physicalRowIndex,\r\n            previewCell['columnName'],\r\n            physicalRowIndex == null ? null : p.rows[physicalRowIndex],\r\n            el\r\n        );\r\n\r\n        if (p.abortCellPreview) {\r\n            $previewCell.remove();\r\n            return;\r\n        }\r\n\r\n        let $parent = this.$el;\r\n        let $scrollParent = $parent[0] === window ? $(document) : $parent;\r\n\r\n        let offset = $el.offset();\r\n        let parentOffset = $parent.offset();\r\n        let rtl = $el.css('float') === 'right';\r\n        let prop = rtl ? 'right' : 'left';\r\n\r\n        // Handle RTL, go from the other side\r\n        if (rtl) {\r\n            let windowWidth = $(window).width();\r\n            offset.right = windowWidth - (offset.left + CssUtil.outerWidth($el));\r\n            parentOffset.right = windowWidth - (parentOffset.left + CssUtil.outerWidth($parent));\r\n        }\r\n\r\n        // If the parent has borders, then it would offset the offset...\r\n        offset.left -= parseFloat($parent.css('border-left-width')) || 0;\r\n        offset.right -= parseFloat($parent.css('border-right-width')) || 0;\r\n        offset.top -= parseFloat($parent.css('border-top-width')) || 0;\r\n\r\n        // Handle border widths of the element being offset\r\n        offset[prop] += parseFloat($(el).css('border-' + prop + '-width')) || 0;\r\n        offset.top += parseFloat($(el).css('border-top-width')) || parseFloat($(el).css('border-bottom-width')) || 0;\r\n\r\n        // Subtract offsets to get offset relative to parent\r\n        offset.left -= parentOffset.left;\r\n        offset.right -= parentOffset.right;\r\n        offset.top -= parentOffset.top;\r\n\r\n        // Constrain horizontally\r\n        let minHorz = 0,\r\n            maxHorz = $parent - CssUtil.outerWidth($previewCell);\r\n        offset[prop] = offset[prop] < minHorz ?\r\n            minHorz :\r\n            (offset[prop] > maxHorz ? maxHorz : offset[prop]);\r\n\r\n        // Constrain vertically\r\n        let totalHeight = CssUtil.outerHeight($el);\r\n        let maxTop = $scrollParent.scrollTop() + CssUtil.innerHeight($parent) - totalHeight;\r\n        if (offset.top > maxTop) {\r\n            offset.top = Math.max(0, maxTop);\r\n        }\r\n\r\n        // Apply css to preview cell\r\n        let previewCss = {\r\n            top: offset.top,\r\n            'z-index': 9999,\r\n        };\r\n        previewCss[prop] = offset[prop];\r\n\r\n        $previewCell.css(previewCss);\r\n\r\n        previewCell['__cell'] = el;\r\n        p.$cellPreviewCell = $previewCell;\r\n        el['__previewCell'] = previewCell;\r\n\r\n        p._bindCellHoverOut(el);\r\n        p._bindCellHoverOut(previewCell);\r\n\r\n        $previewCell.on('mousewheel', (event) => {\r\n            let originalEvent = event.originalEvent;\r\n            let xy = originalEvent.wheelDelta || -originalEvent.detail,\r\n                x = originalEvent.wheelDeltaX || (originalEvent.axis == 1 ? xy : 0),\r\n                y = originalEvent.wheelDeltaY || (originalEvent.axis == 2 ? xy : 0);\r\n\r\n            if (xy) {\r\n                this.hideCellPreview();\r\n            }\r\n\r\n            if (y && p.table.scrollHeight > p.table.clientHeight) {\r\n                let scrollTop = (y * -1) + p.$table.scrollTop();\r\n                p.$table.scrollTop(scrollTop);\r\n            }\r\n\r\n            if (x && p.table.scrollWidth > p.table.clientWidth) {\r\n                let scrollLeft = (x * -1) + p.$table.scrollLeft();\r\n                p.$table.scrollLeft(scrollLeft);\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * @private\r\n * @param {HTMLElement} el\r\n */\r\nDGTable.prototype._cellMouseOutEvent = function(_el) {\r\n    this.hideCellPreview();\r\n};\r\n\r\n/**\r\n * Hides the current cell preview,\r\n * or prevents the one that is currently trying to show (in the 'cellpreview' event)\r\n * @public\r\n * @expose\r\n * @returns {DGTable} self\r\n */\r\nDGTable.prototype.hideCellPreview = function() {\r\n    const p = this.p;\r\n    \r\n    if (p.$cellPreviewCell) {\r\n        let previewCell = p.$cellPreviewCell[0];\r\n        let origCell = previewCell['__cell'];\r\n        let selection;\r\n        \r\n        try {\r\n            selection = SelectionHelper.saveSelection(previewCell);\r\n        } catch (ignored) { /* we're ok with this */ }\r\n        \r\n        p.$cellPreviewCell.remove();\r\n        p._unbindCellHoverOut(origCell);\r\n        p._unbindCellHoverOut(previewCell);\r\n        \r\n        try {\r\n            if (selection)\r\n                SelectionHelper.restoreSelection(origCell, selection);\r\n        } catch (ignored) { /* we're ok with this */ }\r\n\r\n        this.trigger('cellpreviewdestroy', previewCell.firstChild, previewCell['physicalRowIndex'], previewCell['columnName'], origCell);\r\n\r\n        origCell['__previewCell'] = null;\r\n        previewCell['__cell'] = null;\r\n\r\n        p.$cellPreviewCell = null;\r\n        p.abortCellPreview = false;\r\n    } else {\r\n        p.abortCellPreview = true;\r\n    }\r\n    \r\n    return this;\r\n};\r\n\r\n// It's a shame the Google Closure Compiler does not support exposing a nested @param\r\n\r\n/**\r\n * @typedef {Object} SERIALIZED_COLUMN\r\n * @property {Number|null|undefined} [order=0]\r\n * @property {String|null|undefined} [width='auto']\r\n * @property {Boolean|null|undefined} [visible=true]\r\n * */\r\n\r\n/**\r\n * @typedef {Object} SERIALIZED_COLUMN_SORT\r\n * @property {String|null|undefined} [column='']\r\n * @property {Boolean|null|undefined} [descending=false]\r\n * */\r\n\r\n/**\r\n * @enum {ColumnWidthMode|number|undefined}\r\n * @const\r\n * @typedef {ColumnWidthMode}\r\n */\r\nconst ColumnWidthMode = {\r\n    /** @const*/ AUTO: 0,\r\n    /** @const*/ ABSOLUTE: 1,\r\n    /** @const*/ RELATIVE: 2,\r\n};\r\n\r\n/**\r\n * @enum {DGTable.Width|String|undefined}\r\n * @const\r\n * @typedef {DGTable.Width}\r\n */\r\nDGTable.Width = {\r\n    /** @const*/ NONE: 'none',\r\n    /** @const*/ AUTO: 'auto',\r\n    /** @const*/ SCROLL: 'scroll',\r\n};\r\n\r\n/**\r\n * @expose\r\n * @typedef {Object} COLUMN_SORT_OPTIONS\r\n * @property {String|null|undefined} column\r\n * @property {Boolean|null|undefined} [descending=false]\r\n * */\r\n\r\n/**\r\n * @expose\r\n * @typedef {Object} COLUMN_OPTIONS\r\n * @property {String|null|undefined} width\r\n * @property {String|null|undefined} name\r\n * @property {String|null|undefined} label\r\n * @property {String|null|undefined} dataPath - defaults to `name`\r\n * @property {String|null|undefined} comparePath - defaults to `dataPath`\r\n * @property {Number|String|null|undefined} comparePath\r\n * @property {Boolean|null|undefined} [resizable=true]\r\n * @property {Boolean|null|undefined} [movable=true]\r\n * @property {Boolean|null|undefined} [sortable=true]\r\n * @property {Boolean|null|undefined} [visible=true]\r\n * @property {String|null|undefined} [cellClasses]\r\n * @property {Boolean|null|undefined} [ignoreMin=false]\r\n * */\r\n\r\n/**\r\n * @typedef {Object} DGTable.Options\r\n * @property {COLUMN_OPTIONS[]} [columns]\r\n * @property {Number} [height]\r\n * @property {DGTable.Width} [width]\r\n * @property {Boolean|null|undefined} [virtualTable=true]\r\n * @property {Boolean|null|undefined} [resizableColumns=true]\r\n * @property {Boolean|null|undefined} [movableColumns=true]\r\n * @property {Number|null|undefined} [sortableColumns=1]\r\n * @property {Boolean|null|undefined} [adjustColumnWidthForSortArrow=true]\r\n * @property {Boolean|null|undefined} [relativeWidthGrowsToFillWidth=true]\r\n * @property {Boolean|null|undefined} [relativeWidthShrinksToFillWidth=false]\r\n * @property {Boolean|null|undefined} [convertColumnWidthsToRelative=false]\r\n * @property {Boolean|null|undefined} [autoFillTableWidth=false]\r\n * @property {String|null|undefined} [cellClasses]\r\n * @property {String|String[]|COLUMN_SORT_OPTIONS|COLUMN_SORT_OPTIONS[]} [sortColumn]\r\n * @property {Function|null|undefined} [cellFormatter=null]\r\n * @property {Function|null|undefined} [headerCellFormatter=null]\r\n * @property {Number|null|undefined} [rowsBufferSize=10]\r\n * @property {Number|null|undefined} [minColumnWidth=35]\r\n * @property {Number|null|undefined} [resizeAreaWidth=8]\r\n * @property {{function(string,boolean):{function(a:*,b:*):boolean}}} [onComparatorRequired]\r\n * @property {String|null|undefined} [resizerClassName=undefined]\r\n * @property {String|null|undefined} [tableClassName=undefined]\r\n * @property {Boolean|null|undefined} [allowCellPreview=true]\r\n * @property {Boolean|null|undefined} [allowHeaderCellPreview=true]\r\n * @property {String|null|undefined} [cellPreviewClassName=undefined]\r\n * @property {Boolean|null|undefined} [cellPreviewAutoBackground=true]\r\n * @property {Element|null|undefined} [el=undefined]\r\n * @property {String|null|undefined} [className=undefined]\r\n * @property {Function|null|undefined} [filter=undefined]\r\n * */\r\n\r\n/**\r\n * @typedef {{\r\n     *  currentTarget: Element,\r\n     *  data: Object.<string, *>,\r\n     *  delegateTarget: Element,\r\n     *  isDefaultPrevented: Boolean,\r\n     *  isImmediatePropagationStopped: Boolean,\r\n     *  isPropagationStopped: Boolean,\r\n     *  namespace: string,\r\n     *  originalEvent: MouseEvent|TouchEvent|Event,\r\n     *  pageX: Number,\r\n     *  pageY: Number,\r\n     *  preventDefault: Function,\r\n     *  props: Object.<string, *>,\r\n     *  relatedTarget: Element,\r\n     *  result: *,\r\n     *  stopImmediatePropagation: Function,\r\n     *  stopPropagation: Function,\r\n     *  target: Element,\r\n     *  timeStamp: Number,\r\n     *  type: string,\r\n     *  which: Number\r\n     * }} jQuery_Event\r\n * */\r\n\r\nif (!$.controls) {\r\n    $.controls = {};\r\n}\r\n\r\n$.controls.dgtable = DGTable;\r\n\r\nexport default DGTable;"],"names":["nativeBind","Function","prototype","bind","what","oThis","this","TypeError","aArgs","Array","slice","call","arguments","fToBind","fNOP","fBound","apply","concat","nativeIndexOf","indexOf","array","searchElement","fromIndex","k","len","length","n","Math","max","abs","contains","item","find","predicate","i","nativeForEach","forEach","RowCollection","collection","Object","assign","initialize","options","sortColumn","add","rows","at","splice","push","reset","filteredCollection","filterFunc","args","row","onComparatorRequired","onSort","nativeSort","sort","getDefaultComparator","column","descending","columnName","comparePath","split","pathLength","hasPath","lessVal","moreVal","leftRow","rightRow","leftVal","rightVal","ColumnCollection","silent","comparator","comparators","value","get","name","getByOrder","order","normalizeOrder","ordered","col1","col2","getVisibleColumns","visible","getMaxOrder","moveColumn","src","dest","col","srcOrder","destOrder","$","jQuery","hasComputedStyle","document","defaultView","getComputedStyle","jQuerySupportsFractions","fn","jquery","cssExpands","sizeKeys","CssUtil","generateSizeFunction","key","cssExpand","inner","outer","el","Element","size","border","padding","style","currentStyle","isBoxing","includeMargins","parseFloat","margin","undefined","generatejQueryFunction","isArray","ret","SelectionHelper","range","window","getSelection","getRangeAt","commonAncestorContainer","child","parent","parentNode","isChildOf","preSelectionRange","cloneRange","selectNodeContents","setEnd","startContainer","startOffset","start","toString","end","savedSel","node","charIndex","nodeStack","foundStart","stop","createRange","setStart","collapse","pop","nodeType","nextCharIndex","childNodes","sel","removeAllRanges","addRange","ByColumnFilter","keyword","actualVal","caseSensitive","toLowerCase","userAgent","navigator","ieVersion","substr","hasIeDragAndDropBug","createElement","hasOwnProperty","relativizeElement","$el","css","DGTable","VERSION","that","o","p","events","addClass","className","data","on","destroy","onMouseMoveResizeAreaBound","_onMouseMoveResizeArea","onEndDragColumnHeaderBound","_onEndDragColumnHeader","onTableScrolledHorizontallyBound","_onTableScrolledHorizontally","tableSkeletonNeedsRendering","virtualTable","rowsBufferSize","minColumnWidth","resizeAreaWidth","resizableColumns","movableColumns","sortableColumns","parseInt","adjustColumnWidthForSortArrow","convertColumnWidthsToRelative","autoFillTableWidth","cellClasses","resizerClassName","tableClassName","allowCellPreview","allowHeaderCellPreview","cellPreviewClassName","cellPreviewAutoBackground","width","Width","NONE","relativeWidthGrowsToFillWidth","relativeWidthShrinksToFillWidth","setCellFormatter","cellFormatter","setHeaderCellFormatter","headerCellFormatter","setFilter","filter","height","setColumns","columns","sortColumns","tmpSortColumns","filteredRows","hoverMouseOverHandler","evt","relatedTarget","event","fromElement","_cellMouseOverEvent","hoverMouseOutHandler","toElement","_cellMouseOutEvent","_bindCellHoverIn","addEventListener","_unbindCellHoverIn","removeEventListener","_bindCellHoverOut","_unbindCellHoverOut","attachEvent","detachEvent","eventName","callback","cb","once","off","callbacks","trigger","_parseColumnWidth","minWidth","widthSize","widthMode","ColumnWidthMode","AUTO","RELATIVE","ABSOLUTE","mode","_initColumnFromData","columnData","parsedWidth","ignoreMin","label","resizable","sortable","movable","dataPath","close","remove","__removed","$resizer","$tbody","trs","_destroyHeaderCells","_unbindCellEventsForTable","$table","empty","workerListeners","j","worker","listener","_deferredRender","clearTimeout","prop","headerRow","rowCount","cells","cellCount","tbody","_unbindCellEventsForRow","rowToClean","render","offsetParent","setTimeout","renderedRows","_clearSortArrows","lastScrollTop","table","scrollTop","lastScrollLeft","scrollLeft","_renderSkeletonBase","_renderSkeletonBody","tableWidthChanged","_renderSkeletonHeaderCells","_updateLastCellWidthFromScrollbar","renderRows","html","append","header","_updateTableWidth","_showSortArrow","_onVirtualTableScrolled","firstVisible","floor","virtualRowHeightFirst","virtualRowHeight","lastVisible","ceil","visibleHeight","countToRemove","oldFirstVisible","oldLastVisible","tbodyChildNodes","min","removeChild","prepend","clearAndRender","first","last","top","physicalRowIndex","rowClassName","cellClassName","isDataFiltered","visibleColumns","isVirtual","colCount","colIndex","_finalWidth","actualWidthConsideringScrollbarWidth","actualWidth","bodyFragment","createDocumentFragment","virtualRowXAttr","_isTableRtl","rowData","cell","setAttribute","appendChild","innerHTML","_getHtmlForCell","position","_calculateVirtualHeight","virtualRowHeightLast","_calculateTbodyWidth","cellInner","$row","sumActualWidth","$thisWrapper","z-index","left","float","overflow","appendTo","body","fractionTest","hasFractions","round","outerWidth","scrollbarWidth","normalizedCols","normalizedColumn","_ensureVisibleColumns","addColumn","before","beforeColumn","to","removeColumn","colIdx","formatter","val","hadFilter","filterArgs","extend","_refilter","setColumnLabel","element","firstChild","textContent","destCol","headerCell","$headerRow","beforePos","fromPos","insertBefore","srcWidth","destWidth","tbodyChildren","count","currentSort","_tableSkeletonNeedsRendering","sorts","resort","setColumnVisible","isColumnVisible","setMinColumnWidth","getMinColumnWidth","setSortableColumns","getSortableColumns","setMovableColumns","getMovableColumns","setResizableColumns","getResizableColumns","setComparatorCallback","comparatorCallback","setColumnWidth","oldWidth","_serializeColumnWidth","newWidth","getColumnWidth","getColumnConfig","getColumnsConfig","config","getSortedColumns","sorted","getHtmlForCell","colValue","dataPathIndex","content","getRowYPos","rowIndex","offsetTop","getDataForRow","getRowCount","getIndexForRow","getFilteredRowCount","getIndexForFilteredRow","getDataForFilteredRow","getHeaderRowElement","_horizontalPadding","_horizontalBorderWidth","_calculateWidthAvailableForColumns","oldDisplay","display","detectedWidth","$header","$cells","$cell","getTextWidth","text","$tableWrapper","visibility","lastDetectedWidth","forceUpdate","renderColumns","sizeLeft","relatives","tableWidthBeforeCalculations","absWidthTotal","changedColumnIndexes","totalRelativePercentage","arrowProposedWidth","sizeLeftForRelative","clientWidth","minColumnWidthRelative","isNaN","delta","extraRelative","nonResizableTotal","sizeLeftToFill","conv","NaN","tableWidth","_resizeColumnElements","tableHeightChanged","innerHeight","outerHeight","addRows","firstRow","lastRow","removeRows","lastRowIndex","index","removeRow","refreshRow","isRowVisible","renderedRow","getRowElement","refreshAllVirtualRows","rowsToRender","setRows","getUrlForElementContent","id","blob","getElementById","Blob","BlobBuilder","global","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","builder","getBlob","URL","webkitURL","createObjectURL","isWorkerSupported","createWebWorker","url","Worker","postMessage","unbindWebWorker","abortCellPreview","hideCellPreview","cancelColumnResize","_event","_getColumnByResizePosition","e","rtl","$headerCell","target","closest","previousElementSibling","previousSibling","firstCol","mouseX","pageX","originalEvent","clientX","offset","_onTouchStartColumnHeader","currentTouchId","startTouch","changedTouches","identifier","tapAndHoldTimeout","$eventTarget","currentTarget","startPos","x","y","pageY","currentPos","unbind","fakeEvent","Event","extendObjects","each","which","one","preventDefault","sqrt","pow","touch","_onMouseDownColumnHeader","selectedHeaderCell","commonAncestor","posCol","posRelative","resizerWidth","zIndex","ignored","_onMouseMoveColumnHeader","cursor","_onMouseUpColumnHeader","bounds","_onMouseLeaveColumnHeader","_onClickColumnHeader","_onStartDragColumnHeader","opacity","dragId","random","dataTransfer","setData","JSON","stringify","actualX","minX","baseX","sizeToSet","unNormalizedSizeToSet","_onDragEnterColumnHeader","dataTransferred","getData","parse","_onDragOverColumnHeader","_onDragLeaveColumnHeader","has","removeClass","_onDropColumnHeader","srcColName","destColName","srcCol","sortedColumns","arrows","thisArg","T","kValue","arrow","scrollWidth","cellIndex","headerCells","prependTo","SCROLL","ieDragDropHandler","headerCellClassName","dragDrop","draggable","cellInside","-webkit-touch-callout","-webkit-user-select","-moz-user-select","-ms-user-select","-o-user-select","user-select","$dummyTbody","createDummyRow","$dummyWrapper","row1","row2","row3","virtualRowHeightMin","virtualRowHeightMax","fragment","tableHeight","overflowY","overflowX","virtualVisibleRows","_renderSkeleton","force","offsetWidth","lastColIndex","lastColWidth","parentSizeMayHaveChanged","offsetHeight","webkitRenderBugfix","elInner","scrollHeight","clientHeight","$elInner","previewCell","$previewCell","isHeaderCell","hasClass","paddingL","paddingR","paddingT","paddingB","requiredWidth","borderBox","transparentBgColor1","tempDiv","backgroundColor","transparentBgColor2","bgColor","selection","saveSelection","restoreSelection","$parent","$scrollParent","parentOffset","windowWidth","right","minHorz","maxHorz","totalHeight","maxTop","previewCss","$cellPreviewCell","xy","wheelDelta","detail","wheelDeltaX","axis","wheelDeltaY","_el","origCell","controls","dgtable"],"mappings":"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"}